
L05_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006374  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006544  08006544  00016544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065a8  080065a8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b0  080065b0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080065b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  2000006c  08006624  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  08006624  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156e6  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f1a  00000000  00000000  000357c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  000386e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da6  00000000  00000000  00039878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276ce  00000000  00000000  0003a61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186c0  00000000  00000000  00061cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f1a9e  00000000  00000000  0007a3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d74  00000000  00000000  0016be4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00170bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800652c 	.word	0x0800652c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	0800652c 	.word	0x0800652c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005b4:	2301      	movs	r3, #1
 80005b6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6818      	ldr	r0, [r3, #0]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	b299      	uxth	r1, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	f107 020f 	add.w	r2, r7, #15
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2301      	movs	r3, #1
 80005ce:	f001 fad9 	bl	8001b84 <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005d2:	2310      	movs	r3, #16
 80005d4:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	6818      	ldr	r0, [r3, #0]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	791b      	ldrb	r3, [r3, #4]
 80005de:	b299      	uxth	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f107 020f 	add.w	r2, r7, #15
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	f001 faca 	bl	8001b84 <HAL_I2C_Master_Transmit>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af02      	add	r7, sp, #8
 80005fe:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	b299      	uxth	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	f107 020c 	add.w	r2, r7, #12
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2302      	movs	r3, #2
 8000616:	f001 fba9 	bl	8001d6c <HAL_I2C_Master_Receive>
  hbh1750->Readout = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 800061a:	7b3b      	ldrb	r3, [r7, #12]
 800061c:	021b      	lsls	r3, r3, #8
 800061e:	7b7a      	ldrb	r2, [r7, #13]
 8000620:	4313      	orrs	r3, r2
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062a:	eddf 6a08 	vldr	s13, [pc, #32]	; 800064c <BH1750_ReadIlluminance_lux+0x54>
 800062e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	edc3 7a03 	vstr	s15, [r3, #12]

  return hbh1750->Readout;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	ee07 3a90 	vmov	s15, r3
}
 8000640:	eeb0 0a67 	vmov.f32	s0, s15
 8000644:	3710      	adds	r7, #16
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	3f99999a 	.word	0x3f99999a

08000650 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08e      	sub	sp, #56	; 0x38
 8000654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000666:	4ba6      	ldr	r3, [pc, #664]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4aa5      	ldr	r2, [pc, #660]	; (8000900 <MX_GPIO_Init+0x2b0>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4ba3      	ldr	r3, [pc, #652]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	623b      	str	r3, [r7, #32]
 800067c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	4ba0      	ldr	r3, [pc, #640]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a9f      	ldr	r2, [pc, #636]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b9d      	ldr	r3, [pc, #628]	; (8000900 <MX_GPIO_Init+0x2b0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000692:	61fb      	str	r3, [r7, #28]
 8000694:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b9a      	ldr	r3, [pc, #616]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a99      	ldr	r2, [pc, #612]	; (8000900 <MX_GPIO_Init+0x2b0>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b97      	ldr	r3, [pc, #604]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b94      	ldr	r3, [pc, #592]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a93      	ldr	r2, [pc, #588]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b91      	ldr	r3, [pc, #580]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006c6:	4b8e      	ldr	r3, [pc, #568]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a8d      	ldr	r2, [pc, #564]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006cc:	f043 0320 	orr.w	r3, r3, #32
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b8b      	ldr	r3, [pc, #556]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0320 	and.w	r3, r3, #32
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006de:	4b88      	ldr	r3, [pc, #544]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a87      	ldr	r2, [pc, #540]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006e4:	f043 0310 	orr.w	r3, r3, #16
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b85      	ldr	r3, [pc, #532]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0310 	and.w	r3, r3, #16
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f6:	4b82      	ldr	r3, [pc, #520]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a81      	ldr	r2, [pc, #516]	; (8000900 <MX_GPIO_Init+0x2b0>)
 80006fc:	f043 0308 	orr.w	r3, r3, #8
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b7f      	ldr	r3, [pc, #508]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0308 	and.w	r3, r3, #8
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800070e:	4b7c      	ldr	r3, [pc, #496]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a7b      	ldr	r2, [pc, #492]	; (8000900 <MX_GPIO_Init+0x2b0>)
 8000714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b79      	ldr	r3, [pc, #484]	; (8000900 <MX_GPIO_Init+0x2b0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LIGHT_BULB_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2109      	movs	r1, #9
 800072a:	4876      	ldr	r0, [pc, #472]	; (8000904 <MX_GPIO_Init+0x2b4>)
 800072c:	f001 f980 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f244 0181 	movw	r1, #16513	; 0x4081
 8000736:	4874      	ldr	r0, [pc, #464]	; (8000908 <MX_GPIO_Init+0x2b8>)
 8000738:	f001 f97a 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000742:	4872      	ldr	r0, [pc, #456]	; (800090c <MX_GPIO_Init+0x2bc>)
 8000744:	f001 f974 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f244 2140 	movw	r1, #16960	; 0x4240
 800074e:	4870      	ldr	r0, [pc, #448]	; (8000910 <MX_GPIO_Init+0x2c0>)
 8000750:	f001 f96e 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800075a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4866      	ldr	r0, [pc, #408]	; (8000904 <MX_GPIO_Init+0x2b4>)
 800076c:	f000 ffb4 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LIGHT_BULB_Pin;
 8000770:	2309      	movs	r3, #9
 8000772:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	485f      	ldr	r0, [pc, #380]	; (8000904 <MX_GPIO_Init+0x2b4>)
 8000788:	f000 ffa6 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800078c:	2332      	movs	r3, #50	; 0x32
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079c:	230b      	movs	r3, #11
 800079e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	4619      	mov	r1, r3
 80007a6:	4857      	ldr	r0, [pc, #348]	; (8000904 <MX_GPIO_Init+0x2b4>)
 80007a8:	f000 ff96 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007ac:	2386      	movs	r3, #134	; 0x86
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007bc:	230b      	movs	r3, #11
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4619      	mov	r1, r3
 80007c6:	4853      	ldr	r0, [pc, #332]	; (8000914 <MX_GPIO_Init+0x2c4>)
 80007c8:	f000 ff86 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80007cc:	f244 0381 	movw	r3, #16513	; 0x4081
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	4619      	mov	r1, r3
 80007e4:	4848      	ldr	r0, [pc, #288]	; (8000908 <MX_GPIO_Init+0x2b8>)
 80007e6:	f000 ff77 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 80007ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	4842      	ldr	r0, [pc, #264]	; (800090c <MX_GPIO_Init+0x2bc>)
 8000802:	f000 ff69 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD6_Pin;
 8000806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD6_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4619      	mov	r1, r3
 800081e:	483b      	ldr	r0, [pc, #236]	; (800090c <MX_GPIO_Init+0x2bc>)
 8000820:	f000 ff5a 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8000824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800082a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000830:	2302      	movs	r3, #2
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4619      	mov	r1, r3
 800083a:	4837      	ldr	r0, [pc, #220]	; (8000918 <MX_GPIO_Init+0x2c8>)
 800083c:	f000 ff4c 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000852:	230b      	movs	r3, #11
 8000854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	482a      	ldr	r0, [pc, #168]	; (8000908 <MX_GPIO_Init+0x2b8>)
 800085e:	f000 ff3b 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8000862:	f244 2340 	movw	r3, #16960	; 0x4240
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	4825      	ldr	r0, [pc, #148]	; (8000910 <MX_GPIO_Init+0x2c0>)
 800087c:	f000 ff2c 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000880:	2380      	movs	r3, #128	; 0x80
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000890:	4619      	mov	r1, r3
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <MX_GPIO_Init+0x2c0>)
 8000894:	f000 ff20 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000898:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008aa:	230a      	movs	r3, #10
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4817      	ldr	r0, [pc, #92]	; (8000914 <MX_GPIO_Init+0x2c4>)
 80008b6:	f000 ff0f 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008cc:	4619      	mov	r1, r3
 80008ce:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_GPIO_Init+0x2c4>)
 80008d0:	f000 ff02 	bl	80016d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008da:	2302      	movs	r3, #2
 80008dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e6:	230b      	movs	r3, #11
 80008e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ee:	4619      	mov	r1, r3
 80008f0:	4807      	ldr	r0, [pc, #28]	; (8000910 <MX_GPIO_Init+0x2c0>)
 80008f2:	f000 fef1 	bl	80016d8 <HAL_GPIO_Init>

}
 80008f6:	bf00      	nop
 80008f8:	3738      	adds	r7, #56	; 0x38
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020800 	.word	0x40020800
 8000908:	40020400 	.word	0x40020400
 800090c:	40021400 	.word	0x40021400
 8000910:	40021800 	.word	0x40021800
 8000914:	40020000 	.word	0x40020000
 8000918:	40021000 	.word	0x40021000

0800091c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_I2C1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_I2C1_Init+0x74>)
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <MX_I2C1_Init+0x7c>)
 800092a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C1_Init+0x74>)
 8000934:	2201      	movs	r2, #1
 8000936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b15      	ldr	r3, [pc, #84]	; (8000990 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093e:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C1_Init+0x74>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C1_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000956:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_I2C1_Init+0x74>)
 8000958:	f001 f884 	bl	8001a64 <HAL_I2C_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000962:	f000 f979 	bl	8000c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000966:	2100      	movs	r1, #0
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <MX_I2C1_Init+0x74>)
 800096a:	f001 fd61 	bl	8002430 <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 f970 	bl	8000c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000978:	2100      	movs	r1, #0
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_I2C1_Init+0x74>)
 800097c:	f001 fda3 	bl	80024c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f967 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000088 	.word	0x20000088
 8000994:	40005400 	.word	0x40005400
 8000998:	20404768 	.word	0x20404768

0800099c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b0aa      	sub	sp, #168	; 0xa8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	2284      	movs	r2, #132	; 0x84
 80009ba:	2100      	movs	r1, #0
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 f931 	bl	8005c24 <memset>
  if(i2cHandle->Instance==I2C1)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_I2C_MspInit+0xb4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d13c      	bne.n	8000a46 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 faea 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009e6:	f000 f937 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a0a:	2312      	movs	r3, #18
 8000a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a26:	4619      	mov	r1, r3
 8000a28:	480b      	ldr	r0, [pc, #44]	; (8000a58 <HAL_I2C_MspInit+0xbc>)
 8000a2a:	f000 fe55 	bl	80016d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_I2C_MspInit+0xb8>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a46:	bf00      	nop
 8000a48:	37a8      	adds	r7, #168	; 0xa8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40005400 	.word	0x40005400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400

08000a5c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d140      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x92>
  {
    static unsigned int cnt = 0;
    cnt++;
 8000a6c:	4b23      	ldr	r3, [pc, #140]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a74:	6013      	str	r3, [r2, #0]
    Illuminance_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 8000a76:	4822      	ldr	r0, [pc, #136]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a78:	f7ff fdbe 	bl	80005f8 <BH1750_ReadIlluminance_lux>
 8000a7c:	eef0 7a40 	vmov.f32	s15, s0
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a82:	edc3 7a00 	vstr	s15, [r3]
    Illuminance_lux_Int = Illuminance_lux * 1000.0f;
 8000a86:	4b1f      	ldr	r3, [pc, #124]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a88:	edd3 7a00 	vldr	s15, [r3]
 8000a8c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8000b08 <HAL_TIM_PeriodElapsedCallback+0xac>
 8000a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a98:	ee17 2a90 	vmov	r2, s15
 8000a9c:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a9e:	601a      	str	r2, [r3, #0]

    if(cnt == 5)
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b05      	cmp	r3, #5
 8000aa6:	d122      	bne.n	8000aee <HAL_TIM_PeriodElapsedCallback+0x92>
    {
      uint8_t tx_buffer[32];
      int tx_msg_len = sprintf((char*)tx_buffer, "Illuminance: %5u.%03u\r", Illuminance_lux_Int / 1000, Illuminance_lux_Int % 1000);
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000aae:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab2:	0999      	lsrs	r1, r3, #6
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000aba:	fba3 0302 	umull	r0, r3, r3, r2
 8000abe:	099b      	lsrs	r3, r3, #6
 8000ac0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac4:	fb00 f303 	mul.w	r3, r0, r3
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	f107 000c 	add.w	r0, r7, #12
 8000ace:	460a      	mov	r2, r1
 8000ad0:	4910      	ldr	r1, [pc, #64]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ad2:	f005 f887 	bl	8005be4 <siprintf>
 8000ad6:	62f8      	str	r0, [r7, #44]	; 0x2c
      HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8000ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	f107 010c 	add.w	r1, r7, #12
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	480d      	ldr	r0, [pc, #52]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ae4:	f004 f860 	bl	8004ba8 <HAL_UART_Transmit>
      cnt = 0;
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
    }
  }
}
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000138 	.word	0x20000138
 8000afc:	200000e4 	.word	0x200000e4
 8000b00:	20000000 	.word	0x20000000
 8000b04:	200000dc 	.word	0x200000dc
 8000b08:	447a0000 	.word	0x447a0000
 8000b0c:	200000e0 	.word	0x200000e0
 8000b10:	10624dd3 	.word	0x10624dd3
 8000b14:	08006544 	.word	0x08006544
 8000b18:	200001d0 	.word	0x200001d0

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fbd9 	bl	80012d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f82a 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f7ff fd92 	bl	8000650 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000b2c:	f000 fb12 	bl	8001154 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000b30:	f7ff fef4 	bl	800091c <MX_I2C1_Init>
  MX_TIM9_Init();
 8000b34:	f000 f9fa 	bl	8000f2c <MX_TIM9_Init>
  MX_TIM7_Init();
 8000b38:	f000 f9c0 	bl	8000ebc <MX_TIM7_Init>
  MX_TIM3_Init();
 8000b3c:	f000 f946 	bl	8000dcc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&hbh1750);
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <main+0x50>)
 8000b42:	f7ff fd33 	bl	80005ac <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <main+0x54>)
 8000b48:	f002 fe7c 	bl	8003844 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <main+0x58>)
 8000b50:	f002 ff52 	bl	80039f8 <HAL_TIM_PWM_Start>



  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <main+0x5c>)
 8000b5a:	f000 ff69 	bl	8001a30 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,1000);
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <main+0x58>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
 8000b68:	e7f9      	b.n	8000b5e <main+0x42>
 8000b6a:	bf00      	nop
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	20000138 	.word	0x20000138
 8000b74:	200000ec 	.word	0x200000ec
 8000b78:	40020800 	.word	0x40020800

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	2230      	movs	r2, #48	; 0x30
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f005 f84a 	bl	8005c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ba0:	f001 fcde 	bl	8002560 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba4:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <SystemClock_Config+0xd4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <SystemClock_Config+0xd4>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <SystemClock_Config+0xd4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bbc:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <SystemClock_Config+0xd8>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000be6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000bec:	23d8      	movs	r3, #216	; 0xd8
 8000bee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf8:	f107 0320 	add.w	r3, r7, #32
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f001 fd0f 	bl	8002620 <HAL_RCC_OscConfig>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c08:	f000 f826 	bl	8000c58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c0c:	f001 fcb8 	bl	8002580 <HAL_PWREx_EnableOverDrive>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c16:	f000 f81f 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c1a:	230f      	movs	r3, #15
 8000c1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000c2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c30:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	2107      	movs	r1, #7
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 ff95 	bl	8002b68 <HAL_RCC_ClockConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c44:	f000 f808 	bl	8000c58 <Error_Handler>
  }
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40007000 	.word	0x40007000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a08      	ldr	r2, [pc, #32]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_MspInit+0x44>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <HardFault_Handler+0x4>

08000cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cbc:	e7fe      	b.n	8000cbc <MemManage_Handler+0x4>

08000cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf8:	f000 fb2a 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM3_IRQHandler+0x10>)
 8000d06:	f002 ff71 	bl	8003bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	200000ec 	.word	0x200000ec

08000d14 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <USART3_IRQHandler+0x10>)
 8000d1a:	f003 ffc9 	bl	8004cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001d0 	.word	0x200001d0

08000d28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM7_IRQHandler+0x10>)
 8000d2e:	f002 ff5d 	bl	8003bec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000138 	.word	0x20000138

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f004 ff62 	bl	8005c34 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20050000 	.word	0x20050000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200000e8 	.word	0x200000e8
 8000da4:	200003a8 	.word	0x200003a8

08000da8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_TIM3_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	; 0x38
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dfe:	4b2d      	ldr	r3, [pc, #180]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e00:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <MX_TIM3_Init+0xec>)
 8000e02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e04:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b2a      	ldr	r3, [pc, #168]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e24:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e26:	f002 fcb5 	bl	8003794 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e30:	f7ff ff12 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e42:	f003 f907 	bl	8004054 <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e4c:	f7ff ff04 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e50:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e52:	f002 fd6f 	bl	8003934 <HAL_TIM_PWM_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e5c:	f7ff fefc 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e70:	f003 fda0 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e7a:	f7ff feed 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	; 0x60
 8000e80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	4619      	mov	r1, r3
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000e96:	f002 ffc9 	bl	8003e2c <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000ea0:	f7ff feda 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM3_Init+0xe8>)
 8000ea6:	f000 f8f9 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200000ec 	.word	0x200000ec
 8000eb8:	40000400 	.word	0x40000400

08000ebc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <MX_TIM7_Init+0x6c>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1079;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000ed4:	f240 4237 	movw	r2, #1079	; 0x437
 8000ed8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000ee2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000ee6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000eee:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000ef0:	f002 fc50 	bl	8003794 <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000efa:	f7ff fead 	bl	8000c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_TIM7_Init+0x68>)
 8000f0c:	f003 fd52 	bl	80049b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f16:	f7ff fe9f 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000138 	.word	0x20000138
 8000f28:	40001400 	.word	0x40001400

08000f2c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]
 8000f4e:	615a      	str	r2, [r3, #20]
 8000f50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f54:	4a25      	ldr	r2, [pc, #148]	; (8000fec <MX_TIM9_Init+0xc0>)
 8000f56:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8000f58:	4b23      	ldr	r3, [pc, #140]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f5a:	226b      	movs	r2, #107	; 0x6b
 8000f5c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5e:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8000f64:	4b20      	ldr	r3, [pc, #128]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f6a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000f78:	481b      	ldr	r0, [pc, #108]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f7a:	f002 fc0b 	bl	8003794 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000f84:	f7ff fe68 	bl	8000c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0320 	add.w	r3, r7, #32
 8000f92:	4619      	mov	r1, r3
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000f96:	f003 f85d 	bl	8004054 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000fa0:	f7ff fe5a 	bl	8000c58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000fa4:	4810      	ldr	r0, [pc, #64]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000fa6:	f002 fcc5 	bl	8003934 <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000fb0:	f7ff fe52 	bl	8000c58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fb4:	2360      	movs	r3, #96	; 0x60
 8000fb6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	2204      	movs	r2, #4
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4807      	ldr	r0, [pc, #28]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000fcc:	f002 ff2e 	bl	8003e2c <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8000fd6:	f7ff fe3f 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000fda:	4803      	ldr	r0, [pc, #12]	; (8000fe8 <MX_TIM9_Init+0xbc>)
 8000fdc:	f000 f85e 	bl	800109c <HAL_TIM_MspPostInit>

}
 8000fe0:	bf00      	nop
 8000fe2:	3730      	adds	r7, #48	; 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000184 	.word	0x20000184
 8000fec:	40014000 	.word	0x40014000

08000ff0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a23      	ldr	r2, [pc, #140]	; (800108c <HAL_TIM_Base_MspInit+0x9c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d114      	bne.n	800102c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	201d      	movs	r0, #29
 8001020:	f000 fa91 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001024:	201d      	movs	r0, #29
 8001026:	f000 faaa 	bl	800157e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800102a:	e02a      	b.n	8001082 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM7)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a18      	ldr	r2, [pc, #96]	; (8001094 <HAL_TIM_Base_MspInit+0xa4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d114      	bne.n	8001060 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	4a15      	ldr	r2, [pc, #84]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6413      	str	r3, [r2, #64]	; 0x40
 8001042:	4b13      	ldr	r3, [pc, #76]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2037      	movs	r0, #55	; 0x37
 8001054:	f000 fa77 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001058:	2037      	movs	r0, #55	; 0x37
 800105a:	f000 fa90 	bl	800157e <HAL_NVIC_EnableIRQ>
}
 800105e:	e010      	b.n	8001082 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM9)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <HAL_TIM_Base_MspInit+0xa8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10b      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_TIM_Base_MspInit+0xa0>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40000400 	.word	0x40000400
 8001090:	40023800 	.word	0x40023800
 8001094:	40001400 	.word	0x40001400
 8001098:	40014000 	.word	0x40014000

0800109c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_TIM_MspPostInit+0xa8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d11c      	bne.n	80010f8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b22      	ldr	r3, [pc, #136]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a21      	ldr	r2, [pc, #132]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010d6:	2340      	movs	r3, #64	; 0x40
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010e6:	2302      	movs	r3, #2
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <HAL_TIM_MspPostInit+0xb0>)
 80010f2:	f000 faf1 	bl	80016d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80010f6:	e020      	b.n	800113a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM9)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a14      	ldr	r2, [pc, #80]	; (8001150 <HAL_TIM_MspPostInit+0xb4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d11b      	bne.n	800113a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <HAL_TIM_MspPostInit+0xac>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111a:	2308      	movs	r3, #8
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001122:	2302      	movs	r3, #2
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800112a:	2303      	movs	r3, #3
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <HAL_TIM_MspPostInit+0xb0>)
 8001136:	f000 facf 	bl	80016d8 <HAL_GPIO_Init>
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40000400 	.word	0x40000400
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000
 8001150:	40014000 	.word	0x40014000

08001154 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART3_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800117a:	220c      	movs	r2, #12
 800117c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART3_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART3_UART_Init+0x58>)
 8001198:	f003 fcb8 	bl	8004b0c <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011a2:	f7ff fd59 	bl	8000c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200001d0 	.word	0x200001d0
 80011b0:	40004800 	.word	0x40004800

080011b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0aa      	sub	sp, #168	; 0xa8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2284      	movs	r2, #132	; 0x84
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 fd25 	bl	8005c24 <memset>
  if(uartHandle->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a26      	ldr	r2, [pc, #152]	; (8001278 <HAL_UART_MspInit+0xc4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d144      	bne.n	800126e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011e8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ea:	2300      	movs	r3, #0
 80011ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fede 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011fe:	f7ff fd2b 	bl	8000c58 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001202:	4b1e      	ldr	r3, [pc, #120]	; (800127c <HAL_UART_MspInit+0xc8>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_UART_MspInit+0xc8>)
 8001208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_UART_MspInit+0xc8>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <HAL_UART_MspInit+0xc8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a17      	ldr	r2, [pc, #92]	; (800127c <HAL_UART_MspInit+0xc8>)
 8001220:	f043 0308 	orr.w	r3, r3, #8
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_UART_MspInit+0xc8>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001232:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001240:	2301      	movs	r3, #1
 8001242:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800124c:	2307      	movs	r3, #7
 800124e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001252:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001256:	4619      	mov	r1, r3
 8001258:	4809      	ldr	r0, [pc, #36]	; (8001280 <HAL_UART_MspInit+0xcc>)
 800125a:	f000 fa3d 	bl	80016d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2027      	movs	r0, #39	; 0x27
 8001264:	f000 f96f 	bl	8001546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001268:	2027      	movs	r0, #39	; 0x27
 800126a:	f000 f988 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800126e:	bf00      	nop
 8001270:	37a8      	adds	r7, #168	; 0xa8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40004800 	.word	0x40004800
 800127c:	40023800 	.word	0x40023800
 8001280:	40020c00 	.word	0x40020c00

08001284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001288:	480d      	ldr	r0, [pc, #52]	; (80012c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128a:	490e      	ldr	r1, [pc, #56]	; (80012c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800128c:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001290:	e002      	b.n	8001298 <LoopCopyDataInit>

08001292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001296:	3304      	adds	r3, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800129c:	d3f9      	bcc.n	8001292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129e:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a0:	4c0b      	ldr	r4, [pc, #44]	; (80012d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a4:	e001      	b.n	80012aa <LoopFillZerobss>

080012a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a8:	3204      	adds	r2, #4

080012aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ac:	d3fb      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ae:	f7ff fd7b 	bl	8000da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b2:	f004 fcc5 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012b6:	f7ff fc31 	bl	8000b1c <main>
  bx  lr    
 80012ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012c8:	080065b8 	.word	0x080065b8
  ldr r2, =_sbss
 80012cc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012d0:	200003a4 	.word	0x200003a4

080012d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC_IRQHandler>

080012d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f928 	bl	8001530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f000 f805 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e6:	f7ff fcbd 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f943 	bl	800159a <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 f90b 	bl	8001546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000010 	.word	0x20000010
 8001348:	20000018 	.word	0x20000018
 800134c:	20000014 	.word	0x20000014

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000018 	.word	0x20000018
 8001374:	20000258 	.word	0x20000258

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000258 	.word	0x20000258

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <__NVIC_SetPriorityGrouping+0x40>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00
 80013d4:	05fa0000 	.word	0x05fa0000

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014fc:	d301      	bcc.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e00f      	b.n	8001522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <SysTick_Config+0x40>)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3b01      	subs	r3, #1
 8001508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	210f      	movs	r1, #15
 800150c:	f04f 30ff 	mov.w	r0, #4294967295
 8001510:	f7ff ff8e 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <SysTick_Config+0x40>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151a:	4b04      	ldr	r3, [pc, #16]	; (800152c <SysTick_Config+0x40>)
 800151c:	2207      	movs	r2, #7
 800151e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff ff29 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001546:	b580      	push	{r7, lr}
 8001548:	b086      	sub	sp, #24
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001558:	f7ff ff3e 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 800155c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	68b9      	ldr	r1, [r7, #8]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff ff8e 	bl	8001484 <NVIC_EncodePriority>
 8001568:	4602      	mov	r2, r0
 800156a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156e:	4611      	mov	r1, r2
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff31 	bl	80013f4 <__NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ffa2 	bl	80014ec <SysTick_Config>
 80015a8:	4603      	mov	r3, r0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b084      	sub	sp, #16
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015c0:	f7ff feda 	bl	8001378 <HAL_GetTick>
 80015c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d008      	beq.n	80015e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e052      	b.n	800168a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0216 	bic.w	r2, r2, #22
 80015f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	695a      	ldr	r2, [r3, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	d103      	bne.n	8001614 <HAL_DMA_Abort+0x62>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0208 	bic.w	r2, r2, #8
 8001622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001634:	e013      	b.n	800165e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001636:	f7ff fe9f 	bl	8001378 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b05      	cmp	r3, #5
 8001642:	d90c      	bls.n	800165e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2220      	movs	r2, #32
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2203      	movs	r2, #3
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e015      	b.n	800168a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e4      	bne.n	8001636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	223f      	movs	r2, #63	; 0x3f
 8001672:	409a      	lsls	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d004      	beq.n	80016b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e00c      	b.n	80016ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2205      	movs	r2, #5
 80016b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0201 	bic.w	r2, r2, #1
 80016c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e175      	b.n	80019e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8164 	bne.w	80019de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d005      	beq.n	800172e <HAL_GPIO_Init+0x56>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d130      	bne.n	8001790 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 0201 	and.w	r2, r3, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b03      	cmp	r3, #3
 800179a:	d017      	beq.n	80017cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d123      	bne.n	8001820 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	69b9      	ldr	r1, [r7, #24]
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80be 	beq.w	80019de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b66      	ldr	r3, [pc, #408]	; (80019fc <HAL_GPIO_Init+0x324>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a65      	ldr	r2, [pc, #404]	; (80019fc <HAL_GPIO_Init+0x324>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b63      	ldr	r3, [pc, #396]	; (80019fc <HAL_GPIO_Init+0x324>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800187a:	4a61      	ldr	r2, [pc, #388]	; (8001a00 <HAL_GPIO_Init+0x328>)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <HAL_GPIO_Init+0x32c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d037      	beq.n	8001916 <HAL_GPIO_Init+0x23e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a57      	ldr	r2, [pc, #348]	; (8001a08 <HAL_GPIO_Init+0x330>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d031      	beq.n	8001912 <HAL_GPIO_Init+0x23a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x334>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d02b      	beq.n	800190e <HAL_GPIO_Init+0x236>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a55      	ldr	r2, [pc, #340]	; (8001a10 <HAL_GPIO_Init+0x338>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d025      	beq.n	800190a <HAL_GPIO_Init+0x232>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <HAL_GPIO_Init+0x33c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01f      	beq.n	8001906 <HAL_GPIO_Init+0x22e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a53      	ldr	r2, [pc, #332]	; (8001a18 <HAL_GPIO_Init+0x340>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <HAL_GPIO_Init+0x22a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_GPIO_Init+0x344>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x226>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x348>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x222>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <HAL_GPIO_Init+0x34c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x21e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x350>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x21a>
 80018ee:	2309      	movs	r3, #9
 80018f0:	e012      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018f2:	230a      	movs	r3, #10
 80018f4:	e010      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018f6:	2308      	movs	r3, #8
 80018f8:	e00e      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e00c      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018fe:	2306      	movs	r3, #6
 8001900:	e00a      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001902:	2305      	movs	r3, #5
 8001904:	e008      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001906:	2304      	movs	r3, #4
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x240>
 800190a:	2303      	movs	r3, #3
 800190c:	e004      	b.n	8001918 <HAL_GPIO_Init+0x240>
 800190e:	2302      	movs	r3, #2
 8001910:	e002      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001916:	2300      	movs	r3, #0
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4093      	lsls	r3, r2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001928:	4935      	ldr	r1, [pc, #212]	; (8001a00 <HAL_GPIO_Init+0x328>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_GPIO_Init+0x354>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a34      	ldr	r2, [pc, #208]	; (8001a2c <HAL_GPIO_Init+0x354>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_GPIO_Init+0x354>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a29      	ldr	r2, [pc, #164]	; (8001a2c <HAL_GPIO_Init+0x354>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_GPIO_Init+0x354>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ae:	4a1f      	ldr	r2, [pc, #124]	; (8001a2c <HAL_GPIO_Init+0x354>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_GPIO_Init+0x354>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d8:	4a14      	ldr	r2, [pc, #80]	; (8001a2c <HAL_GPIO_Init+0x354>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	f67f ae86 	bls.w	80016f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019ec:	bf00      	nop
 80019ee:	bf00      	nop
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40021c00 	.word	0x40021c00
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40022400 	.word	0x40022400
 8001a2c:	40013c00 	.word	0x40013c00

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e07f      	b.n	8001b76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe ff86 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2224      	movs	r2, #36	; 0x24
 8001a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0201 	bic.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d107      	bne.n	8001ade <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	e006      	b.n	8001aec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001aea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d104      	bne.n	8001afe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001afc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <HAL_I2C_Init+0x11c>)
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68da      	ldr	r2, [r3, #12]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	69d9      	ldr	r1, [r3, #28]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a1a      	ldr	r2, [r3, #32]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2220      	movs	r2, #32
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	02008000 	.word	0x02008000

08001b84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	460b      	mov	r3, r1
 8001b92:	817b      	strh	r3, [r7, #10]
 8001b94:	4613      	mov	r3, r2
 8001b96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b20      	cmp	r3, #32
 8001ba2:	f040 80da 	bne.w	8001d5a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2C_Master_Transmit+0x30>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e0d3      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x1d8>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001bbc:	f7ff fbdc 	bl	8001378 <HAL_GetTick>
 8001bc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2319      	movs	r3, #25
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 f9e6 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0be      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2221      	movs	r2, #33	; 0x21
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2210      	movs	r2, #16
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	893a      	ldrh	r2, [r7, #8]
 8001bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2bff      	cmp	r3, #255	; 0xff
 8001c0e:	d90e      	bls.n	8001c2e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	22ff      	movs	r2, #255	; 0xff
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	8979      	ldrh	r1, [r7, #10]
 8001c1e:	4b51      	ldr	r3, [pc, #324]	; (8001d64 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f000 fbd0 	bl	80023cc <I2C_TransferConfig>
 8001c2c:	e06c      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	8979      	ldrh	r1, [r7, #10]
 8001c40:	4b48      	ldr	r3, [pc, #288]	; (8001d64 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fbbf 	bl	80023cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001c4e:	e05b      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	6a39      	ldr	r1, [r7, #32]
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f9e3 	bl	8002020 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e07b      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d034      	beq.n	8001d08 <HAL_I2C_Master_Transmit+0x184>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d130      	bne.n	8001d08 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	2200      	movs	r2, #0
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f975 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04d      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d90e      	bls.n	8001ce8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	8979      	ldrh	r1, [r7, #10]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fb73 	bl	80023cc <I2C_TransferConfig>
 8001ce6:	e00f      	b.n	8001d08 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fb62 	bl	80023cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d19e      	bne.n	8001c50 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	6a39      	ldr	r1, [r7, #32]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f9c2 	bl	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e01a      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	80002000 	.word	0x80002000
 8001d68:	fe00e800 	.word	0xfe00e800

08001d6c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af02      	add	r7, sp, #8
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	461a      	mov	r2, r3
 8001d78:	460b      	mov	r3, r1
 8001d7a:	817b      	strh	r3, [r7, #10]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b20      	cmp	r3, #32
 8001d8a:	f040 80db 	bne.w	8001f44 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_Master_Receive+0x30>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0d4      	b.n	8001f46 <HAL_I2C_Master_Receive+0x1da>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001da4:	f7ff fae8 	bl	8001378 <HAL_GetTick>
 8001da8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2319      	movs	r3, #25
 8001db0:	2201      	movs	r2, #1
 8001db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f8f2 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0bf      	b.n	8001f46 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2222      	movs	r2, #34	; 0x22
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	893a      	ldrh	r2, [r7, #8]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	2bff      	cmp	r3, #255	; 0xff
 8001df6:	d90e      	bls.n	8001e16 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	22ff      	movs	r2, #255	; 0xff
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	8979      	ldrh	r1, [r7, #10]
 8001e06:	4b52      	ldr	r3, [pc, #328]	; (8001f50 <HAL_I2C_Master_Receive+0x1e4>)
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fadc 	bl	80023cc <I2C_TransferConfig>
 8001e14:	e06d      	b.n	8001ef2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	8979      	ldrh	r1, [r7, #10]
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_I2C_Master_Receive+0x1e4>)
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 facb 	bl	80023cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001e36:	e05c      	b.n	8001ef2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	6a39      	ldr	r1, [r7, #32]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f96b 	bl	8002118 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e07c      	b.n	8001f46 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d034      	beq.n	8001ef2 <HAL_I2C_Master_Receive+0x186>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d130      	bne.n	8001ef2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2200      	movs	r2, #0
 8001e98:	2180      	movs	r1, #128	; 0x80
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f880 	bl	8001fa0 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e04d      	b.n	8001f46 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	2bff      	cmp	r3, #255	; 0xff
 8001eb2:	d90e      	bls.n	8001ed2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	22ff      	movs	r2, #255	; 0xff
 8001eb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	8979      	ldrh	r1, [r7, #10]
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 fa7e 	bl	80023cc <I2C_TransferConfig>
 8001ed0:	e00f      	b.n	8001ef2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	8979      	ldrh	r1, [r7, #10]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f000 fa6d 	bl	80023cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d19d      	bne.n	8001e38 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	6a39      	ldr	r1, [r7, #32]
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 f8cd 	bl	80020a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e01a      	b.n	8001f46 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2220      	movs	r2, #32
 8001f16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6859      	ldr	r1, [r3, #4]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_I2C_Master_Receive+0x1e8>)
 8001f24:	400b      	ands	r3, r1
 8001f26:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	80002400 	.word	0x80002400
 8001f54:	fe00e800 	.word	0xfe00e800

08001f58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d103      	bne.n	8001f76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	699b      	ldr	r3, [r3, #24]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d007      	beq.n	8001f94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0201 	orr.w	r2, r2, #1
 8001f92:	619a      	str	r2, [r3, #24]
  }
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	4613      	mov	r3, r2
 8001fae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb0:	e022      	b.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d01e      	beq.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fba:	f7ff f9dd 	bl	8001378 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d113      	bne.n	8001ff8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd4:	f043 0220 	orr.w	r2, r3, #32
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e00f      	b.n	8002018 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	4013      	ands	r3, r2
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	bf0c      	ite	eq
 8002008:	2301      	moveq	r3, #1
 800200a:	2300      	movne	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	429a      	cmp	r2, r3
 8002014:	d0cd      	beq.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800202c:	e02c      	b.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f8ea 	bl	800220c <I2C_IsErrorOccurred>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e02a      	b.n	8002098 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d01e      	beq.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	f7ff f995 	bl	8001378 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	429a      	cmp	r2, r3
 8002058:	d302      	bcc.n	8002060 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d113      	bne.n	8002088 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002064:	f043 0220 	orr.w	r2, r3, #32
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e007      	b.n	8002098 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b02      	cmp	r3, #2
 8002094:	d1cb      	bne.n	800202e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020ac:	e028      	b.n	8002100 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68b9      	ldr	r1, [r7, #8]
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8aa 	bl	800220c <I2C_IsErrorOccurred>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e026      	b.n	8002110 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c2:	f7ff f959 	bl	8001378 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d302      	bcc.n	80020d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d113      	bne.n	8002100 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e007      	b.n	8002110 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f003 0320 	and.w	r3, r3, #32
 800210a:	2b20      	cmp	r3, #32
 800210c:	d1cf      	bne.n	80020ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3710      	adds	r7, #16
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002124:	e064      	b.n	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 f86e 	bl	800220c <I2C_IsErrorOccurred>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e062      	b.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d138      	bne.n	80021ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	2b04      	cmp	r3, #4
 8002154:	d105      	bne.n	8002162 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e04e      	b.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b10      	cmp	r3, #16
 800216e:	d107      	bne.n	8002180 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2210      	movs	r2, #16
 8002176:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2204      	movs	r2, #4
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
 800217e:	e002      	b.n	8002186 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2220      	movs	r2, #32
 800218c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6859      	ldr	r1, [r3, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800219a:	400b      	ands	r3, r1
 800219c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e022      	b.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ba:	f7ff f8dd 	bl	8001378 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	68ba      	ldr	r2, [r7, #8]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d302      	bcc.n	80021d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10f      	bne.n	80021f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d4:	f043 0220 	orr.w	r2, r3, #32
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2220      	movs	r2, #32
 80021e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d193      	bne.n	8002126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	fe00e800 	.word	0xfe00e800

0800220c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	; 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f003 0310 	and.w	r3, r3, #16
 8002234:	2b00      	cmp	r3, #0
 8002236:	d068      	beq.n	800230a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002240:	e049      	b.n	80022d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d045      	beq.n	80022d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff f895 	bl	8001378 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_IsErrorOccurred+0x54>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d13a      	bne.n	80022d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002282:	d121      	bne.n	80022c8 <I2C_IsErrorOccurred+0xbc>
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800228a:	d01d      	beq.n	80022c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	2b20      	cmp	r3, #32
 8002290:	d01a      	beq.n	80022c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80022a2:	f7ff f869 	bl	8001378 <HAL_GetTick>
 80022a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a8:	e00e      	b.n	80022c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80022aa:	f7ff f865 	bl	8001378 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b19      	cmp	r3, #25
 80022b6:	d907      	bls.n	80022c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f043 0320 	orr.w	r3, r3, #32
 80022be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80022c6:	e006      	b.n	80022d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	f003 0320 	and.w	r3, r3, #32
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d1e9      	bne.n	80022aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d003      	beq.n	80022ec <I2C_IsErrorOccurred+0xe0>
 80022e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0aa      	beq.n	8002242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80022ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d103      	bne.n	80022fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2220      	movs	r2, #32
 80022fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	f043 0304 	orr.w	r3, r3, #4
 8002302:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00b      	beq.n	8002334 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	f043 0301 	orr.w	r3, r3, #1
 8002322:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800232c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800234e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00b      	beq.n	8002378 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f043 0302 	orr.w	r3, r3, #2
 8002366:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002370:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002378:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01c      	beq.n	80023ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f7ff fde9 	bl	8001f58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <I2C_IsErrorOccurred+0x1bc>)
 8002392:	400b      	ands	r3, r1
 8002394:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80023ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3728      	adds	r7, #40	; 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	fe00e800 	.word	0xfe00e800

080023cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b087      	sub	sp, #28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607b      	str	r3, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	817b      	strh	r3, [r7, #10]
 80023da:	4613      	mov	r3, r2
 80023dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023de:	897b      	ldrh	r3, [r7, #10]
 80023e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023e4:	7a7b      	ldrb	r3, [r7, #9]
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	0d5b      	lsrs	r3, r3, #21
 8002406:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <I2C_TransferConfig+0x60>)
 800240c:	430b      	orrs	r3, r1
 800240e:	43db      	mvns	r3, r3
 8002410:	ea02 0103 	and.w	r1, r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	430a      	orrs	r2, r1
 800241c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	03ff63ff 	.word	0x03ff63ff

08002430 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b20      	cmp	r3, #32
 8002444:	d138      	bne.n	80024b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002450:	2302      	movs	r3, #2
 8002452:	e032      	b.n	80024ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2224      	movs	r2, #36	; 0x24
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002482:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0201 	orr.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d139      	bne.n	8002550 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e033      	b.n	8002552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2224      	movs	r2, #36	; 0x24
 80024f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002518:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	021b      	lsls	r3, r3, #8
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	e000      	b.n	8002552 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002550:	2302      	movs	r3, #2
  }
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a04      	ldr	r2, [pc, #16]	; (800257c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800256a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002586:	2300      	movs	r3, #0
 8002588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_PWREx_EnableOverDrive+0x98>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	4a22      	ldr	r2, [pc, #136]	; (8002618 <HAL_PWREx_EnableOverDrive+0x98>)
 8002590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002594:	6413      	str	r3, [r2, #64]	; 0x40
 8002596:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_PWREx_EnableOverDrive+0x98>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	603b      	str	r3, [r7, #0]
 80025a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80025a2:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a1d      	ldr	r2, [pc, #116]	; (800261c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025ae:	f7fe fee3 	bl	8001378 <HAL_GetTick>
 80025b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025b4:	e009      	b.n	80025ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025b6:	f7fe fedf 	bl	8001378 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025c4:	d901      	bls.n	80025ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e022      	b.n	8002610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d6:	d1ee      	bne.n	80025b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0f      	ldr	r2, [pc, #60]	; (800261c <HAL_PWREx_EnableOverDrive+0x9c>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e4:	f7fe fec8 	bl	8001378 <HAL_GetTick>
 80025e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80025ea:	e009      	b.n	8002600 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80025ec:	f7fe fec4 	bl	8001378 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025fa:	d901      	bls.n	8002600 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e007      	b.n	8002610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002600:	4b06      	ldr	r3, [pc, #24]	; (800261c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800260c:	d1ee      	bne.n	80025ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	40007000 	.word	0x40007000

08002620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002628:	2300      	movs	r3, #0
 800262a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e291      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8087 	beq.w	8002752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002644:	4b96      	ldr	r3, [pc, #600]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	2b04      	cmp	r3, #4
 800264e:	d00c      	beq.n	800266a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002650:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 030c 	and.w	r3, r3, #12
 8002658:	2b08      	cmp	r3, #8
 800265a:	d112      	bne.n	8002682 <HAL_RCC_OscConfig+0x62>
 800265c:	4b90      	ldr	r3, [pc, #576]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002668:	d10b      	bne.n	8002682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266a:	4b8d      	ldr	r3, [pc, #564]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d06c      	beq.n	8002750 <HAL_RCC_OscConfig+0x130>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d168      	bne.n	8002750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e26b      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x7a>
 800268c:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a83      	ldr	r2, [pc, #524]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	e02e      	b.n	80026f8 <HAL_RCC_OscConfig+0xd8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10c      	bne.n	80026bc <HAL_RCC_OscConfig+0x9c>
 80026a2:	4b7f      	ldr	r3, [pc, #508]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a7e      	ldr	r2, [pc, #504]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b7c      	ldr	r3, [pc, #496]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a7b      	ldr	r2, [pc, #492]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e01d      	b.n	80026f8 <HAL_RCC_OscConfig+0xd8>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026c6:	4b76      	ldr	r3, [pc, #472]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a75      	ldr	r2, [pc, #468]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a72      	ldr	r2, [pc, #456]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e00b      	b.n	80026f8 <HAL_RCC_OscConfig+0xd8>
 80026e0:	4b6f      	ldr	r3, [pc, #444]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6e      	ldr	r2, [pc, #440]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b6c      	ldr	r3, [pc, #432]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a6b      	ldr	r2, [pc, #428]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fe3a 	bl	8001378 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7fe fe36 	bl	8001378 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e21f      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7fe fe26 	bl	8001378 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002730:	f7fe fe22 	bl	8001378 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b64      	cmp	r3, #100	; 0x64
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e20b      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002742:	4b57      	ldr	r3, [pc, #348]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x110>
 800274e:	e000      	b.n	8002752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d069      	beq.n	8002832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800275e:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00b      	beq.n	8002782 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b4d      	ldr	r3, [pc, #308]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b08      	cmp	r3, #8
 8002774:	d11c      	bne.n	80027b0 <HAL_RCC_OscConfig+0x190>
 8002776:	4b4a      	ldr	r3, [pc, #296]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d116      	bne.n	80027b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_RCC_OscConfig+0x17a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e1df      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	493d      	ldr	r1, [pc, #244]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ae:	e040      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b8:	4b39      	ldr	r3, [pc, #228]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a38      	ldr	r2, [pc, #224]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fdd8 	bl	8001378 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027cc:	f7fe fdd4 	bl	8001378 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1bd      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027de:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b2d      	ldr	r3, [pc, #180]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4929      	ldr	r1, [pc, #164]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
 80027fe:	e018      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7fe fdb4 	bl	8001378 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002814:	f7fe fdb0 	bl	8001378 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e199      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d038      	beq.n	80028b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d019      	beq.n	800287a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002846:	4b16      	ldr	r3, [pc, #88]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800284a:	4a15      	ldr	r2, [pc, #84]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fd91 	bl	8001378 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe fd8d 	bl	8001378 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e176      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286c:	4b0c      	ldr	r3, [pc, #48]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x23a>
 8002878:	e01a      	b.n	80028b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287e:	4a08      	ldr	r2, [pc, #32]	; (80028a0 <HAL_RCC_OscConfig+0x280>)
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fd77 	bl	8001378 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	e00a      	b.n	80028a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fd73 	bl	8001378 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d903      	bls.n	80028a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e15c      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
 80028a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028a4:	4b91      	ldr	r3, [pc, #580]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80028a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1ee      	bne.n	800288e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80a4 	beq.w	8002a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b8b      	ldr	r3, [pc, #556]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	4a87      	ldr	r2, [pc, #540]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80028d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6413      	str	r3, [r2, #64]	; 0x40
 80028d6:	4b85      	ldr	r3, [pc, #532]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2301      	movs	r3, #1
 80028e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e6:	4b82      	ldr	r3, [pc, #520]	; (8002af0 <HAL_RCC_OscConfig+0x4d0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d118      	bne.n	8002924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028f2:	4b7f      	ldr	r3, [pc, #508]	; (8002af0 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a7e      	ldr	r2, [pc, #504]	; (8002af0 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fe:	f7fe fd3b 	bl	8001378 <HAL_GetTick>
 8002902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe fd37 	bl	8001378 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	; 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e120      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002918:	4b75      	ldr	r3, [pc, #468]	; (8002af0 <HAL_RCC_OscConfig+0x4d0>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0f0      	beq.n	8002906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d106      	bne.n	800293a <HAL_RCC_OscConfig+0x31a>
 800292c:	4b6f      	ldr	r3, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002930:	4a6e      	ldr	r2, [pc, #440]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	; 0x70
 8002938:	e02d      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10c      	bne.n	800295c <HAL_RCC_OscConfig+0x33c>
 8002942:	4b6a      	ldr	r3, [pc, #424]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	4a69      	ldr	r2, [pc, #420]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6713      	str	r3, [r2, #112]	; 0x70
 800294e:	4b67      	ldr	r3, [pc, #412]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002952:	4a66      	ldr	r2, [pc, #408]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002954:	f023 0304 	bic.w	r3, r3, #4
 8002958:	6713      	str	r3, [r2, #112]	; 0x70
 800295a:	e01c      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b05      	cmp	r3, #5
 8002962:	d10c      	bne.n	800297e <HAL_RCC_OscConfig+0x35e>
 8002964:	4b61      	ldr	r3, [pc, #388]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	4a60      	ldr	r2, [pc, #384]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	6713      	str	r3, [r2, #112]	; 0x70
 8002970:	4b5e      	ldr	r3, [pc, #376]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002974:	4a5d      	ldr	r2, [pc, #372]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6713      	str	r3, [r2, #112]	; 0x70
 800297c:	e00b      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
 800297e:	4b5b      	ldr	r3, [pc, #364]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002982:	4a5a      	ldr	r2, [pc, #360]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	6713      	str	r3, [r2, #112]	; 0x70
 800298a:	4b58      	ldr	r3, [pc, #352]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298e:	4a57      	ldr	r2, [pc, #348]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002990:	f023 0304 	bic.w	r3, r3, #4
 8002994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d015      	beq.n	80029ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299e:	f7fe fceb 	bl	8001378 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7fe fce7 	bl	8001378 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e0ce      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4b4b      	ldr	r3, [pc, #300]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80029be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0ee      	beq.n	80029a6 <HAL_RCC_OscConfig+0x386>
 80029c8:	e014      	b.n	80029f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fcd5 	bl	8001378 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fcd1 	bl	8001378 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e0b8      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ee      	bne.n	80029d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029f4:	7dfb      	ldrb	r3, [r7, #23]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d105      	bne.n	8002a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fa:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a3b      	ldr	r2, [pc, #236]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 80a4 	beq.w	8002b58 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 030c 	and.w	r3, r3, #12
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d06b      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d149      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a30      	ldr	r2, [pc, #192]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fca2 	bl	8001378 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fc9e 	bl	8001378 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e087      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	69da      	ldr	r2, [r3, #28]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	019b      	lsls	r3, r3, #6
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a82:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a84:	4b19      	ldr	r3, [pc, #100]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a18      	ldr	r2, [pc, #96]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002a8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fc72 	bl	8001378 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7fe fc6e 	bl	8001378 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e057      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x478>
 8002ab6:	e04f      	b.n	8002b58 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab8:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002abe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ac2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac4:	f7fe fc58 	bl	8001378 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fc54 	bl	8001378 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e03d      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	4b03      	ldr	r3, [pc, #12]	; (8002aec <HAL_RCC_OscConfig+0x4cc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x4ac>
 8002aea:	e035      	b.n	8002b58 <HAL_RCC_OscConfig+0x538>
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002af4:	4b1b      	ldr	r3, [pc, #108]	; (8002b64 <HAL_RCC_OscConfig+0x544>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d028      	beq.n	8002b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d121      	bne.n	8002b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d11a      	bne.n	8002b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b2a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d111      	bne.n	8002b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d107      	bne.n	8002b54 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e0d0      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d910      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f023 020f 	bic.w	r2, r3, #15
 8002b96:	4965      	ldr	r1, [pc, #404]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d040      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d107      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c2a:	4b41      	ldr	r3, [pc, #260]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d109      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e073      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06b      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	4936      	ldr	r1, [pc, #216]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c5c:	f7fe fb8c 	bl	8001378 <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fb88 	bl	8001378 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e053      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7a:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 020c 	and.w	r2, r3, #12
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1eb      	bne.n	8002c64 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8c:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d210      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9a:	4b24      	ldr	r3, [pc, #144]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 020f 	bic.w	r2, r3, #15
 8002ca2:	4922      	ldr	r1, [pc, #136]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	; (8002d2c <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_ClockConfig+0x1c8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	; (8002d34 <HAL_RCC_ClockConfig+0x1cc>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <HAL_RCC_ClockConfig+0x1d0>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_ClockConfig+0x1d4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fae8 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	0800655c 	.word	0x0800655c
 8002d38:	20000010 	.word	0x20000010
 8002d3c:	20000014 	.word	0x20000014

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b094      	sub	sp, #80	; 0x50
 8002d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d50:	2300      	movs	r3, #0
 8002d52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d58:	4b79      	ldr	r3, [pc, #484]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d00d      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x40>
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	f200 80e1 	bhi.w	8002f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d72:	e0db      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b73      	ldr	r3, [pc, #460]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d78:	e0db      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4b73      	ldr	r3, [pc, #460]	; (8002f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d7e:	e0d8      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4b6a      	ldr	r3, [pc, #424]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002da0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	633b      	str	r3, [r7, #48]	; 0x30
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	; 0x34
 8002dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002db2:	4622      	mov	r2, r4
 8002db4:	462b      	mov	r3, r5
 8002db6:	f04f 0000 	mov.w	r0, #0
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	0159      	lsls	r1, r3, #5
 8002dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc4:	0150      	lsls	r0, r2, #5
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4621      	mov	r1, r4
 8002dcc:	1a51      	subs	r1, r2, r1
 8002dce:	6139      	str	r1, [r7, #16]
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de4:	4659      	mov	r1, fp
 8002de6:	018b      	lsls	r3, r1, #6
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dee:	4651      	mov	r1, sl
 8002df0:	018a      	lsls	r2, r1, #6
 8002df2:	4651      	mov	r1, sl
 8002df4:	ebb2 0801 	subs.w	r8, r2, r1
 8002df8:	4659      	mov	r1, fp
 8002dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e12:	4690      	mov	r8, r2
 8002e14:	4699      	mov	r9, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	eb18 0303 	adds.w	r3, r8, r3
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	462b      	mov	r3, r5
 8002e20:	eb49 0303 	adc.w	r3, r9, r3
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e32:	4629      	mov	r1, r5
 8002e34:	024b      	lsls	r3, r1, #9
 8002e36:	4621      	mov	r1, r4
 8002e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	024a      	lsls	r2, r1, #9
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e46:	2200      	movs	r2, #0
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e50:	f7fd fa2e 	bl	80002b0 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e5c:	e058      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b38      	ldr	r3, [pc, #224]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	2200      	movs	r2, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	4611      	mov	r1, r2
 8002e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
 8002e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e78:	4642      	mov	r2, r8
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	0159      	lsls	r1, r3, #5
 8002e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8a:	0150      	lsls	r0, r2, #5
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4641      	mov	r1, r8
 8002e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e96:	4649      	mov	r1, r9
 8002e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	18e3      	adds	r3, r4, r3
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	eb45 0303 	adc.w	r3, r5, r3
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	028b      	lsls	r3, r1, #10
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	028a      	lsls	r2, r1, #10
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efa:	2200      	movs	r2, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	61fa      	str	r2, [r7, #28]
 8002f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f04:	f7fd f9d4 	bl	80002b0 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3750      	adds	r7, #80	; 0x50
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200

08002f4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b03      	ldr	r3, [pc, #12]	; (8002f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000010 	.word	0x20000010

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	; (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	0800656c 	.word	0x0800656c

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff ffdc 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0b5b      	lsrs	r3, r3, #13
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	0800656c 	.word	0x0800656c

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d012      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fdc:	4b69      	ldr	r3, [pc, #420]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	4a68      	ldr	r2, [pc, #416]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fe6:	6093      	str	r3, [r2, #8]
 8002fe8:	4b66      	ldr	r3, [pc, #408]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff0:	4964      	ldr	r1, [pc, #400]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d017      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800300e:	4b5d      	ldr	r3, [pc, #372]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003010:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	4959      	ldr	r1, [pc, #356]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800302c:	d101      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800302e:	2301      	movs	r3, #1
 8003030:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800303a:	2301      	movs	r3, #1
 800303c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d017      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800304a:	4b4e      	ldr	r3, [pc, #312]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800304c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003050:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	494a      	ldr	r1, [pc, #296]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003068:	d101      	bne.n	800306e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003076:	2301      	movs	r3, #1
 8003078:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003086:	2301      	movs	r3, #1
 8003088:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 808b 	beq.w	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003098:	4b3a      	ldr	r3, [pc, #232]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a39      	ldr	r2, [pc, #228]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
 80030a4:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80030b0:	4b35      	ldr	r3, [pc, #212]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a34      	ldr	r2, [pc, #208]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030bc:	f7fe f95c 	bl	8001378 <HAL_GetTick>
 80030c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c4:	f7fe f958 	bl	8001378 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b64      	cmp	r3, #100	; 0x64
 80030d0:	d901      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e357      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80030d6:	4b2c      	ldr	r3, [pc, #176]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030e2:	4b28      	ldr	r3, [pc, #160]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d035      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d02e      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003100:	4b20      	ldr	r3, [pc, #128]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003108:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003116:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a1a      	ldr	r2, [pc, #104]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800311c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003120:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003122:	4a18      	ldr	r2, [pc, #96]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003128:	4b16      	ldr	r3, [pc, #88]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d114      	bne.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003134:	f7fe f920 	bl	8001378 <HAL_GetTick>
 8003138:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313a:	e00a      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fe f91c 	bl	8001378 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e319      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d0ee      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800316a:	d111      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003178:	4b04      	ldr	r3, [pc, #16]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800317a:	400b      	ands	r3, r1
 800317c:	4901      	ldr	r1, [pc, #4]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
 8003182:	e00b      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000
 800318c:	0ffffcff 	.word	0x0ffffcff
 8003190:	4baa      	ldr	r3, [pc, #680]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4aa9      	ldr	r2, [pc, #676]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003196:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800319a:	6093      	str	r3, [r2, #8]
 800319c:	4ba7      	ldr	r3, [pc, #668]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a8:	49a4      	ldr	r1, [pc, #656]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0310 	and.w	r3, r3, #16
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d010      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031ba:	4ba0      	ldr	r3, [pc, #640]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031c0:	4a9e      	ldr	r2, [pc, #632]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80031ca:	4b9c      	ldr	r3, [pc, #624]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	4999      	ldr	r1, [pc, #612]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031e8:	4b94      	ldr	r3, [pc, #592]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f6:	4991      	ldr	r1, [pc, #580]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800320a:	4b8c      	ldr	r3, [pc, #560]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003218:	4988      	ldr	r1, [pc, #544]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800322c:	4b83      	ldr	r3, [pc, #524]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800323a:	4980      	ldr	r1, [pc, #512]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800324e:	4b7b      	ldr	r3, [pc, #492]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325c:	4977      	ldr	r1, [pc, #476]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325e:	4313      	orrs	r3, r2
 8003260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003270:	4b72      	ldr	r3, [pc, #456]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	496f      	ldr	r1, [pc, #444]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003292:	4b6a      	ldr	r3, [pc, #424]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003298:	f023 020c 	bic.w	r2, r3, #12
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	4966      	ldr	r1, [pc, #408]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032b4:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c2:	495e      	ldr	r1, [pc, #376]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032d6:	4b59      	ldr	r3, [pc, #356]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e4:	4955      	ldr	r1, [pc, #340]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032f8:	4b50      	ldr	r3, [pc, #320]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	494d      	ldr	r1, [pc, #308]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800331a:	4b48      	ldr	r3, [pc, #288]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800331c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003320:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003328:	4944      	ldr	r1, [pc, #272]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800332a:	4313      	orrs	r3, r2
 800332c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800333c:	4b3f      	ldr	r3, [pc, #252]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800333e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003342:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334a:	493c      	ldr	r1, [pc, #240]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800335e:	4b37      	ldr	r3, [pc, #220]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336c:	4933      	ldr	r1, [pc, #204]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003380:	4b2e      	ldr	r3, [pc, #184]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800338e:	492b      	ldr	r1, [pc, #172]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003390:	4313      	orrs	r3, r2
 8003392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033a2:	4b26      	ldr	r3, [pc, #152]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033b0:	4922      	ldr	r1, [pc, #136]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f0:	4912      	ldr	r1, [pc, #72]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d00b      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003404:	4b0d      	ldr	r3, [pc, #52]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003414:	4909      	ldr	r1, [pc, #36]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d006      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 80d9 	beq.w	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003430:	4b02      	ldr	r3, [pc, #8]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a01      	ldr	r2, [pc, #4]	; (800343c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003436:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800343a:	e001      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800343c:	40023800 	.word	0x40023800
 8003440:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003442:	f7fd ff99 	bl	8001378 <HAL_GetTick>
 8003446:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003448:	e008      	b.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800344a:	f7fd ff95 	bl	8001378 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d901      	bls.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e194      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800345c:	4b6c      	ldr	r3, [pc, #432]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	2b00      	cmp	r3, #0
 8003472:	d021      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	d11d      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800347c:	4b64      	ldr	r3, [pc, #400]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003482:	0c1b      	lsrs	r3, r3, #16
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800348a:	4b61      	ldr	r3, [pc, #388]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800348c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003490:	0e1b      	lsrs	r3, r3, #24
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	019a      	lsls	r2, r3, #6
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	041b      	lsls	r3, r3, #16
 80034a2:	431a      	orrs	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	061b      	lsls	r3, r3, #24
 80034a8:	431a      	orrs	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	071b      	lsls	r3, r3, #28
 80034b0:	4957      	ldr	r1, [pc, #348]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d02e      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034e2:	d129      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034e4:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034ea:	0c1b      	lsrs	r3, r3, #16
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f8:	0f1b      	lsrs	r3, r3, #28
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	019a      	lsls	r2, r3, #6
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	041b      	lsls	r3, r3, #16
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	061b      	lsls	r3, r3, #24
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	071b      	lsls	r3, r3, #28
 8003518:	493d      	ldr	r1, [pc, #244]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003520:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003526:	f023 021f 	bic.w	r2, r3, #31
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	3b01      	subs	r3, #1
 8003530:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01d      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003544:	4b32      	ldr	r3, [pc, #200]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354a:	0e1b      	lsrs	r3, r3, #24
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003552:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003558:	0f1b      	lsrs	r3, r3, #28
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	019a      	lsls	r2, r3, #6
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	041b      	lsls	r3, r3, #16
 800356c:	431a      	orrs	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	431a      	orrs	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	071b      	lsls	r3, r3, #28
 8003578:	4925      	ldr	r1, [pc, #148]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800357a:	4313      	orrs	r3, r2
 800357c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d011      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	019a      	lsls	r2, r3, #6
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	061b      	lsls	r3, r3, #24
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	071b      	lsls	r3, r3, #28
 80035a8:	4919      	ldr	r1, [pc, #100]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80035b0:	4b17      	ldr	r3, [pc, #92]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fd fedc 	bl	8001378 <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035c4:	f7fd fed8 	bl	8001378 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0d7      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80035d6:	4b0e      	ldr	r3, [pc, #56]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	f040 80cd 	bne.w	8003784 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a08      	ldr	r2, [pc, #32]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f6:	f7fd febf 	bl	8001378 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035fc:	e00a      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035fe:	f7fd febb 	bl	8001378 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b64      	cmp	r3, #100	; 0x64
 800360a:	d903      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0ba      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003610:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003614:	4b5e      	ldr	r3, [pc, #376]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003620:	d0ed      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800363e:	2b00      	cmp	r3, #0
 8003640:	d02e      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d12a      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800364a:	4b51      	ldr	r3, [pc, #324]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003650:	0c1b      	lsrs	r3, r3, #16
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003658:	4b4d      	ldr	r3, [pc, #308]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	0f1b      	lsrs	r3, r3, #28
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	019a      	lsls	r2, r3, #6
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	061b      	lsls	r3, r3, #24
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	071b      	lsls	r3, r3, #28
 800367e:	4944      	ldr	r1, [pc, #272]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003686:	4b42      	ldr	r3, [pc, #264]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800368c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	3b01      	subs	r3, #1
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	493d      	ldr	r1, [pc, #244]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d022      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036b4:	d11d      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036b6:	4b36      	ldr	r3, [pc, #216]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	0e1b      	lsrs	r3, r3, #24
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ca:	0f1b      	lsrs	r3, r3, #28
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	019a      	lsls	r2, r3, #6
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	041b      	lsls	r3, r3, #16
 80036de:	431a      	orrs	r2, r3
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	431a      	orrs	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	071b      	lsls	r3, r3, #28
 80036ea:	4929      	ldr	r1, [pc, #164]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d028      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036fe:	4b24      	ldr	r3, [pc, #144]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003704:	0e1b      	lsrs	r3, r3, #24
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	0c1b      	lsrs	r3, r3, #16
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	019a      	lsls	r2, r3, #6
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	041b      	lsls	r3, r3, #16
 8003724:	431a      	orrs	r2, r3
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	071b      	lsls	r3, r3, #28
 8003732:	4917      	ldr	r1, [pc, #92]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003740:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	4911      	ldr	r1, [pc, #68]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800375c:	f7fd fe0c 	bl	8001378 <HAL_GetTick>
 8003760:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003764:	f7fd fe08 	bl	8001378 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	; 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e007      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800377e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003782:	d1ef      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800

08003794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e049      	b.n	800383a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fd fc18 	bl	8000ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3304      	adds	r3, #4
 80037d0:	4619      	mov	r1, r3
 80037d2:	4610      	mov	r0, r2
 80037d4:	f000 fd30 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e054      	b.n	8003906 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a26      	ldr	r2, [pc, #152]	; (8003914 <HAL_TIM_Base_Start_IT+0xd0>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d022      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003886:	d01d      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a22      	ldr	r2, [pc, #136]	; (8003918 <HAL_TIM_Base_Start_IT+0xd4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d018      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a21      	ldr	r2, [pc, #132]	; (800391c <HAL_TIM_Base_Start_IT+0xd8>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a1f      	ldr	r2, [pc, #124]	; (8003920 <HAL_TIM_Base_Start_IT+0xdc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00e      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a1e      	ldr	r2, [pc, #120]	; (8003924 <HAL_TIM_Base_Start_IT+0xe0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <HAL_TIM_Base_Start_IT+0xe4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d004      	beq.n	80038c4 <HAL_TIM_Base_Start_IT+0x80>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1b      	ldr	r2, [pc, #108]	; (800392c <HAL_TIM_Base_Start_IT+0xe8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d115      	bne.n	80038f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <HAL_TIM_Base_Start_IT+0xec>)
 80038cc:	4013      	ands	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2b06      	cmp	r3, #6
 80038d4:	d015      	beq.n	8003902 <HAL_TIM_Base_Start_IT+0xbe>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038dc:	d011      	beq.n	8003902 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	e008      	b.n	8003902 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e000      	b.n	8003904 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40000400 	.word	0x40000400
 800391c:	40000800 	.word	0x40000800
 8003920:	40000c00 	.word	0x40000c00
 8003924:	40010400 	.word	0x40010400
 8003928:	40014000 	.word	0x40014000
 800392c:	40001800 	.word	0x40001800
 8003930:	00010007 	.word	0x00010007

08003934 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e049      	b.n	80039da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f841 	bl	80039e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f000 fc60 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d109      	bne.n	8003a1c <HAL_TIM_PWM_Start+0x24>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	bf14      	ite	ne
 8003a14:	2301      	movne	r3, #1
 8003a16:	2300      	moveq	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e03c      	b.n	8003a96 <HAL_TIM_PWM_Start+0x9e>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d109      	bne.n	8003a36 <HAL_TIM_PWM_Start+0x3e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e02f      	b.n	8003a96 <HAL_TIM_PWM_Start+0x9e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d109      	bne.n	8003a50 <HAL_TIM_PWM_Start+0x58>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e022      	b.n	8003a96 <HAL_TIM_PWM_Start+0x9e>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b0c      	cmp	r3, #12
 8003a54:	d109      	bne.n	8003a6a <HAL_TIM_PWM_Start+0x72>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	bf14      	ite	ne
 8003a62:	2301      	movne	r3, #1
 8003a64:	2300      	moveq	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e015      	b.n	8003a96 <HAL_TIM_PWM_Start+0x9e>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d109      	bne.n	8003a84 <HAL_TIM_PWM_Start+0x8c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	bf14      	ite	ne
 8003a7c:	2301      	movne	r3, #1
 8003a7e:	2300      	moveq	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	e008      	b.n	8003a96 <HAL_TIM_PWM_Start+0x9e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	bf14      	ite	ne
 8003a90:	2301      	movne	r3, #1
 8003a92:	2300      	moveq	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d001      	beq.n	8003a9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e092      	b.n	8003bc4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d104      	bne.n	8003aae <HAL_TIM_PWM_Start+0xb6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aac:	e023      	b.n	8003af6 <HAL_TIM_PWM_Start+0xfe>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d104      	bne.n	8003abe <HAL_TIM_PWM_Start+0xc6>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003abc:	e01b      	b.n	8003af6 <HAL_TIM_PWM_Start+0xfe>
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b08      	cmp	r3, #8
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start+0xd6>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003acc:	e013      	b.n	8003af6 <HAL_TIM_PWM_Start+0xfe>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b0c      	cmp	r3, #12
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Start+0xe6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003adc:	e00b      	b.n	8003af6 <HAL_TIM_PWM_Start+0xfe>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Start+0xf6>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	e003      	b.n	8003af6 <HAL_TIM_PWM_Start+0xfe>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 ff32 	bl	8004968 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_TIM_PWM_Start+0x1d4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_TIM_PWM_Start+0x120>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <HAL_TIM_PWM_Start+0x1d8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_TIM_PWM_Start+0x124>
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e000      	b.n	8003b1e <HAL_TIM_PWM_Start+0x126>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d007      	beq.n	8003b32 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a25      	ldr	r2, [pc, #148]	; (8003bcc <HAL_TIM_PWM_Start+0x1d4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b44:	d01d      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a22      	ldr	r2, [pc, #136]	; (8003bd4 <HAL_TIM_PWM_Start+0x1dc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d018      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a20      	ldr	r2, [pc, #128]	; (8003bd8 <HAL_TIM_PWM_Start+0x1e0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d013      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1f      	ldr	r2, [pc, #124]	; (8003bdc <HAL_TIM_PWM_Start+0x1e4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d00e      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_TIM_PWM_Start+0x1d8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d009      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_TIM_PWM_Start+0x1e8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d004      	beq.n	8003b82 <HAL_TIM_PWM_Start+0x18a>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a19      	ldr	r2, [pc, #100]	; (8003be4 <HAL_TIM_PWM_Start+0x1ec>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d115      	bne.n	8003bae <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	4b17      	ldr	r3, [pc, #92]	; (8003be8 <HAL_TIM_PWM_Start+0x1f0>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b06      	cmp	r3, #6
 8003b92:	d015      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x1c8>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9a:	d011      	beq.n	8003bc0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	e008      	b.n	8003bc0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	e000      	b.n	8003bc2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40010000 	.word	0x40010000
 8003bd0:	40010400 	.word	0x40010400
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40000c00 	.word	0x40000c00
 8003be0:	40014000 	.word	0x40014000
 8003be4:	40001800 	.word	0x40001800
 8003be8:	00010007 	.word	0x00010007

08003bec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d122      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d11b      	bne.n	8003c48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0202 	mvn.w	r2, #2
 8003c18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fae4 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003c34:	e005      	b.n	8003c42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 fad6 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 fae7 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d122      	bne.n	8003c9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d11b      	bne.n	8003c9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0204 	mvn.w	r2, #4
 8003c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 faba 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 faac 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fabd 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	f003 0308 	and.w	r3, r3, #8
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d122      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d11b      	bne.n	8003cf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f06f 0208 	mvn.w	r2, #8
 8003cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	f003 0303 	and.w	r3, r3, #3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fa90 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003cdc:	e005      	b.n	8003cea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fa82 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa93 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d122      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d11b      	bne.n	8003d44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f06f 0210 	mvn.w	r2, #16
 8003d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa66 	bl	80041fc <HAL_TIM_IC_CaptureCallback>
 8003d30:	e005      	b.n	8003d3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 fa58 	bl	80041e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 fa69 	bl	8004210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d10e      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d107      	bne.n	8003d70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f06f 0201 	mvn.w	r2, #1
 8003d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fc fe76 	bl	8000a5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d10e      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d107      	bne.n	8003d9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fea4 	bl	8004ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003daa:	d10e      	bne.n	8003dca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b80      	cmp	r3, #128	; 0x80
 8003db8:	d107      	bne.n	8003dca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 fe97 	bl	8004af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d10e      	bne.n	8003df6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d107      	bne.n	8003df6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fa17 	bl	8004224 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d10e      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d107      	bne.n	8003e22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f06f 0220 	mvn.w	r2, #32
 8003e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fe57 	bl	8004ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0ff      	b.n	800404a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b14      	cmp	r3, #20
 8003e56:	f200 80f0 	bhi.w	800403a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e5a:	a201      	add	r2, pc, #4	; (adr r2, 8003e60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	0800403b 	.word	0x0800403b
 8003e68:	0800403b 	.word	0x0800403b
 8003e6c:	0800403b 	.word	0x0800403b
 8003e70:	08003ef5 	.word	0x08003ef5
 8003e74:	0800403b 	.word	0x0800403b
 8003e78:	0800403b 	.word	0x0800403b
 8003e7c:	0800403b 	.word	0x0800403b
 8003e80:	08003f37 	.word	0x08003f37
 8003e84:	0800403b 	.word	0x0800403b
 8003e88:	0800403b 	.word	0x0800403b
 8003e8c:	0800403b 	.word	0x0800403b
 8003e90:	08003f77 	.word	0x08003f77
 8003e94:	0800403b 	.word	0x0800403b
 8003e98:	0800403b 	.word	0x0800403b
 8003e9c:	0800403b 	.word	0x0800403b
 8003ea0:	08003fb9 	.word	0x08003fb9
 8003ea4:	0800403b 	.word	0x0800403b
 8003ea8:	0800403b 	.word	0x0800403b
 8003eac:	0800403b 	.word	0x0800403b
 8003eb0:	08003ff9 	.word	0x08003ff9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa5c 	bl	8004378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f042 0208 	orr.w	r2, r2, #8
 8003ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0204 	bic.w	r2, r2, #4
 8003ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6999      	ldr	r1, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	619a      	str	r2, [r3, #24]
      break;
 8003ef2:	e0a5      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 faae 	bl	800445c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6999      	ldr	r1, [r3, #24]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	021a      	lsls	r2, r3, #8
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	619a      	str	r2, [r3, #24]
      break;
 8003f34:	e084      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fb05 	bl	800454c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0208 	orr.w	r2, r2, #8
 8003f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0204 	bic.w	r2, r2, #4
 8003f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69d9      	ldr	r1, [r3, #28]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	691a      	ldr	r2, [r3, #16]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	61da      	str	r2, [r3, #28]
      break;
 8003f74:	e064      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fb5b 	bl	8004638 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69d9      	ldr	r1, [r3, #28]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	61da      	str	r2, [r3, #28]
      break;
 8003fb6:	e043      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fb92 	bl	80046e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0208 	orr.w	r2, r2, #8
 8003fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0204 	bic.w	r2, r2, #4
 8003fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ff6:	e023      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68b9      	ldr	r1, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fbc4 	bl	800478c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004012:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	021a      	lsls	r2, r3, #8
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004038:	e002      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	75fb      	strb	r3, [r7, #23]
      break;
 800403e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004048:	7dfb      	ldrb	r3, [r7, #23]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_TIM_ConfigClockSource+0x1c>
 800406c:	2302      	movs	r3, #2
 800406e:	e0b4      	b.n	80041da <HAL_TIM_ConfigClockSource+0x186>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	4b56      	ldr	r3, [pc, #344]	; (80041e4 <HAL_TIM_ConfigClockSource+0x190>)
 800408c:	4013      	ands	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004096:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a8:	d03e      	beq.n	8004128 <HAL_TIM_ConfigClockSource+0xd4>
 80040aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ae:	f200 8087 	bhi.w	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b6:	f000 8086 	beq.w	80041c6 <HAL_TIM_ConfigClockSource+0x172>
 80040ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040be:	d87f      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c0:	2b70      	cmp	r3, #112	; 0x70
 80040c2:	d01a      	beq.n	80040fa <HAL_TIM_ConfigClockSource+0xa6>
 80040c4:	2b70      	cmp	r3, #112	; 0x70
 80040c6:	d87b      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040c8:	2b60      	cmp	r3, #96	; 0x60
 80040ca:	d050      	beq.n	800416e <HAL_TIM_ConfigClockSource+0x11a>
 80040cc:	2b60      	cmp	r3, #96	; 0x60
 80040ce:	d877      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d0:	2b50      	cmp	r3, #80	; 0x50
 80040d2:	d03c      	beq.n	800414e <HAL_TIM_ConfigClockSource+0xfa>
 80040d4:	2b50      	cmp	r3, #80	; 0x50
 80040d6:	d873      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d058      	beq.n	800418e <HAL_TIM_ConfigClockSource+0x13a>
 80040dc:	2b40      	cmp	r3, #64	; 0x40
 80040de:	d86f      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b30      	cmp	r3, #48	; 0x30
 80040e2:	d064      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x15a>
 80040e4:	2b30      	cmp	r3, #48	; 0x30
 80040e6:	d86b      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d060      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x15a>
 80040ec:	2b20      	cmp	r3, #32
 80040ee:	d867      	bhi.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05c      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x15a>
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d05a      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x15a>
 80040f8:	e062      	b.n	80041c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800410a:	f000 fc0d 	bl	8004928 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800411c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	609a      	str	r2, [r3, #8]
      break;
 8004126:	e04f      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004138:	f000 fbf6 	bl	8004928 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800414a:	609a      	str	r2, [r3, #8]
      break;
 800414c:	e03c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800415a:	461a      	mov	r2, r3
 800415c:	f000 fb6a 	bl	8004834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2150      	movs	r1, #80	; 0x50
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fbc3 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 800416c:	e02c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800417a:	461a      	mov	r2, r3
 800417c:	f000 fb89 	bl	8004892 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2160      	movs	r1, #96	; 0x60
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fbb3 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 800418c:	e01c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800419a:	461a      	mov	r2, r3
 800419c:	f000 fb4a 	bl	8004834 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2140      	movs	r1, #64	; 0x40
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fba3 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 80041ac:	e00c      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4619      	mov	r1, r3
 80041b8:	4610      	mov	r0, r2
 80041ba:	f000 fb9a 	bl	80048f2 <TIM_ITRx_SetConfig>
      break;
 80041be:	e003      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	73fb      	strb	r3, [r7, #15]
      break;
 80041c4:	e000      	b.n	80041c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	fffeff88 	.word	0xfffeff88

080041e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a40      	ldr	r2, [pc, #256]	; (800434c <TIM_Base_SetConfig+0x114>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d013      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d00f      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a3d      	ldr	r2, [pc, #244]	; (8004350 <TIM_Base_SetConfig+0x118>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d00b      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a3c      	ldr	r2, [pc, #240]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d007      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <TIM_Base_SetConfig+0x120>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d003      	beq.n	8004278 <TIM_Base_SetConfig+0x40>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a3a      	ldr	r2, [pc, #232]	; (800435c <TIM_Base_SetConfig+0x124>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d108      	bne.n	800428a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a2f      	ldr	r2, [pc, #188]	; (800434c <TIM_Base_SetConfig+0x114>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d02b      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d027      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a2c      	ldr	r2, [pc, #176]	; (8004350 <TIM_Base_SetConfig+0x118>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d023      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a2b      	ldr	r2, [pc, #172]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d01f      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a2a      	ldr	r2, [pc, #168]	; (8004358 <TIM_Base_SetConfig+0x120>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01b      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a29      	ldr	r2, [pc, #164]	; (800435c <TIM_Base_SetConfig+0x124>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d017      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a28      	ldr	r2, [pc, #160]	; (8004360 <TIM_Base_SetConfig+0x128>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d013      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a27      	ldr	r2, [pc, #156]	; (8004364 <TIM_Base_SetConfig+0x12c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00f      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a26      	ldr	r2, [pc, #152]	; (8004368 <TIM_Base_SetConfig+0x130>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00b      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a25      	ldr	r2, [pc, #148]	; (800436c <TIM_Base_SetConfig+0x134>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d007      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a24      	ldr	r2, [pc, #144]	; (8004370 <TIM_Base_SetConfig+0x138>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d003      	beq.n	80042ea <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a23      	ldr	r2, [pc, #140]	; (8004374 <TIM_Base_SetConfig+0x13c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	689a      	ldr	r2, [r3, #8]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0a      	ldr	r2, [pc, #40]	; (800434c <TIM_Base_SetConfig+0x114>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0xf8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a0c      	ldr	r2, [pc, #48]	; (800435c <TIM_Base_SetConfig+0x124>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d103      	bne.n	8004338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	691a      	ldr	r2, [r3, #16]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	615a      	str	r2, [r3, #20]
}
 800433e:	bf00      	nop
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40010000 	.word	0x40010000
 8004350:	40000400 	.word	0x40000400
 8004354:	40000800 	.word	0x40000800
 8004358:	40000c00 	.word	0x40000c00
 800435c:	40010400 	.word	0x40010400
 8004360:	40014000 	.word	0x40014000
 8004364:	40014400 	.word	0x40014400
 8004368:	40014800 	.word	0x40014800
 800436c:	40001800 	.word	0x40001800
 8004370:	40001c00 	.word	0x40001c00
 8004374:	40002000 	.word	0x40002000

08004378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f023 0201 	bic.w	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	4b2b      	ldr	r3, [pc, #172]	; (8004450 <TIM_OC1_SetConfig+0xd8>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0303 	bic.w	r3, r3, #3
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f023 0302 	bic.w	r3, r3, #2
 80043c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a21      	ldr	r2, [pc, #132]	; (8004454 <TIM_OC1_SetConfig+0xdc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_OC1_SetConfig+0x64>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a20      	ldr	r2, [pc, #128]	; (8004458 <TIM_OC1_SetConfig+0xe0>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d10c      	bne.n	80043f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0308 	bic.w	r3, r3, #8
 80043e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a16      	ldr	r2, [pc, #88]	; (8004454 <TIM_OC1_SetConfig+0xdc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d003      	beq.n	8004406 <TIM_OC1_SetConfig+0x8e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a15      	ldr	r2, [pc, #84]	; (8004458 <TIM_OC1_SetConfig+0xe0>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d111      	bne.n	800442a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800440c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	fffeff8f 	.word	0xfffeff8f
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400

0800445c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0210 	bic.w	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <TIM_OC2_SetConfig+0xe4>)
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0320 	bic.w	r3, r3, #32
 80044a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a23      	ldr	r2, [pc, #140]	; (8004544 <TIM_OC2_SetConfig+0xe8>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC2_SetConfig+0x68>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a22      	ldr	r2, [pc, #136]	; (8004548 <TIM_OC2_SetConfig+0xec>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a18      	ldr	r2, [pc, #96]	; (8004544 <TIM_OC2_SetConfig+0xe8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC2_SetConfig+0x94>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <TIM_OC2_SetConfig+0xec>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d113      	bne.n	8004518 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	feff8fff 	.word	0xfeff8fff
 8004544:	40010000 	.word	0x40010000
 8004548:	40010400 	.word	0x40010400

0800454c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4b2d      	ldr	r3, [pc, #180]	; (800462c <TIM_OC3_SetConfig+0xe0>)
 8004578:	4013      	ands	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	021b      	lsls	r3, r3, #8
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a22      	ldr	r2, [pc, #136]	; (8004630 <TIM_OC3_SetConfig+0xe4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d003      	beq.n	80045b2 <TIM_OC3_SetConfig+0x66>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a21      	ldr	r2, [pc, #132]	; (8004634 <TIM_OC3_SetConfig+0xe8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d10d      	bne.n	80045ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	021b      	lsls	r3, r3, #8
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a17      	ldr	r2, [pc, #92]	; (8004630 <TIM_OC3_SetConfig+0xe4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d003      	beq.n	80045de <TIM_OC3_SetConfig+0x92>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a16      	ldr	r2, [pc, #88]	; (8004634 <TIM_OC3_SetConfig+0xe8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d113      	bne.n	8004606 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	693a      	ldr	r2, [r7, #16]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	621a      	str	r2, [r3, #32]
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	fffeff8f 	.word	0xfffeff8f
 8004630:	40010000 	.word	0x40010000
 8004634:	40010400 	.word	0x40010400

08004638 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <TIM_OC4_SetConfig+0xa4>)
 8004664:	4013      	ands	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	031b      	lsls	r3, r3, #12
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <TIM_OC4_SetConfig+0xa8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d003      	beq.n	80046a0 <TIM_OC4_SetConfig+0x68>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <TIM_OC4_SetConfig+0xac>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d109      	bne.n	80046b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	019b      	lsls	r3, r3, #6
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	621a      	str	r2, [r3, #32]
}
 80046ce:	bf00      	nop
 80046d0:	371c      	adds	r7, #28
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	feff8fff 	.word	0xfeff8fff
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40010400 	.word	0x40010400

080046e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <TIM_OC5_SetConfig+0x98>)
 8004714:	4013      	ands	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004728:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	041b      	lsls	r3, r3, #16
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4313      	orrs	r3, r2
 8004734:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <TIM_OC5_SetConfig+0x9c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d003      	beq.n	8004746 <TIM_OC5_SetConfig+0x5e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a11      	ldr	r2, [pc, #68]	; (8004788 <TIM_OC5_SetConfig+0xa0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d109      	bne.n	800475a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	4313      	orrs	r3, r2
 8004758:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	621a      	str	r2, [r3, #32]
}
 8004774:	bf00      	nop
 8004776:	371c      	adds	r7, #28
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	fffeff8f 	.word	0xfffeff8f
 8004784:	40010000 	.word	0x40010000
 8004788:	40010400 	.word	0x40010400

0800478c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	4b1c      	ldr	r3, [pc, #112]	; (8004828 <TIM_OC6_SetConfig+0x9c>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	051b      	lsls	r3, r3, #20
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a13      	ldr	r2, [pc, #76]	; (800482c <TIM_OC6_SetConfig+0xa0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC6_SetConfig+0x60>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a12      	ldr	r2, [pc, #72]	; (8004830 <TIM_OC6_SetConfig+0xa4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d109      	bne.n	8004800 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	029b      	lsls	r3, r3, #10
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	feff8fff 	.word	0xfeff8fff
 800482c:	40010000 	.word	0x40010000
 8004830:	40010400 	.word	0x40010400

08004834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a1b      	ldr	r3, [r3, #32]
 8004844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	f023 0201 	bic.w	r2, r3, #1
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800485e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 030a 	bic.w	r3, r3, #10
 8004870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	f023 0210 	bic.w	r2, r3, #16
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	031b      	lsls	r3, r3, #12
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	621a      	str	r2, [r3, #32]
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	f043 0307 	orr.w	r3, r3, #7
 8004914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	609a      	str	r2, [r3, #8]
}
 800491c:	bf00      	nop
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004928:	b480      	push	{r7}
 800492a:	b087      	sub	sp, #28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	021a      	lsls	r2, r3, #8
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	431a      	orrs	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	609a      	str	r2, [r3, #8]
}
 800495c:	bf00      	nop
 800495e:	371c      	adds	r7, #28
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	2201      	movs	r2, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a1a      	ldr	r2, [r3, #32]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a1a      	ldr	r2, [r3, #32]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 031f 	and.w	r3, r3, #31
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	fa01 f303 	lsl.w	r3, r1, r3
 80049a0:	431a      	orrs	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	621a      	str	r2, [r3, #32]
}
 80049a6:	bf00      	nop
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
	...

080049b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d101      	bne.n	80049cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049c8:	2302      	movs	r3, #2
 80049ca:	e06d      	b.n	8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a30      	ldr	r2, [pc, #192]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d004      	beq.n	8004a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a2f      	ldr	r2, [pc, #188]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d108      	bne.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a20      	ldr	r2, [pc, #128]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d022      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d01d      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1d      	ldr	r2, [pc, #116]	; (8004abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d013      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a16      	ldr	r2, [pc, #88]	; (8004ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a15      	ldr	r2, [pc, #84]	; (8004acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10c      	bne.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40010000 	.word	0x40010000
 8004ab8:	40010400 	.word	0x40010400
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40000800 	.word	0x40000800
 8004ac4:	40000c00 	.word	0x40000c00
 8004ac8:	40014000 	.word	0x40014000
 8004acc:	40001800 	.word	0x40001800

08004ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b00:	bf00      	nop
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e040      	b.n	8004ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fb40 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2224      	movs	r2, #36	; 0x24
 8004b38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fba2 	bl	8005294 <UART_SetConfig>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e022      	b.n	8004ba0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fdfa 	bl	800575c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 fe81 	bl	80058a0 <UART_CheckIdleState>
 8004b9e:	4603      	mov	r3, r0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08a      	sub	sp, #40	; 0x28
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d171      	bne.n	8004ca4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Transmit+0x24>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e06a      	b.n	8004ca6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2221      	movs	r2, #33	; 0x21
 8004bdc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bde:	f7fc fbcb 	bl	8001378 <HAL_GetTick>
 8004be2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	88fa      	ldrh	r2, [r7, #6]
 8004be8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	d108      	bne.n	8004c10 <HAL_UART_Transmit+0x68>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e003      	b.n	8004c18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c18:	e02c      	b.n	8004c74 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2180      	movs	r1, #128	; 0x80
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 fe72 	bl	800590e <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e038      	b.n	8004ca6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	3302      	adds	r3, #2
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	e007      	b.n	8004c62 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	781a      	ldrb	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c68:	b29b      	uxth	r3, r3
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1cc      	bne.n	8004c1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2140      	movs	r1, #64	; 0x40
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fe3f 	bl	800590e <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e005      	b.n	8004ca6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b0ba      	sub	sp, #232	; 0xe8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004cda:	f640 030f 	movw	r3, #2063	; 0x80f
 8004cde:	4013      	ands	r3, r2
 8004ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d115      	bne.n	8004d18 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d00f      	beq.n	8004d18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cfc:	f003 0320 	and.w	r3, r3, #32
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d009      	beq.n	8004d18 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 8297 	beq.w	800523c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	4798      	blx	r3
      }
      return;
 8004d16:	e291      	b.n	800523c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 8117 	beq.w	8004f50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d106      	bne.n	8004d3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d32:	4b85      	ldr	r3, [pc, #532]	; (8004f48 <HAL_UART_IRQHandler+0x298>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 810a 	beq.w	8004f50 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d011      	beq.n	8004d6c <HAL_UART_IRQHandler+0xbc>
 8004d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00b      	beq.n	8004d6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d62:	f043 0201 	orr.w	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d011      	beq.n	8004d9c <HAL_UART_IRQHandler+0xec>
 8004d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da0:	f003 0304 	and.w	r3, r3, #4
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d011      	beq.n	8004dcc <HAL_UART_IRQHandler+0x11c>
 8004da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2204      	movs	r2, #4
 8004dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dc2:	f043 0202 	orr.w	r2, r3, #2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	f003 0308 	and.w	r3, r3, #8
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d017      	beq.n	8004e08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d105      	bne.n	8004df0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2208      	movs	r2, #8
 8004df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dfe:	f043 0208 	orr.w	r2, r3, #8
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d012      	beq.n	8004e3a <HAL_UART_IRQHandler+0x18a>
 8004e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00c      	beq.n	8004e3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f000 81fd 	beq.w	8005240 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d007      	beq.n	8004e6e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d005      	beq.n	8004e92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d04f      	beq.n	8004f32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fe01 	bl	8005a9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea2:	2b40      	cmp	r3, #64	; 0x40
 8004ea4:	d141      	bne.n	8004f2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	3308      	adds	r3, #8
 8004ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ee2:	e841 2300 	strex	r3, r2, [r1]
 8004ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1d9      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d013      	beq.n	8004f22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <HAL_UART_IRQHandler+0x29c>)
 8004f00:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fc fbc3 	bl	8001692 <HAL_DMA_Abort_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d017      	beq.n	8004f42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f20:	e00f      	b.n	8004f42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 f9a0 	bl	8005268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	e00b      	b.n	8004f42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f99c 	bl	8005268 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	e007      	b.n	8004f42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f998 	bl	8005268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004f40:	e17e      	b.n	8005240 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f42:	bf00      	nop
    return;
 8004f44:	e17c      	b.n	8005240 <HAL_UART_IRQHandler+0x590>
 8004f46:	bf00      	nop
 8004f48:	04000120 	.word	0x04000120
 8004f4c:	08005b63 	.word	0x08005b63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	f040 814c 	bne.w	80051f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 8145 	beq.w	80051f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 813e 	beq.w	80051f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2210      	movs	r2, #16
 8004f7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f88:	2b40      	cmp	r3, #64	; 0x40
 8004f8a:	f040 80b6 	bne.w	80050fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 8150 	beq.w	8005244 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f080 8148 	bcs.w	8005244 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc8:	f000 8086 	beq.w	80050d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004ff6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ffa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005006:	e841 2300 	strex	r3, r2, [r1]
 800500a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800500e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1da      	bne.n	8004fcc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3308      	adds	r3, #8
 800501c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005020:	e853 3f00 	ldrex	r3, [r3]
 8005024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	3308      	adds	r3, #8
 8005036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800503a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800503e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800504c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e1      	bne.n	8005016 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3308      	adds	r3, #8
 8005072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800507c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e3      	bne.n	8005052 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a0:	e853 3f00 	ldrex	r3, [r3]
 80050a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	f023 0310 	bic.w	r3, r3, #16
 80050ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	461a      	mov	r2, r3
 80050b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80050ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80050bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e4      	bne.n	8005098 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fc fa6d 	bl	80015b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8c2 	bl	800527c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80050f8:	e0a4      	b.n	8005244 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005106:	b29b      	uxth	r3, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 8096 	beq.w	8005248 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800511c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8091 	beq.w	8005248 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005136:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800513a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005148:	647b      	str	r3, [r7, #68]	; 0x44
 800514a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800514e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e4      	bne.n	8005126 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	623b      	str	r3, [r7, #32]
   return(result);
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	f023 0301 	bic.w	r3, r3, #1
 8005172:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005180:	633a      	str	r2, [r7, #48]	; 0x30
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e3      	bne.n	800515c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f023 0310 	bic.w	r3, r3, #16
 80051bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051ca:	61fb      	str	r3, [r7, #28]
 80051cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	69b9      	ldr	r1, [r7, #24]
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	617b      	str	r3, [r7, #20]
   return(result);
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e4      	bne.n	80051a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2202      	movs	r2, #2
 80051e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f846 	bl	800527c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051f0:	e02a      	b.n	8005248 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80051f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00e      	beq.n	800521c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80051fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005206:	2b00      	cmp	r3, #0
 8005208:	d008      	beq.n	800521c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01c      	beq.n	800524c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	4798      	blx	r3
    }
    return;
 800521a:	e017      	b.n	800524c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800521c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005224:	2b00      	cmp	r3, #0
 8005226:	d012      	beq.n	800524e <HAL_UART_IRQHandler+0x59e>
 8005228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800522c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00c      	beq.n	800524e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 fcaa 	bl	8005b8e <UART_EndTransmit_IT>
    return;
 800523a:	e008      	b.n	800524e <HAL_UART_IRQHandler+0x59e>
      return;
 800523c:	bf00      	nop
 800523e:	e006      	b.n	800524e <HAL_UART_IRQHandler+0x59e>
    return;
 8005240:	bf00      	nop
 8005242:	e004      	b.n	800524e <HAL_UART_IRQHandler+0x59e>
      return;
 8005244:	bf00      	nop
 8005246:	e002      	b.n	800524e <HAL_UART_IRQHandler+0x59e>
      return;
 8005248:	bf00      	nop
 800524a:	e000      	b.n	800524e <HAL_UART_IRQHandler+0x59e>
    return;
 800524c:	bf00      	nop
  }

}
 800524e:	37e8      	adds	r7, #232	; 0xe8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	460b      	mov	r3, r1
 8005286:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800529c:	2300      	movs	r3, #0
 800529e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689a      	ldr	r2, [r3, #8]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4ba6      	ldr	r3, [pc, #664]	; (8005558 <UART_SetConfig+0x2c4>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	6979      	ldr	r1, [r7, #20]
 80052c8:	430b      	orrs	r3, r1
 80052ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a1b      	ldr	r3, [r3, #32]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a94      	ldr	r2, [pc, #592]	; (800555c <UART_SetConfig+0x2c8>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d120      	bne.n	8005352 <UART_SetConfig+0xbe>
 8005310:	4b93      	ldr	r3, [pc, #588]	; (8005560 <UART_SetConfig+0x2cc>)
 8005312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b03      	cmp	r3, #3
 800531c:	d816      	bhi.n	800534c <UART_SetConfig+0xb8>
 800531e:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x90>)
 8005320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005324:	08005335 	.word	0x08005335
 8005328:	08005341 	.word	0x08005341
 800532c:	0800533b 	.word	0x0800533b
 8005330:	08005347 	.word	0x08005347
 8005334:	2301      	movs	r3, #1
 8005336:	77fb      	strb	r3, [r7, #31]
 8005338:	e150      	b.n	80055dc <UART_SetConfig+0x348>
 800533a:	2302      	movs	r3, #2
 800533c:	77fb      	strb	r3, [r7, #31]
 800533e:	e14d      	b.n	80055dc <UART_SetConfig+0x348>
 8005340:	2304      	movs	r3, #4
 8005342:	77fb      	strb	r3, [r7, #31]
 8005344:	e14a      	b.n	80055dc <UART_SetConfig+0x348>
 8005346:	2308      	movs	r3, #8
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e147      	b.n	80055dc <UART_SetConfig+0x348>
 800534c:	2310      	movs	r3, #16
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e144      	b.n	80055dc <UART_SetConfig+0x348>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a83      	ldr	r2, [pc, #524]	; (8005564 <UART_SetConfig+0x2d0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d132      	bne.n	80053c2 <UART_SetConfig+0x12e>
 800535c:	4b80      	ldr	r3, [pc, #512]	; (8005560 <UART_SetConfig+0x2cc>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f003 030c 	and.w	r3, r3, #12
 8005366:	2b0c      	cmp	r3, #12
 8005368:	d828      	bhi.n	80053bc <UART_SetConfig+0x128>
 800536a:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <UART_SetConfig+0xdc>)
 800536c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005370:	080053a5 	.word	0x080053a5
 8005374:	080053bd 	.word	0x080053bd
 8005378:	080053bd 	.word	0x080053bd
 800537c:	080053bd 	.word	0x080053bd
 8005380:	080053b1 	.word	0x080053b1
 8005384:	080053bd 	.word	0x080053bd
 8005388:	080053bd 	.word	0x080053bd
 800538c:	080053bd 	.word	0x080053bd
 8005390:	080053ab 	.word	0x080053ab
 8005394:	080053bd 	.word	0x080053bd
 8005398:	080053bd 	.word	0x080053bd
 800539c:	080053bd 	.word	0x080053bd
 80053a0:	080053b7 	.word	0x080053b7
 80053a4:	2300      	movs	r3, #0
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e118      	b.n	80055dc <UART_SetConfig+0x348>
 80053aa:	2302      	movs	r3, #2
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e115      	b.n	80055dc <UART_SetConfig+0x348>
 80053b0:	2304      	movs	r3, #4
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e112      	b.n	80055dc <UART_SetConfig+0x348>
 80053b6:	2308      	movs	r3, #8
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e10f      	b.n	80055dc <UART_SetConfig+0x348>
 80053bc:	2310      	movs	r3, #16
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	e10c      	b.n	80055dc <UART_SetConfig+0x348>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a68      	ldr	r2, [pc, #416]	; (8005568 <UART_SetConfig+0x2d4>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d120      	bne.n	800540e <UART_SetConfig+0x17a>
 80053cc:	4b64      	ldr	r3, [pc, #400]	; (8005560 <UART_SetConfig+0x2cc>)
 80053ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053d6:	2b30      	cmp	r3, #48	; 0x30
 80053d8:	d013      	beq.n	8005402 <UART_SetConfig+0x16e>
 80053da:	2b30      	cmp	r3, #48	; 0x30
 80053dc:	d814      	bhi.n	8005408 <UART_SetConfig+0x174>
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d009      	beq.n	80053f6 <UART_SetConfig+0x162>
 80053e2:	2b20      	cmp	r3, #32
 80053e4:	d810      	bhi.n	8005408 <UART_SetConfig+0x174>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <UART_SetConfig+0x15c>
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d006      	beq.n	80053fc <UART_SetConfig+0x168>
 80053ee:	e00b      	b.n	8005408 <UART_SetConfig+0x174>
 80053f0:	2300      	movs	r3, #0
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e0f2      	b.n	80055dc <UART_SetConfig+0x348>
 80053f6:	2302      	movs	r3, #2
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e0ef      	b.n	80055dc <UART_SetConfig+0x348>
 80053fc:	2304      	movs	r3, #4
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e0ec      	b.n	80055dc <UART_SetConfig+0x348>
 8005402:	2308      	movs	r3, #8
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e0e9      	b.n	80055dc <UART_SetConfig+0x348>
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e0e6      	b.n	80055dc <UART_SetConfig+0x348>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a56      	ldr	r2, [pc, #344]	; (800556c <UART_SetConfig+0x2d8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d120      	bne.n	800545a <UART_SetConfig+0x1c6>
 8005418:	4b51      	ldr	r3, [pc, #324]	; (8005560 <UART_SetConfig+0x2cc>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005422:	2bc0      	cmp	r3, #192	; 0xc0
 8005424:	d013      	beq.n	800544e <UART_SetConfig+0x1ba>
 8005426:	2bc0      	cmp	r3, #192	; 0xc0
 8005428:	d814      	bhi.n	8005454 <UART_SetConfig+0x1c0>
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d009      	beq.n	8005442 <UART_SetConfig+0x1ae>
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d810      	bhi.n	8005454 <UART_SetConfig+0x1c0>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <UART_SetConfig+0x1a8>
 8005436:	2b40      	cmp	r3, #64	; 0x40
 8005438:	d006      	beq.n	8005448 <UART_SetConfig+0x1b4>
 800543a:	e00b      	b.n	8005454 <UART_SetConfig+0x1c0>
 800543c:	2300      	movs	r3, #0
 800543e:	77fb      	strb	r3, [r7, #31]
 8005440:	e0cc      	b.n	80055dc <UART_SetConfig+0x348>
 8005442:	2302      	movs	r3, #2
 8005444:	77fb      	strb	r3, [r7, #31]
 8005446:	e0c9      	b.n	80055dc <UART_SetConfig+0x348>
 8005448:	2304      	movs	r3, #4
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e0c6      	b.n	80055dc <UART_SetConfig+0x348>
 800544e:	2308      	movs	r3, #8
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e0c3      	b.n	80055dc <UART_SetConfig+0x348>
 8005454:	2310      	movs	r3, #16
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e0c0      	b.n	80055dc <UART_SetConfig+0x348>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a44      	ldr	r2, [pc, #272]	; (8005570 <UART_SetConfig+0x2dc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d125      	bne.n	80054b0 <UART_SetConfig+0x21c>
 8005464:	4b3e      	ldr	r3, [pc, #248]	; (8005560 <UART_SetConfig+0x2cc>)
 8005466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005472:	d017      	beq.n	80054a4 <UART_SetConfig+0x210>
 8005474:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005478:	d817      	bhi.n	80054aa <UART_SetConfig+0x216>
 800547a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800547e:	d00b      	beq.n	8005498 <UART_SetConfig+0x204>
 8005480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005484:	d811      	bhi.n	80054aa <UART_SetConfig+0x216>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <UART_SetConfig+0x1fe>
 800548a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548e:	d006      	beq.n	800549e <UART_SetConfig+0x20a>
 8005490:	e00b      	b.n	80054aa <UART_SetConfig+0x216>
 8005492:	2300      	movs	r3, #0
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e0a1      	b.n	80055dc <UART_SetConfig+0x348>
 8005498:	2302      	movs	r3, #2
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e09e      	b.n	80055dc <UART_SetConfig+0x348>
 800549e:	2304      	movs	r3, #4
 80054a0:	77fb      	strb	r3, [r7, #31]
 80054a2:	e09b      	b.n	80055dc <UART_SetConfig+0x348>
 80054a4:	2308      	movs	r3, #8
 80054a6:	77fb      	strb	r3, [r7, #31]
 80054a8:	e098      	b.n	80055dc <UART_SetConfig+0x348>
 80054aa:	2310      	movs	r3, #16
 80054ac:	77fb      	strb	r3, [r7, #31]
 80054ae:	e095      	b.n	80055dc <UART_SetConfig+0x348>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2f      	ldr	r2, [pc, #188]	; (8005574 <UART_SetConfig+0x2e0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d125      	bne.n	8005506 <UART_SetConfig+0x272>
 80054ba:	4b29      	ldr	r3, [pc, #164]	; (8005560 <UART_SetConfig+0x2cc>)
 80054bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80054c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054c8:	d017      	beq.n	80054fa <UART_SetConfig+0x266>
 80054ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80054ce:	d817      	bhi.n	8005500 <UART_SetConfig+0x26c>
 80054d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d4:	d00b      	beq.n	80054ee <UART_SetConfig+0x25a>
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d811      	bhi.n	8005500 <UART_SetConfig+0x26c>
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <UART_SetConfig+0x254>
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	d006      	beq.n	80054f4 <UART_SetConfig+0x260>
 80054e6:	e00b      	b.n	8005500 <UART_SetConfig+0x26c>
 80054e8:	2301      	movs	r3, #1
 80054ea:	77fb      	strb	r3, [r7, #31]
 80054ec:	e076      	b.n	80055dc <UART_SetConfig+0x348>
 80054ee:	2302      	movs	r3, #2
 80054f0:	77fb      	strb	r3, [r7, #31]
 80054f2:	e073      	b.n	80055dc <UART_SetConfig+0x348>
 80054f4:	2304      	movs	r3, #4
 80054f6:	77fb      	strb	r3, [r7, #31]
 80054f8:	e070      	b.n	80055dc <UART_SetConfig+0x348>
 80054fa:	2308      	movs	r3, #8
 80054fc:	77fb      	strb	r3, [r7, #31]
 80054fe:	e06d      	b.n	80055dc <UART_SetConfig+0x348>
 8005500:	2310      	movs	r3, #16
 8005502:	77fb      	strb	r3, [r7, #31]
 8005504:	e06a      	b.n	80055dc <UART_SetConfig+0x348>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1b      	ldr	r2, [pc, #108]	; (8005578 <UART_SetConfig+0x2e4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d138      	bne.n	8005582 <UART_SetConfig+0x2ee>
 8005510:	4b13      	ldr	r3, [pc, #76]	; (8005560 <UART_SetConfig+0x2cc>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800551a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800551e:	d017      	beq.n	8005550 <UART_SetConfig+0x2bc>
 8005520:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005524:	d82a      	bhi.n	800557c <UART_SetConfig+0x2e8>
 8005526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552a:	d00b      	beq.n	8005544 <UART_SetConfig+0x2b0>
 800552c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005530:	d824      	bhi.n	800557c <UART_SetConfig+0x2e8>
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <UART_SetConfig+0x2aa>
 8005536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800553a:	d006      	beq.n	800554a <UART_SetConfig+0x2b6>
 800553c:	e01e      	b.n	800557c <UART_SetConfig+0x2e8>
 800553e:	2300      	movs	r3, #0
 8005540:	77fb      	strb	r3, [r7, #31]
 8005542:	e04b      	b.n	80055dc <UART_SetConfig+0x348>
 8005544:	2302      	movs	r3, #2
 8005546:	77fb      	strb	r3, [r7, #31]
 8005548:	e048      	b.n	80055dc <UART_SetConfig+0x348>
 800554a:	2304      	movs	r3, #4
 800554c:	77fb      	strb	r3, [r7, #31]
 800554e:	e045      	b.n	80055dc <UART_SetConfig+0x348>
 8005550:	2308      	movs	r3, #8
 8005552:	77fb      	strb	r3, [r7, #31]
 8005554:	e042      	b.n	80055dc <UART_SetConfig+0x348>
 8005556:	bf00      	nop
 8005558:	efff69f3 	.word	0xefff69f3
 800555c:	40011000 	.word	0x40011000
 8005560:	40023800 	.word	0x40023800
 8005564:	40004400 	.word	0x40004400
 8005568:	40004800 	.word	0x40004800
 800556c:	40004c00 	.word	0x40004c00
 8005570:	40005000 	.word	0x40005000
 8005574:	40011400 	.word	0x40011400
 8005578:	40007800 	.word	0x40007800
 800557c:	2310      	movs	r3, #16
 800557e:	77fb      	strb	r3, [r7, #31]
 8005580:	e02c      	b.n	80055dc <UART_SetConfig+0x348>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a72      	ldr	r2, [pc, #456]	; (8005750 <UART_SetConfig+0x4bc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d125      	bne.n	80055d8 <UART_SetConfig+0x344>
 800558c:	4b71      	ldr	r3, [pc, #452]	; (8005754 <UART_SetConfig+0x4c0>)
 800558e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005592:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005596:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800559a:	d017      	beq.n	80055cc <UART_SetConfig+0x338>
 800559c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055a0:	d817      	bhi.n	80055d2 <UART_SetConfig+0x33e>
 80055a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a6:	d00b      	beq.n	80055c0 <UART_SetConfig+0x32c>
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055ac:	d811      	bhi.n	80055d2 <UART_SetConfig+0x33e>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <UART_SetConfig+0x326>
 80055b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055b6:	d006      	beq.n	80055c6 <UART_SetConfig+0x332>
 80055b8:	e00b      	b.n	80055d2 <UART_SetConfig+0x33e>
 80055ba:	2300      	movs	r3, #0
 80055bc:	77fb      	strb	r3, [r7, #31]
 80055be:	e00d      	b.n	80055dc <UART_SetConfig+0x348>
 80055c0:	2302      	movs	r3, #2
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e00a      	b.n	80055dc <UART_SetConfig+0x348>
 80055c6:	2304      	movs	r3, #4
 80055c8:	77fb      	strb	r3, [r7, #31]
 80055ca:	e007      	b.n	80055dc <UART_SetConfig+0x348>
 80055cc:	2308      	movs	r3, #8
 80055ce:	77fb      	strb	r3, [r7, #31]
 80055d0:	e004      	b.n	80055dc <UART_SetConfig+0x348>
 80055d2:	2310      	movs	r3, #16
 80055d4:	77fb      	strb	r3, [r7, #31]
 80055d6:	e001      	b.n	80055dc <UART_SetConfig+0x348>
 80055d8:	2310      	movs	r3, #16
 80055da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e4:	d15b      	bne.n	800569e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80055e6:	7ffb      	ldrb	r3, [r7, #31]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d828      	bhi.n	800563e <UART_SetConfig+0x3aa>
 80055ec:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x360>)
 80055ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f2:	bf00      	nop
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005629 	.word	0x08005629
 8005600:	0800563f 	.word	0x0800563f
 8005604:	0800562f 	.word	0x0800562f
 8005608:	0800563f 	.word	0x0800563f
 800560c:	0800563f 	.word	0x0800563f
 8005610:	0800563f 	.word	0x0800563f
 8005614:	08005637 	.word	0x08005637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005618:	f7fd fca4 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 800561c:	61b8      	str	r0, [r7, #24]
        break;
 800561e:	e013      	b.n	8005648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005620:	f7fd fcb4 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 8005624:	61b8      	str	r0, [r7, #24]
        break;
 8005626:	e00f      	b.n	8005648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005628:	4b4b      	ldr	r3, [pc, #300]	; (8005758 <UART_SetConfig+0x4c4>)
 800562a:	61bb      	str	r3, [r7, #24]
        break;
 800562c:	e00c      	b.n	8005648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7fd fb87 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8005632:	61b8      	str	r0, [r7, #24]
        break;
 8005634:	e008      	b.n	8005648 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563a:	61bb      	str	r3, [r7, #24]
        break;
 800563c:	e004      	b.n	8005648 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	77bb      	strb	r3, [r7, #30]
        break;
 8005646:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d074      	beq.n	8005738 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	005a      	lsls	r2, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	085b      	lsrs	r3, r3, #1
 8005658:	441a      	add	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005662:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	2b0f      	cmp	r3, #15
 8005668:	d916      	bls.n	8005698 <UART_SetConfig+0x404>
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005670:	d212      	bcs.n	8005698 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	b29b      	uxth	r3, r3
 8005676:	f023 030f 	bic.w	r3, r3, #15
 800567a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	085b      	lsrs	r3, r3, #1
 8005680:	b29b      	uxth	r3, r3
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	b29a      	uxth	r2, r3
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	4313      	orrs	r3, r2
 800568c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	89fa      	ldrh	r2, [r7, #14]
 8005694:	60da      	str	r2, [r3, #12]
 8005696:	e04f      	b.n	8005738 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	77bb      	strb	r3, [r7, #30]
 800569c:	e04c      	b.n	8005738 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d828      	bhi.n	80056f6 <UART_SetConfig+0x462>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x418>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056d9 	.word	0x080056d9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056f7 	.word	0x080056f7
 80056bc:	080056e7 	.word	0x080056e7
 80056c0:	080056f7 	.word	0x080056f7
 80056c4:	080056f7 	.word	0x080056f7
 80056c8:	080056f7 	.word	0x080056f7
 80056cc:	080056ef 	.word	0x080056ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fd fc48 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 80056d4:	61b8      	str	r0, [r7, #24]
        break;
 80056d6:	e013      	b.n	8005700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7fd fc58 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 80056dc:	61b8      	str	r0, [r7, #24]
        break;
 80056de:	e00f      	b.n	8005700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056e0:	4b1d      	ldr	r3, [pc, #116]	; (8005758 <UART_SetConfig+0x4c4>)
 80056e2:	61bb      	str	r3, [r7, #24]
        break;
 80056e4:	e00c      	b.n	8005700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056e6:	f7fd fb2b 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 80056ea:	61b8      	str	r0, [r7, #24]
        break;
 80056ec:	e008      	b.n	8005700 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056f2:	61bb      	str	r3, [r7, #24]
        break;
 80056f4:	e004      	b.n	8005700 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	77bb      	strb	r3, [r7, #30]
        break;
 80056fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d018      	beq.n	8005738 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	085a      	lsrs	r2, r3, #1
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	441a      	add	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	fbb2 f3f3 	udiv	r3, r2, r3
 8005718:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	2b0f      	cmp	r3, #15
 800571e:	d909      	bls.n	8005734 <UART_SetConfig+0x4a0>
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005726:	d205      	bcs.n	8005734 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	b29a      	uxth	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	60da      	str	r2, [r3, #12]
 8005732:	e001      	b.n	8005738 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005744:	7fbb      	ldrb	r3, [r7, #30]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3720      	adds	r7, #32
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	40007c00 	.word	0x40007c00
 8005754:	40023800 	.word	0x40023800
 8005758:	00f42400 	.word	0x00f42400

0800575c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00a      	beq.n	8005786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d00a      	beq.n	800580e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d01a      	beq.n	8005872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800585a:	d10a      	bne.n	8005872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	430a      	orrs	r2, r1
 8005892:	605a      	str	r2, [r3, #4]
  }
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058b0:	f7fb fd62 	bl	8001378 <HAL_GetTick>
 80058b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0308 	and.w	r3, r3, #8
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d10e      	bne.n	80058e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f81b 	bl	800590e <UART_WaitOnFlagUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e011      	b.n	8005906 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b09c      	sub	sp, #112	; 0x70
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	4613      	mov	r3, r2
 800591c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591e:	e0a7      	b.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	f000 80a3 	beq.w	8005a70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fb fd25 	bl	8001378 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005936:	429a      	cmp	r2, r3
 8005938:	d302      	bcc.n	8005940 <UART_WaitOnFlagUntilTimeout+0x32>
 800593a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800593c:	2b00      	cmp	r3, #0
 800593e:	d13f      	bne.n	80059c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005948:	e853 3f00 	ldrex	r3, [r3]
 800594c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800594e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005950:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005954:	667b      	str	r3, [r7, #100]	; 0x64
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800595e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005960:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005966:	e841 2300 	strex	r3, r2, [r1]
 800596a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800596c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1e6      	bne.n	8005940 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3308      	adds	r3, #8
 8005978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597c:	e853 3f00 	ldrex	r3, [r3]
 8005980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	663b      	str	r3, [r7, #96]	; 0x60
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3308      	adds	r3, #8
 8005990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005992:	64ba      	str	r2, [r7, #72]	; 0x48
 8005994:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e5      	bne.n	8005972 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2220      	movs	r2, #32
 80059aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e068      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d050      	beq.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059dc:	d148      	bne.n	8005a70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	637b      	str	r3, [r7, #52]	; 0x34
 8005a08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e6      	bne.n	80059e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	613b      	str	r3, [r7, #16]
   return(result);
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a3a:	623a      	str	r2, [r7, #32]
 8005a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	69f9      	ldr	r1, [r7, #28]
 8005a40:	6a3a      	ldr	r2, [r7, #32]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2220      	movs	r2, #32
 8005a52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e010      	b.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	4013      	ands	r3, r2
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	bf0c      	ite	eq
 8005a80:	2301      	moveq	r3, #1
 8005a82:	2300      	movne	r3, #0
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	461a      	mov	r2, r3
 8005a88:	79fb      	ldrb	r3, [r7, #7]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f43f af48 	beq.w	8005920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3770      	adds	r7, #112	; 0x70
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b095      	sub	sp, #84	; 0x54
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aaa:	e853 3f00 	ldrex	r3, [r3]
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	461a      	mov	r2, r3
 8005abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ac8:	e841 2300 	strex	r3, r2, [r1]
 8005acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1e6      	bne.n	8005aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	e853 3f00 	ldrex	r3, [r3]
 8005ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3308      	adds	r3, #8
 8005af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005afc:	e841 2300 	strex	r3, r2, [r1]
 8005b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1e5      	bne.n	8005ad4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d118      	bne.n	8005b42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	e853 3f00 	ldrex	r3, [r3]
 8005b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f023 0310 	bic.w	r3, r3, #16
 8005b24:	647b      	str	r3, [r7, #68]	; 0x44
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2e:	61bb      	str	r3, [r7, #24]
 8005b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6979      	ldr	r1, [r7, #20]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e6      	bne.n	8005b10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005b56:	bf00      	nop
 8005b58:	3754      	adds	r7, #84	; 0x54
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff fb71 	bl	8005268 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b088      	sub	sp, #32
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	e853 3f00 	ldrex	r3, [r3]
 8005ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	61bb      	str	r3, [r7, #24]
 8005bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb8:	6979      	ldr	r1, [r7, #20]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	e841 2300 	strex	r3, r2, [r1]
 8005bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1e6      	bne.n	8005b96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fb3d 	bl	8005254 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bda:	bf00      	nop
 8005bdc:	3720      	adds	r7, #32
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <siprintf>:
 8005be4:	b40e      	push	{r1, r2, r3}
 8005be6:	b500      	push	{lr}
 8005be8:	b09c      	sub	sp, #112	; 0x70
 8005bea:	ab1d      	add	r3, sp, #116	; 0x74
 8005bec:	9002      	str	r0, [sp, #8]
 8005bee:	9006      	str	r0, [sp, #24]
 8005bf0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bf4:	4809      	ldr	r0, [pc, #36]	; (8005c1c <siprintf+0x38>)
 8005bf6:	9107      	str	r1, [sp, #28]
 8005bf8:	9104      	str	r1, [sp, #16]
 8005bfa:	4909      	ldr	r1, [pc, #36]	; (8005c20 <siprintf+0x3c>)
 8005bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c00:	9105      	str	r1, [sp, #20]
 8005c02:	6800      	ldr	r0, [r0, #0]
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	a902      	add	r1, sp, #8
 8005c08:	f000 f992 	bl	8005f30 <_svfiprintf_r>
 8005c0c:	9b02      	ldr	r3, [sp, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	b01c      	add	sp, #112	; 0x70
 8005c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c18:	b003      	add	sp, #12
 8005c1a:	4770      	bx	lr
 8005c1c:	20000068 	.word	0x20000068
 8005c20:	ffff0208 	.word	0xffff0208

08005c24 <memset>:
 8005c24:	4402      	add	r2, r0
 8005c26:	4603      	mov	r3, r0
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d100      	bne.n	8005c2e <memset+0xa>
 8005c2c:	4770      	bx	lr
 8005c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c32:	e7f9      	b.n	8005c28 <memset+0x4>

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	; (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	20000068 	.word	0x20000068

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	4d0d      	ldr	r5, [pc, #52]	; (8005c78 <__libc_init_array+0x38>)
 8005c44:	4c0d      	ldr	r4, [pc, #52]	; (8005c7c <__libc_init_array+0x3c>)
 8005c46:	1b64      	subs	r4, r4, r5
 8005c48:	10a4      	asrs	r4, r4, #2
 8005c4a:	2600      	movs	r6, #0
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	4d0b      	ldr	r5, [pc, #44]	; (8005c80 <__libc_init_array+0x40>)
 8005c52:	4c0c      	ldr	r4, [pc, #48]	; (8005c84 <__libc_init_array+0x44>)
 8005c54:	f000 fc6a 	bl	800652c <_init>
 8005c58:	1b64      	subs	r4, r4, r5
 8005c5a:	10a4      	asrs	r4, r4, #2
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	080065b0 	.word	0x080065b0
 8005c7c:	080065b0 	.word	0x080065b0
 8005c80:	080065b0 	.word	0x080065b0
 8005c84:	080065b4 	.word	0x080065b4

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <_free_r>:
 8005c8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c8e:	2900      	cmp	r1, #0
 8005c90:	d044      	beq.n	8005d1c <_free_r+0x90>
 8005c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c96:	9001      	str	r0, [sp, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f1a1 0404 	sub.w	r4, r1, #4
 8005c9e:	bfb8      	it	lt
 8005ca0:	18e4      	addlt	r4, r4, r3
 8005ca2:	f000 f8df 	bl	8005e64 <__malloc_lock>
 8005ca6:	4a1e      	ldr	r2, [pc, #120]	; (8005d20 <_free_r+0x94>)
 8005ca8:	9801      	ldr	r0, [sp, #4]
 8005caa:	6813      	ldr	r3, [r2, #0]
 8005cac:	b933      	cbnz	r3, 8005cbc <_free_r+0x30>
 8005cae:	6063      	str	r3, [r4, #4]
 8005cb0:	6014      	str	r4, [r2, #0]
 8005cb2:	b003      	add	sp, #12
 8005cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb8:	f000 b8da 	b.w	8005e70 <__malloc_unlock>
 8005cbc:	42a3      	cmp	r3, r4
 8005cbe:	d908      	bls.n	8005cd2 <_free_r+0x46>
 8005cc0:	6825      	ldr	r5, [r4, #0]
 8005cc2:	1961      	adds	r1, r4, r5
 8005cc4:	428b      	cmp	r3, r1
 8005cc6:	bf01      	itttt	eq
 8005cc8:	6819      	ldreq	r1, [r3, #0]
 8005cca:	685b      	ldreq	r3, [r3, #4]
 8005ccc:	1949      	addeq	r1, r1, r5
 8005cce:	6021      	streq	r1, [r4, #0]
 8005cd0:	e7ed      	b.n	8005cae <_free_r+0x22>
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	b10b      	cbz	r3, 8005cdc <_free_r+0x50>
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	d9fa      	bls.n	8005cd2 <_free_r+0x46>
 8005cdc:	6811      	ldr	r1, [r2, #0]
 8005cde:	1855      	adds	r5, r2, r1
 8005ce0:	42a5      	cmp	r5, r4
 8005ce2:	d10b      	bne.n	8005cfc <_free_r+0x70>
 8005ce4:	6824      	ldr	r4, [r4, #0]
 8005ce6:	4421      	add	r1, r4
 8005ce8:	1854      	adds	r4, r2, r1
 8005cea:	42a3      	cmp	r3, r4
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	d1e0      	bne.n	8005cb2 <_free_r+0x26>
 8005cf0:	681c      	ldr	r4, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	6053      	str	r3, [r2, #4]
 8005cf6:	440c      	add	r4, r1
 8005cf8:	6014      	str	r4, [r2, #0]
 8005cfa:	e7da      	b.n	8005cb2 <_free_r+0x26>
 8005cfc:	d902      	bls.n	8005d04 <_free_r+0x78>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	6003      	str	r3, [r0, #0]
 8005d02:	e7d6      	b.n	8005cb2 <_free_r+0x26>
 8005d04:	6825      	ldr	r5, [r4, #0]
 8005d06:	1961      	adds	r1, r4, r5
 8005d08:	428b      	cmp	r3, r1
 8005d0a:	bf04      	itt	eq
 8005d0c:	6819      	ldreq	r1, [r3, #0]
 8005d0e:	685b      	ldreq	r3, [r3, #4]
 8005d10:	6063      	str	r3, [r4, #4]
 8005d12:	bf04      	itt	eq
 8005d14:	1949      	addeq	r1, r1, r5
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	6054      	str	r4, [r2, #4]
 8005d1a:	e7ca      	b.n	8005cb2 <_free_r+0x26>
 8005d1c:	b003      	add	sp, #12
 8005d1e:	bd30      	pop	{r4, r5, pc}
 8005d20:	2000039c 	.word	0x2000039c

08005d24 <sbrk_aligned>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4e0e      	ldr	r6, [pc, #56]	; (8005d60 <sbrk_aligned+0x3c>)
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6831      	ldr	r1, [r6, #0]
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	b911      	cbnz	r1, 8005d36 <sbrk_aligned+0x12>
 8005d30:	f000 fba6 	bl	8006480 <_sbrk_r>
 8005d34:	6030      	str	r0, [r6, #0]
 8005d36:	4621      	mov	r1, r4
 8005d38:	4628      	mov	r0, r5
 8005d3a:	f000 fba1 	bl	8006480 <_sbrk_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	d00a      	beq.n	8005d58 <sbrk_aligned+0x34>
 8005d42:	1cc4      	adds	r4, r0, #3
 8005d44:	f024 0403 	bic.w	r4, r4, #3
 8005d48:	42a0      	cmp	r0, r4
 8005d4a:	d007      	beq.n	8005d5c <sbrk_aligned+0x38>
 8005d4c:	1a21      	subs	r1, r4, r0
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 fb96 	bl	8006480 <_sbrk_r>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d101      	bne.n	8005d5c <sbrk_aligned+0x38>
 8005d58:	f04f 34ff 	mov.w	r4, #4294967295
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bd70      	pop	{r4, r5, r6, pc}
 8005d60:	200003a0 	.word	0x200003a0

08005d64 <_malloc_r>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	1ccd      	adds	r5, r1, #3
 8005d6a:	f025 0503 	bic.w	r5, r5, #3
 8005d6e:	3508      	adds	r5, #8
 8005d70:	2d0c      	cmp	r5, #12
 8005d72:	bf38      	it	cc
 8005d74:	250c      	movcc	r5, #12
 8005d76:	2d00      	cmp	r5, #0
 8005d78:	4607      	mov	r7, r0
 8005d7a:	db01      	blt.n	8005d80 <_malloc_r+0x1c>
 8005d7c:	42a9      	cmp	r1, r5
 8005d7e:	d905      	bls.n	8005d8c <_malloc_r+0x28>
 8005d80:	230c      	movs	r3, #12
 8005d82:	603b      	str	r3, [r7, #0]
 8005d84:	2600      	movs	r6, #0
 8005d86:	4630      	mov	r0, r6
 8005d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e60 <_malloc_r+0xfc>
 8005d90:	f000 f868 	bl	8005e64 <__malloc_lock>
 8005d94:	f8d8 3000 	ldr.w	r3, [r8]
 8005d98:	461c      	mov	r4, r3
 8005d9a:	bb5c      	cbnz	r4, 8005df4 <_malloc_r+0x90>
 8005d9c:	4629      	mov	r1, r5
 8005d9e:	4638      	mov	r0, r7
 8005da0:	f7ff ffc0 	bl	8005d24 <sbrk_aligned>
 8005da4:	1c43      	adds	r3, r0, #1
 8005da6:	4604      	mov	r4, r0
 8005da8:	d155      	bne.n	8005e56 <_malloc_r+0xf2>
 8005daa:	f8d8 4000 	ldr.w	r4, [r8]
 8005dae:	4626      	mov	r6, r4
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	d145      	bne.n	8005e40 <_malloc_r+0xdc>
 8005db4:	2c00      	cmp	r4, #0
 8005db6:	d048      	beq.n	8005e4a <_malloc_r+0xe6>
 8005db8:	6823      	ldr	r3, [r4, #0]
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	eb04 0903 	add.w	r9, r4, r3
 8005dc2:	f000 fb5d 	bl	8006480 <_sbrk_r>
 8005dc6:	4581      	cmp	r9, r0
 8005dc8:	d13f      	bne.n	8005e4a <_malloc_r+0xe6>
 8005dca:	6821      	ldr	r1, [r4, #0]
 8005dcc:	1a6d      	subs	r5, r5, r1
 8005dce:	4629      	mov	r1, r5
 8005dd0:	4638      	mov	r0, r7
 8005dd2:	f7ff ffa7 	bl	8005d24 <sbrk_aligned>
 8005dd6:	3001      	adds	r0, #1
 8005dd8:	d037      	beq.n	8005e4a <_malloc_r+0xe6>
 8005dda:	6823      	ldr	r3, [r4, #0]
 8005ddc:	442b      	add	r3, r5
 8005dde:	6023      	str	r3, [r4, #0]
 8005de0:	f8d8 3000 	ldr.w	r3, [r8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d038      	beq.n	8005e5a <_malloc_r+0xf6>
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	42a2      	cmp	r2, r4
 8005dec:	d12b      	bne.n	8005e46 <_malloc_r+0xe2>
 8005dee:	2200      	movs	r2, #0
 8005df0:	605a      	str	r2, [r3, #4]
 8005df2:	e00f      	b.n	8005e14 <_malloc_r+0xb0>
 8005df4:	6822      	ldr	r2, [r4, #0]
 8005df6:	1b52      	subs	r2, r2, r5
 8005df8:	d41f      	bmi.n	8005e3a <_malloc_r+0xd6>
 8005dfa:	2a0b      	cmp	r2, #11
 8005dfc:	d917      	bls.n	8005e2e <_malloc_r+0xca>
 8005dfe:	1961      	adds	r1, r4, r5
 8005e00:	42a3      	cmp	r3, r4
 8005e02:	6025      	str	r5, [r4, #0]
 8005e04:	bf18      	it	ne
 8005e06:	6059      	strne	r1, [r3, #4]
 8005e08:	6863      	ldr	r3, [r4, #4]
 8005e0a:	bf08      	it	eq
 8005e0c:	f8c8 1000 	streq.w	r1, [r8]
 8005e10:	5162      	str	r2, [r4, r5]
 8005e12:	604b      	str	r3, [r1, #4]
 8005e14:	4638      	mov	r0, r7
 8005e16:	f104 060b 	add.w	r6, r4, #11
 8005e1a:	f000 f829 	bl	8005e70 <__malloc_unlock>
 8005e1e:	f026 0607 	bic.w	r6, r6, #7
 8005e22:	1d23      	adds	r3, r4, #4
 8005e24:	1af2      	subs	r2, r6, r3
 8005e26:	d0ae      	beq.n	8005d86 <_malloc_r+0x22>
 8005e28:	1b9b      	subs	r3, r3, r6
 8005e2a:	50a3      	str	r3, [r4, r2]
 8005e2c:	e7ab      	b.n	8005d86 <_malloc_r+0x22>
 8005e2e:	42a3      	cmp	r3, r4
 8005e30:	6862      	ldr	r2, [r4, #4]
 8005e32:	d1dd      	bne.n	8005df0 <_malloc_r+0x8c>
 8005e34:	f8c8 2000 	str.w	r2, [r8]
 8005e38:	e7ec      	b.n	8005e14 <_malloc_r+0xb0>
 8005e3a:	4623      	mov	r3, r4
 8005e3c:	6864      	ldr	r4, [r4, #4]
 8005e3e:	e7ac      	b.n	8005d9a <_malloc_r+0x36>
 8005e40:	4634      	mov	r4, r6
 8005e42:	6876      	ldr	r6, [r6, #4]
 8005e44:	e7b4      	b.n	8005db0 <_malloc_r+0x4c>
 8005e46:	4613      	mov	r3, r2
 8005e48:	e7cc      	b.n	8005de4 <_malloc_r+0x80>
 8005e4a:	230c      	movs	r3, #12
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4638      	mov	r0, r7
 8005e50:	f000 f80e 	bl	8005e70 <__malloc_unlock>
 8005e54:	e797      	b.n	8005d86 <_malloc_r+0x22>
 8005e56:	6025      	str	r5, [r4, #0]
 8005e58:	e7dc      	b.n	8005e14 <_malloc_r+0xb0>
 8005e5a:	605b      	str	r3, [r3, #4]
 8005e5c:	deff      	udf	#255	; 0xff
 8005e5e:	bf00      	nop
 8005e60:	2000039c 	.word	0x2000039c

08005e64 <__malloc_lock>:
 8005e64:	4801      	ldr	r0, [pc, #4]	; (8005e6c <__malloc_lock+0x8>)
 8005e66:	f7ff bf0f 	b.w	8005c88 <__retarget_lock_acquire_recursive>
 8005e6a:	bf00      	nop
 8005e6c:	20000398 	.word	0x20000398

08005e70 <__malloc_unlock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_unlock+0x8>)
 8005e72:	f7ff bf0a 	b.w	8005c8a <__retarget_lock_release_recursive>
 8005e76:	bf00      	nop
 8005e78:	20000398 	.word	0x20000398

08005e7c <__ssputs_r>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	688e      	ldr	r6, [r1, #8]
 8005e82:	461f      	mov	r7, r3
 8005e84:	42be      	cmp	r6, r7
 8005e86:	680b      	ldr	r3, [r1, #0]
 8005e88:	4682      	mov	sl, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4690      	mov	r8, r2
 8005e8e:	d82c      	bhi.n	8005eea <__ssputs_r+0x6e>
 8005e90:	898a      	ldrh	r2, [r1, #12]
 8005e92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e96:	d026      	beq.n	8005ee6 <__ssputs_r+0x6a>
 8005e98:	6965      	ldr	r5, [r4, #20]
 8005e9a:	6909      	ldr	r1, [r1, #16]
 8005e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea0:	eba3 0901 	sub.w	r9, r3, r1
 8005ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ea8:	1c7b      	adds	r3, r7, #1
 8005eaa:	444b      	add	r3, r9
 8005eac:	106d      	asrs	r5, r5, #1
 8005eae:	429d      	cmp	r5, r3
 8005eb0:	bf38      	it	cc
 8005eb2:	461d      	movcc	r5, r3
 8005eb4:	0553      	lsls	r3, r2, #21
 8005eb6:	d527      	bpl.n	8005f08 <__ssputs_r+0x8c>
 8005eb8:	4629      	mov	r1, r5
 8005eba:	f7ff ff53 	bl	8005d64 <_malloc_r>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	b360      	cbz	r0, 8005f1c <__ssputs_r+0xa0>
 8005ec2:	6921      	ldr	r1, [r4, #16]
 8005ec4:	464a      	mov	r2, r9
 8005ec6:	f000 faeb 	bl	80064a0 <memcpy>
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	81a3      	strh	r3, [r4, #12]
 8005ed6:	6126      	str	r6, [r4, #16]
 8005ed8:	6165      	str	r5, [r4, #20]
 8005eda:	444e      	add	r6, r9
 8005edc:	eba5 0509 	sub.w	r5, r5, r9
 8005ee0:	6026      	str	r6, [r4, #0]
 8005ee2:	60a5      	str	r5, [r4, #8]
 8005ee4:	463e      	mov	r6, r7
 8005ee6:	42be      	cmp	r6, r7
 8005ee8:	d900      	bls.n	8005eec <__ssputs_r+0x70>
 8005eea:	463e      	mov	r6, r7
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	4632      	mov	r2, r6
 8005ef0:	4641      	mov	r1, r8
 8005ef2:	f000 faab 	bl	800644c <memmove>
 8005ef6:	68a3      	ldr	r3, [r4, #8]
 8005ef8:	1b9b      	subs	r3, r3, r6
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	4433      	add	r3, r6
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	2000      	movs	r0, #0
 8005f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f08:	462a      	mov	r2, r5
 8005f0a:	f000 fad7 	bl	80064bc <_realloc_r>
 8005f0e:	4606      	mov	r6, r0
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d1e0      	bne.n	8005ed6 <__ssputs_r+0x5a>
 8005f14:	6921      	ldr	r1, [r4, #16]
 8005f16:	4650      	mov	r0, sl
 8005f18:	f7ff feb8 	bl	8005c8c <_free_r>
 8005f1c:	230c      	movs	r3, #12
 8005f1e:	f8ca 3000 	str.w	r3, [sl]
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f28:	81a3      	strh	r3, [r4, #12]
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	e7e9      	b.n	8005f04 <__ssputs_r+0x88>

08005f30 <_svfiprintf_r>:
 8005f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f34:	4698      	mov	r8, r3
 8005f36:	898b      	ldrh	r3, [r1, #12]
 8005f38:	061b      	lsls	r3, r3, #24
 8005f3a:	b09d      	sub	sp, #116	; 0x74
 8005f3c:	4607      	mov	r7, r0
 8005f3e:	460d      	mov	r5, r1
 8005f40:	4614      	mov	r4, r2
 8005f42:	d50e      	bpl.n	8005f62 <_svfiprintf_r+0x32>
 8005f44:	690b      	ldr	r3, [r1, #16]
 8005f46:	b963      	cbnz	r3, 8005f62 <_svfiprintf_r+0x32>
 8005f48:	2140      	movs	r1, #64	; 0x40
 8005f4a:	f7ff ff0b 	bl	8005d64 <_malloc_r>
 8005f4e:	6028      	str	r0, [r5, #0]
 8005f50:	6128      	str	r0, [r5, #16]
 8005f52:	b920      	cbnz	r0, 8005f5e <_svfiprintf_r+0x2e>
 8005f54:	230c      	movs	r3, #12
 8005f56:	603b      	str	r3, [r7, #0]
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	e0d0      	b.n	8006100 <_svfiprintf_r+0x1d0>
 8005f5e:	2340      	movs	r3, #64	; 0x40
 8005f60:	616b      	str	r3, [r5, #20]
 8005f62:	2300      	movs	r3, #0
 8005f64:	9309      	str	r3, [sp, #36]	; 0x24
 8005f66:	2320      	movs	r3, #32
 8005f68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f70:	2330      	movs	r3, #48	; 0x30
 8005f72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006118 <_svfiprintf_r+0x1e8>
 8005f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f7a:	f04f 0901 	mov.w	r9, #1
 8005f7e:	4623      	mov	r3, r4
 8005f80:	469a      	mov	sl, r3
 8005f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f86:	b10a      	cbz	r2, 8005f8c <_svfiprintf_r+0x5c>
 8005f88:	2a25      	cmp	r2, #37	; 0x25
 8005f8a:	d1f9      	bne.n	8005f80 <_svfiprintf_r+0x50>
 8005f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f90:	d00b      	beq.n	8005faa <_svfiprintf_r+0x7a>
 8005f92:	465b      	mov	r3, fp
 8005f94:	4622      	mov	r2, r4
 8005f96:	4629      	mov	r1, r5
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f7ff ff6f 	bl	8005e7c <__ssputs_r>
 8005f9e:	3001      	adds	r0, #1
 8005fa0:	f000 80a9 	beq.w	80060f6 <_svfiprintf_r+0x1c6>
 8005fa4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fa6:	445a      	add	r2, fp
 8005fa8:	9209      	str	r2, [sp, #36]	; 0x24
 8005faa:	f89a 3000 	ldrb.w	r3, [sl]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80a1 	beq.w	80060f6 <_svfiprintf_r+0x1c6>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fbe:	f10a 0a01 	add.w	sl, sl, #1
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	9307      	str	r3, [sp, #28]
 8005fc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005fca:	931a      	str	r3, [sp, #104]	; 0x68
 8005fcc:	4654      	mov	r4, sl
 8005fce:	2205      	movs	r2, #5
 8005fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd4:	4850      	ldr	r0, [pc, #320]	; (8006118 <_svfiprintf_r+0x1e8>)
 8005fd6:	f7fa f91b 	bl	8000210 <memchr>
 8005fda:	9a04      	ldr	r2, [sp, #16]
 8005fdc:	b9d8      	cbnz	r0, 8006016 <_svfiprintf_r+0xe6>
 8005fde:	06d0      	lsls	r0, r2, #27
 8005fe0:	bf44      	itt	mi
 8005fe2:	2320      	movmi	r3, #32
 8005fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fe8:	0711      	lsls	r1, r2, #28
 8005fea:	bf44      	itt	mi
 8005fec:	232b      	movmi	r3, #43	; 0x2b
 8005fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ff8:	d015      	beq.n	8006026 <_svfiprintf_r+0xf6>
 8005ffa:	9a07      	ldr	r2, [sp, #28]
 8005ffc:	4654      	mov	r4, sl
 8005ffe:	2000      	movs	r0, #0
 8006000:	f04f 0c0a 	mov.w	ip, #10
 8006004:	4621      	mov	r1, r4
 8006006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800600a:	3b30      	subs	r3, #48	; 0x30
 800600c:	2b09      	cmp	r3, #9
 800600e:	d94d      	bls.n	80060ac <_svfiprintf_r+0x17c>
 8006010:	b1b0      	cbz	r0, 8006040 <_svfiprintf_r+0x110>
 8006012:	9207      	str	r2, [sp, #28]
 8006014:	e014      	b.n	8006040 <_svfiprintf_r+0x110>
 8006016:	eba0 0308 	sub.w	r3, r0, r8
 800601a:	fa09 f303 	lsl.w	r3, r9, r3
 800601e:	4313      	orrs	r3, r2
 8006020:	9304      	str	r3, [sp, #16]
 8006022:	46a2      	mov	sl, r4
 8006024:	e7d2      	b.n	8005fcc <_svfiprintf_r+0x9c>
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	1d19      	adds	r1, r3, #4
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	9103      	str	r1, [sp, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	bfbb      	ittet	lt
 8006032:	425b      	neglt	r3, r3
 8006034:	f042 0202 	orrlt.w	r2, r2, #2
 8006038:	9307      	strge	r3, [sp, #28]
 800603a:	9307      	strlt	r3, [sp, #28]
 800603c:	bfb8      	it	lt
 800603e:	9204      	strlt	r2, [sp, #16]
 8006040:	7823      	ldrb	r3, [r4, #0]
 8006042:	2b2e      	cmp	r3, #46	; 0x2e
 8006044:	d10c      	bne.n	8006060 <_svfiprintf_r+0x130>
 8006046:	7863      	ldrb	r3, [r4, #1]
 8006048:	2b2a      	cmp	r3, #42	; 0x2a
 800604a:	d134      	bne.n	80060b6 <_svfiprintf_r+0x186>
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	9203      	str	r2, [sp, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	bfb8      	it	lt
 8006058:	f04f 33ff 	movlt.w	r3, #4294967295
 800605c:	3402      	adds	r4, #2
 800605e:	9305      	str	r3, [sp, #20]
 8006060:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006128 <_svfiprintf_r+0x1f8>
 8006064:	7821      	ldrb	r1, [r4, #0]
 8006066:	2203      	movs	r2, #3
 8006068:	4650      	mov	r0, sl
 800606a:	f7fa f8d1 	bl	8000210 <memchr>
 800606e:	b138      	cbz	r0, 8006080 <_svfiprintf_r+0x150>
 8006070:	9b04      	ldr	r3, [sp, #16]
 8006072:	eba0 000a 	sub.w	r0, r0, sl
 8006076:	2240      	movs	r2, #64	; 0x40
 8006078:	4082      	lsls	r2, r0
 800607a:	4313      	orrs	r3, r2
 800607c:	3401      	adds	r4, #1
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006084:	4825      	ldr	r0, [pc, #148]	; (800611c <_svfiprintf_r+0x1ec>)
 8006086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800608a:	2206      	movs	r2, #6
 800608c:	f7fa f8c0 	bl	8000210 <memchr>
 8006090:	2800      	cmp	r0, #0
 8006092:	d038      	beq.n	8006106 <_svfiprintf_r+0x1d6>
 8006094:	4b22      	ldr	r3, [pc, #136]	; (8006120 <_svfiprintf_r+0x1f0>)
 8006096:	bb1b      	cbnz	r3, 80060e0 <_svfiprintf_r+0x1b0>
 8006098:	9b03      	ldr	r3, [sp, #12]
 800609a:	3307      	adds	r3, #7
 800609c:	f023 0307 	bic.w	r3, r3, #7
 80060a0:	3308      	adds	r3, #8
 80060a2:	9303      	str	r3, [sp, #12]
 80060a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a6:	4433      	add	r3, r6
 80060a8:	9309      	str	r3, [sp, #36]	; 0x24
 80060aa:	e768      	b.n	8005f7e <_svfiprintf_r+0x4e>
 80060ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b0:	460c      	mov	r4, r1
 80060b2:	2001      	movs	r0, #1
 80060b4:	e7a6      	b.n	8006004 <_svfiprintf_r+0xd4>
 80060b6:	2300      	movs	r3, #0
 80060b8:	3401      	adds	r4, #1
 80060ba:	9305      	str	r3, [sp, #20]
 80060bc:	4619      	mov	r1, r3
 80060be:	f04f 0c0a 	mov.w	ip, #10
 80060c2:	4620      	mov	r0, r4
 80060c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060c8:	3a30      	subs	r2, #48	; 0x30
 80060ca:	2a09      	cmp	r2, #9
 80060cc:	d903      	bls.n	80060d6 <_svfiprintf_r+0x1a6>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0c6      	beq.n	8006060 <_svfiprintf_r+0x130>
 80060d2:	9105      	str	r1, [sp, #20]
 80060d4:	e7c4      	b.n	8006060 <_svfiprintf_r+0x130>
 80060d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80060da:	4604      	mov	r4, r0
 80060dc:	2301      	movs	r3, #1
 80060de:	e7f0      	b.n	80060c2 <_svfiprintf_r+0x192>
 80060e0:	ab03      	add	r3, sp, #12
 80060e2:	9300      	str	r3, [sp, #0]
 80060e4:	462a      	mov	r2, r5
 80060e6:	4b0f      	ldr	r3, [pc, #60]	; (8006124 <_svfiprintf_r+0x1f4>)
 80060e8:	a904      	add	r1, sp, #16
 80060ea:	4638      	mov	r0, r7
 80060ec:	f3af 8000 	nop.w
 80060f0:	1c42      	adds	r2, r0, #1
 80060f2:	4606      	mov	r6, r0
 80060f4:	d1d6      	bne.n	80060a4 <_svfiprintf_r+0x174>
 80060f6:	89ab      	ldrh	r3, [r5, #12]
 80060f8:	065b      	lsls	r3, r3, #25
 80060fa:	f53f af2d 	bmi.w	8005f58 <_svfiprintf_r+0x28>
 80060fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006100:	b01d      	add	sp, #116	; 0x74
 8006102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006106:	ab03      	add	r3, sp, #12
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	462a      	mov	r2, r5
 800610c:	4b05      	ldr	r3, [pc, #20]	; (8006124 <_svfiprintf_r+0x1f4>)
 800610e:	a904      	add	r1, sp, #16
 8006110:	4638      	mov	r0, r7
 8006112:	f000 f879 	bl	8006208 <_printf_i>
 8006116:	e7eb      	b.n	80060f0 <_svfiprintf_r+0x1c0>
 8006118:	08006574 	.word	0x08006574
 800611c:	0800657e 	.word	0x0800657e
 8006120:	00000000 	.word	0x00000000
 8006124:	08005e7d 	.word	0x08005e7d
 8006128:	0800657a 	.word	0x0800657a

0800612c <_printf_common>:
 800612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	4616      	mov	r6, r2
 8006132:	4699      	mov	r9, r3
 8006134:	688a      	ldr	r2, [r1, #8]
 8006136:	690b      	ldr	r3, [r1, #16]
 8006138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800613c:	4293      	cmp	r3, r2
 800613e:	bfb8      	it	lt
 8006140:	4613      	movlt	r3, r2
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006148:	4607      	mov	r7, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b10a      	cbz	r2, 8006152 <_printf_common+0x26>
 800614e:	3301      	adds	r3, #1
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	0699      	lsls	r1, r3, #26
 8006156:	bf42      	ittt	mi
 8006158:	6833      	ldrmi	r3, [r6, #0]
 800615a:	3302      	addmi	r3, #2
 800615c:	6033      	strmi	r3, [r6, #0]
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	f015 0506 	ands.w	r5, r5, #6
 8006164:	d106      	bne.n	8006174 <_printf_common+0x48>
 8006166:	f104 0a19 	add.w	sl, r4, #25
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	6832      	ldr	r2, [r6, #0]
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	42ab      	cmp	r3, r5
 8006172:	dc26      	bgt.n	80061c2 <_printf_common+0x96>
 8006174:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006178:	1e13      	subs	r3, r2, #0
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	bf18      	it	ne
 800617e:	2301      	movne	r3, #1
 8006180:	0692      	lsls	r2, r2, #26
 8006182:	d42b      	bmi.n	80061dc <_printf_common+0xb0>
 8006184:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006188:	4649      	mov	r1, r9
 800618a:	4638      	mov	r0, r7
 800618c:	47c0      	blx	r8
 800618e:	3001      	adds	r0, #1
 8006190:	d01e      	beq.n	80061d0 <_printf_common+0xa4>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	6922      	ldr	r2, [r4, #16]
 8006196:	f003 0306 	and.w	r3, r3, #6
 800619a:	2b04      	cmp	r3, #4
 800619c:	bf02      	ittt	eq
 800619e:	68e5      	ldreq	r5, [r4, #12]
 80061a0:	6833      	ldreq	r3, [r6, #0]
 80061a2:	1aed      	subeq	r5, r5, r3
 80061a4:	68a3      	ldr	r3, [r4, #8]
 80061a6:	bf0c      	ite	eq
 80061a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ac:	2500      	movne	r5, #0
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bfc4      	itt	gt
 80061b2:	1a9b      	subgt	r3, r3, r2
 80061b4:	18ed      	addgt	r5, r5, r3
 80061b6:	2600      	movs	r6, #0
 80061b8:	341a      	adds	r4, #26
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	d11a      	bne.n	80061f4 <_printf_common+0xc8>
 80061be:	2000      	movs	r0, #0
 80061c0:	e008      	b.n	80061d4 <_printf_common+0xa8>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4652      	mov	r2, sl
 80061c6:	4649      	mov	r1, r9
 80061c8:	4638      	mov	r0, r7
 80061ca:	47c0      	blx	r8
 80061cc:	3001      	adds	r0, #1
 80061ce:	d103      	bne.n	80061d8 <_printf_common+0xac>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	3501      	adds	r5, #1
 80061da:	e7c6      	b.n	800616a <_printf_common+0x3e>
 80061dc:	18e1      	adds	r1, r4, r3
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	2030      	movs	r0, #48	; 0x30
 80061e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061e6:	4422      	add	r2, r4
 80061e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061f0:	3302      	adds	r3, #2
 80061f2:	e7c7      	b.n	8006184 <_printf_common+0x58>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4622      	mov	r2, r4
 80061f8:	4649      	mov	r1, r9
 80061fa:	4638      	mov	r0, r7
 80061fc:	47c0      	blx	r8
 80061fe:	3001      	adds	r0, #1
 8006200:	d0e6      	beq.n	80061d0 <_printf_common+0xa4>
 8006202:	3601      	adds	r6, #1
 8006204:	e7d9      	b.n	80061ba <_printf_common+0x8e>
	...

08006208 <_printf_i>:
 8006208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	7e0f      	ldrb	r7, [r1, #24]
 800620e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006210:	2f78      	cmp	r7, #120	; 0x78
 8006212:	4691      	mov	r9, r2
 8006214:	4680      	mov	r8, r0
 8006216:	460c      	mov	r4, r1
 8006218:	469a      	mov	sl, r3
 800621a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800621e:	d807      	bhi.n	8006230 <_printf_i+0x28>
 8006220:	2f62      	cmp	r7, #98	; 0x62
 8006222:	d80a      	bhi.n	800623a <_printf_i+0x32>
 8006224:	2f00      	cmp	r7, #0
 8006226:	f000 80d4 	beq.w	80063d2 <_printf_i+0x1ca>
 800622a:	2f58      	cmp	r7, #88	; 0x58
 800622c:	f000 80c0 	beq.w	80063b0 <_printf_i+0x1a8>
 8006230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006238:	e03a      	b.n	80062b0 <_printf_i+0xa8>
 800623a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800623e:	2b15      	cmp	r3, #21
 8006240:	d8f6      	bhi.n	8006230 <_printf_i+0x28>
 8006242:	a101      	add	r1, pc, #4	; (adr r1, 8006248 <_printf_i+0x40>)
 8006244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062b5 	.word	0x080062b5
 8006250:	08006231 	.word	0x08006231
 8006254:	08006231 	.word	0x08006231
 8006258:	08006231 	.word	0x08006231
 800625c:	08006231 	.word	0x08006231
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006231 	.word	0x08006231
 8006268:	08006231 	.word	0x08006231
 800626c:	08006231 	.word	0x08006231
 8006270:	08006231 	.word	0x08006231
 8006274:	080063b9 	.word	0x080063b9
 8006278:	080062e1 	.word	0x080062e1
 800627c:	08006373 	.word	0x08006373
 8006280:	08006231 	.word	0x08006231
 8006284:	08006231 	.word	0x08006231
 8006288:	080063db 	.word	0x080063db
 800628c:	08006231 	.word	0x08006231
 8006290:	080062e1 	.word	0x080062e1
 8006294:	08006231 	.word	0x08006231
 8006298:	08006231 	.word	0x08006231
 800629c:	0800637b 	.word	0x0800637b
 80062a0:	682b      	ldr	r3, [r5, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	602a      	str	r2, [r5, #0]
 80062a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062b0:	2301      	movs	r3, #1
 80062b2:	e09f      	b.n	80063f4 <_printf_i+0x1ec>
 80062b4:	6820      	ldr	r0, [r4, #0]
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	0607      	lsls	r7, r0, #24
 80062ba:	f103 0104 	add.w	r1, r3, #4
 80062be:	6029      	str	r1, [r5, #0]
 80062c0:	d501      	bpl.n	80062c6 <_printf_i+0xbe>
 80062c2:	681e      	ldr	r6, [r3, #0]
 80062c4:	e003      	b.n	80062ce <_printf_i+0xc6>
 80062c6:	0646      	lsls	r6, r0, #25
 80062c8:	d5fb      	bpl.n	80062c2 <_printf_i+0xba>
 80062ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	da03      	bge.n	80062da <_printf_i+0xd2>
 80062d2:	232d      	movs	r3, #45	; 0x2d
 80062d4:	4276      	negs	r6, r6
 80062d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062da:	485a      	ldr	r0, [pc, #360]	; (8006444 <_printf_i+0x23c>)
 80062dc:	230a      	movs	r3, #10
 80062de:	e012      	b.n	8006306 <_printf_i+0xfe>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	6820      	ldr	r0, [r4, #0]
 80062e4:	1d19      	adds	r1, r3, #4
 80062e6:	6029      	str	r1, [r5, #0]
 80062e8:	0605      	lsls	r5, r0, #24
 80062ea:	d501      	bpl.n	80062f0 <_printf_i+0xe8>
 80062ec:	681e      	ldr	r6, [r3, #0]
 80062ee:	e002      	b.n	80062f6 <_printf_i+0xee>
 80062f0:	0641      	lsls	r1, r0, #25
 80062f2:	d5fb      	bpl.n	80062ec <_printf_i+0xe4>
 80062f4:	881e      	ldrh	r6, [r3, #0]
 80062f6:	4853      	ldr	r0, [pc, #332]	; (8006444 <_printf_i+0x23c>)
 80062f8:	2f6f      	cmp	r7, #111	; 0x6f
 80062fa:	bf0c      	ite	eq
 80062fc:	2308      	moveq	r3, #8
 80062fe:	230a      	movne	r3, #10
 8006300:	2100      	movs	r1, #0
 8006302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006306:	6865      	ldr	r5, [r4, #4]
 8006308:	60a5      	str	r5, [r4, #8]
 800630a:	2d00      	cmp	r5, #0
 800630c:	bfa2      	ittt	ge
 800630e:	6821      	ldrge	r1, [r4, #0]
 8006310:	f021 0104 	bicge.w	r1, r1, #4
 8006314:	6021      	strge	r1, [r4, #0]
 8006316:	b90e      	cbnz	r6, 800631c <_printf_i+0x114>
 8006318:	2d00      	cmp	r5, #0
 800631a:	d04b      	beq.n	80063b4 <_printf_i+0x1ac>
 800631c:	4615      	mov	r5, r2
 800631e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006322:	fb03 6711 	mls	r7, r3, r1, r6
 8006326:	5dc7      	ldrb	r7, [r0, r7]
 8006328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800632c:	4637      	mov	r7, r6
 800632e:	42bb      	cmp	r3, r7
 8006330:	460e      	mov	r6, r1
 8006332:	d9f4      	bls.n	800631e <_printf_i+0x116>
 8006334:	2b08      	cmp	r3, #8
 8006336:	d10b      	bne.n	8006350 <_printf_i+0x148>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	07de      	lsls	r6, r3, #31
 800633c:	d508      	bpl.n	8006350 <_printf_i+0x148>
 800633e:	6923      	ldr	r3, [r4, #16]
 8006340:	6861      	ldr	r1, [r4, #4]
 8006342:	4299      	cmp	r1, r3
 8006344:	bfde      	ittt	le
 8006346:	2330      	movle	r3, #48	; 0x30
 8006348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800634c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006350:	1b52      	subs	r2, r2, r5
 8006352:	6122      	str	r2, [r4, #16]
 8006354:	f8cd a000 	str.w	sl, [sp]
 8006358:	464b      	mov	r3, r9
 800635a:	aa03      	add	r2, sp, #12
 800635c:	4621      	mov	r1, r4
 800635e:	4640      	mov	r0, r8
 8006360:	f7ff fee4 	bl	800612c <_printf_common>
 8006364:	3001      	adds	r0, #1
 8006366:	d14a      	bne.n	80063fe <_printf_i+0x1f6>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b004      	add	sp, #16
 800636e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	f043 0320 	orr.w	r3, r3, #32
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	4833      	ldr	r0, [pc, #204]	; (8006448 <_printf_i+0x240>)
 800637c:	2778      	movs	r7, #120	; 0x78
 800637e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006382:	6823      	ldr	r3, [r4, #0]
 8006384:	6829      	ldr	r1, [r5, #0]
 8006386:	061f      	lsls	r7, r3, #24
 8006388:	f851 6b04 	ldr.w	r6, [r1], #4
 800638c:	d402      	bmi.n	8006394 <_printf_i+0x18c>
 800638e:	065f      	lsls	r7, r3, #25
 8006390:	bf48      	it	mi
 8006392:	b2b6      	uxthmi	r6, r6
 8006394:	07df      	lsls	r7, r3, #31
 8006396:	bf48      	it	mi
 8006398:	f043 0320 	orrmi.w	r3, r3, #32
 800639c:	6029      	str	r1, [r5, #0]
 800639e:	bf48      	it	mi
 80063a0:	6023      	strmi	r3, [r4, #0]
 80063a2:	b91e      	cbnz	r6, 80063ac <_printf_i+0x1a4>
 80063a4:	6823      	ldr	r3, [r4, #0]
 80063a6:	f023 0320 	bic.w	r3, r3, #32
 80063aa:	6023      	str	r3, [r4, #0]
 80063ac:	2310      	movs	r3, #16
 80063ae:	e7a7      	b.n	8006300 <_printf_i+0xf8>
 80063b0:	4824      	ldr	r0, [pc, #144]	; (8006444 <_printf_i+0x23c>)
 80063b2:	e7e4      	b.n	800637e <_printf_i+0x176>
 80063b4:	4615      	mov	r5, r2
 80063b6:	e7bd      	b.n	8006334 <_printf_i+0x12c>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	6826      	ldr	r6, [r4, #0]
 80063bc:	6961      	ldr	r1, [r4, #20]
 80063be:	1d18      	adds	r0, r3, #4
 80063c0:	6028      	str	r0, [r5, #0]
 80063c2:	0635      	lsls	r5, r6, #24
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	d501      	bpl.n	80063cc <_printf_i+0x1c4>
 80063c8:	6019      	str	r1, [r3, #0]
 80063ca:	e002      	b.n	80063d2 <_printf_i+0x1ca>
 80063cc:	0670      	lsls	r0, r6, #25
 80063ce:	d5fb      	bpl.n	80063c8 <_printf_i+0x1c0>
 80063d0:	8019      	strh	r1, [r3, #0]
 80063d2:	2300      	movs	r3, #0
 80063d4:	6123      	str	r3, [r4, #16]
 80063d6:	4615      	mov	r5, r2
 80063d8:	e7bc      	b.n	8006354 <_printf_i+0x14c>
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	1d1a      	adds	r2, r3, #4
 80063de:	602a      	str	r2, [r5, #0]
 80063e0:	681d      	ldr	r5, [r3, #0]
 80063e2:	6862      	ldr	r2, [r4, #4]
 80063e4:	2100      	movs	r1, #0
 80063e6:	4628      	mov	r0, r5
 80063e8:	f7f9 ff12 	bl	8000210 <memchr>
 80063ec:	b108      	cbz	r0, 80063f2 <_printf_i+0x1ea>
 80063ee:	1b40      	subs	r0, r0, r5
 80063f0:	6060      	str	r0, [r4, #4]
 80063f2:	6863      	ldr	r3, [r4, #4]
 80063f4:	6123      	str	r3, [r4, #16]
 80063f6:	2300      	movs	r3, #0
 80063f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063fc:	e7aa      	b.n	8006354 <_printf_i+0x14c>
 80063fe:	6923      	ldr	r3, [r4, #16]
 8006400:	462a      	mov	r2, r5
 8006402:	4649      	mov	r1, r9
 8006404:	4640      	mov	r0, r8
 8006406:	47d0      	blx	sl
 8006408:	3001      	adds	r0, #1
 800640a:	d0ad      	beq.n	8006368 <_printf_i+0x160>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	079b      	lsls	r3, r3, #30
 8006410:	d413      	bmi.n	800643a <_printf_i+0x232>
 8006412:	68e0      	ldr	r0, [r4, #12]
 8006414:	9b03      	ldr	r3, [sp, #12]
 8006416:	4298      	cmp	r0, r3
 8006418:	bfb8      	it	lt
 800641a:	4618      	movlt	r0, r3
 800641c:	e7a6      	b.n	800636c <_printf_i+0x164>
 800641e:	2301      	movs	r3, #1
 8006420:	4632      	mov	r2, r6
 8006422:	4649      	mov	r1, r9
 8006424:	4640      	mov	r0, r8
 8006426:	47d0      	blx	sl
 8006428:	3001      	adds	r0, #1
 800642a:	d09d      	beq.n	8006368 <_printf_i+0x160>
 800642c:	3501      	adds	r5, #1
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	9903      	ldr	r1, [sp, #12]
 8006432:	1a5b      	subs	r3, r3, r1
 8006434:	42ab      	cmp	r3, r5
 8006436:	dcf2      	bgt.n	800641e <_printf_i+0x216>
 8006438:	e7eb      	b.n	8006412 <_printf_i+0x20a>
 800643a:	2500      	movs	r5, #0
 800643c:	f104 0619 	add.w	r6, r4, #25
 8006440:	e7f5      	b.n	800642e <_printf_i+0x226>
 8006442:	bf00      	nop
 8006444:	08006585 	.word	0x08006585
 8006448:	08006596 	.word	0x08006596

0800644c <memmove>:
 800644c:	4288      	cmp	r0, r1
 800644e:	b510      	push	{r4, lr}
 8006450:	eb01 0402 	add.w	r4, r1, r2
 8006454:	d902      	bls.n	800645c <memmove+0x10>
 8006456:	4284      	cmp	r4, r0
 8006458:	4623      	mov	r3, r4
 800645a:	d807      	bhi.n	800646c <memmove+0x20>
 800645c:	1e43      	subs	r3, r0, #1
 800645e:	42a1      	cmp	r1, r4
 8006460:	d008      	beq.n	8006474 <memmove+0x28>
 8006462:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800646a:	e7f8      	b.n	800645e <memmove+0x12>
 800646c:	4402      	add	r2, r0
 800646e:	4601      	mov	r1, r0
 8006470:	428a      	cmp	r2, r1
 8006472:	d100      	bne.n	8006476 <memmove+0x2a>
 8006474:	bd10      	pop	{r4, pc}
 8006476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800647a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647e:	e7f7      	b.n	8006470 <memmove+0x24>

08006480 <_sbrk_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	; (800649c <_sbrk_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fa fc56 	bl	8000d3c <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_sbrk_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_sbrk_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	20000394 	.word	0x20000394

080064a0 <memcpy>:
 80064a0:	440a      	add	r2, r1
 80064a2:	4291      	cmp	r1, r2
 80064a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80064a8:	d100      	bne.n	80064ac <memcpy+0xc>
 80064aa:	4770      	bx	lr
 80064ac:	b510      	push	{r4, lr}
 80064ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b6:	4291      	cmp	r1, r2
 80064b8:	d1f9      	bne.n	80064ae <memcpy+0xe>
 80064ba:	bd10      	pop	{r4, pc}

080064bc <_realloc_r>:
 80064bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c0:	4680      	mov	r8, r0
 80064c2:	4614      	mov	r4, r2
 80064c4:	460e      	mov	r6, r1
 80064c6:	b921      	cbnz	r1, 80064d2 <_realloc_r+0x16>
 80064c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064cc:	4611      	mov	r1, r2
 80064ce:	f7ff bc49 	b.w	8005d64 <_malloc_r>
 80064d2:	b92a      	cbnz	r2, 80064e0 <_realloc_r+0x24>
 80064d4:	f7ff fbda 	bl	8005c8c <_free_r>
 80064d8:	4625      	mov	r5, r4
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e0:	f000 f81b 	bl	800651a <_malloc_usable_size_r>
 80064e4:	4284      	cmp	r4, r0
 80064e6:	4607      	mov	r7, r0
 80064e8:	d802      	bhi.n	80064f0 <_realloc_r+0x34>
 80064ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064ee:	d812      	bhi.n	8006516 <_realloc_r+0x5a>
 80064f0:	4621      	mov	r1, r4
 80064f2:	4640      	mov	r0, r8
 80064f4:	f7ff fc36 	bl	8005d64 <_malloc_r>
 80064f8:	4605      	mov	r5, r0
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0ed      	beq.n	80064da <_realloc_r+0x1e>
 80064fe:	42bc      	cmp	r4, r7
 8006500:	4622      	mov	r2, r4
 8006502:	4631      	mov	r1, r6
 8006504:	bf28      	it	cs
 8006506:	463a      	movcs	r2, r7
 8006508:	f7ff ffca 	bl	80064a0 <memcpy>
 800650c:	4631      	mov	r1, r6
 800650e:	4640      	mov	r0, r8
 8006510:	f7ff fbbc 	bl	8005c8c <_free_r>
 8006514:	e7e1      	b.n	80064da <_realloc_r+0x1e>
 8006516:	4635      	mov	r5, r6
 8006518:	e7df      	b.n	80064da <_realloc_r+0x1e>

0800651a <_malloc_usable_size_r>:
 800651a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800651e:	1f18      	subs	r0, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbc      	itt	lt
 8006524:	580b      	ldrlt	r3, [r1, r0]
 8006526:	18c0      	addlt	r0, r0, r3
 8006528:	4770      	bx	lr
	...

0800652c <_init>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	bf00      	nop
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr

08006538 <_fini>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	bf00      	nop
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr
