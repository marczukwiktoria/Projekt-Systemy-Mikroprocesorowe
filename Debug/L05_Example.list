
L05_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08009a78  08009a78  00019a78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d30  08009d30  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d30  08009d30  00019d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d38  08009d38  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d38  08009d38  00019d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d3c  08009d3c  00019d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08009d40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  200000b4  08009df4  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08009df4  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001901a  00000000  00000000  00020127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c08  00000000  00000000  00039141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003cd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0e  00000000  00000000  0003e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029008  00000000  00000000  0003f02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cacb  00000000  00000000  00068036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5abb  00000000  00000000  00084b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006094  00000000  00000000  0017a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00180650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009a5c 	.word	0x08009a5c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	08009a5c 	.word	0x08009a5c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af02      	add	r7, sp, #8
 8000ebe:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	791b      	ldrb	r3, [r3, #4]
 8000ecc:	b299      	uxth	r1, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f107 020f 	add.w	r2, r7, #15
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	f002 f807 	bl	8002eec <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 8000ede:	2310      	movs	r3, #16
 8000ee0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	b299      	uxth	r1, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f107 020f 	add.w	r2, r7, #15
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	f001 fff8 	bl	8002eec <HAL_I2C_Master_Transmit>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af02      	add	r7, sp, #8
 8000f0a:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	791b      	ldrb	r3, [r3, #4]
 8000f14:	b299      	uxth	r1, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f107 020c 	add.w	r2, r7, #12
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	f002 f8d7 	bl	80030d4 <HAL_I2C_Master_Receive>
  hbh1750->Readout = ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	7b7a      	ldrb	r2, [r7, #13]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	ee07 3a90 	vmov	s15, r3
 8000f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f36:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000f58 <BH1750_ReadIlluminance_lux+0x54>
 8000f3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	edc3 7a03 	vstr	s15, [r3, #12]

  return hbh1750->Readout;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	ee07 3a90 	vmov	s15, r3
}
 8000f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	3f99999a 	.word	0x3f99999a

08000f5c <Bulb_State>:
#include <stdbool.h>
#include "stm32f7xx_hal.h"
#include "bulb.h"

void Bulb_State(bool state)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, state);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	4803      	ldr	r0, [pc, #12]	; (8000f7c <Bulb_State+0x20>)
 8000f6e:	f001 ff13 	bl	8002d98 <HAL_GPIO_WritePin>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40020800 	.word	0x40020800

08000f80 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
 8000f8c:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000f8e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000f92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000f96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f9e:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000fa0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000fa2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f80e 	bl	8000fd6 <Lcd_init>

	return lcd;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	461d      	mov	r5, r3
 8000fbe:	f107 0410 	add.w	r4, r7, #16
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fca:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bdb0      	pop	{r4, r5, r7, pc}

08000fd6 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7d9b      	ldrb	r3, [r3, #22]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000fe6:	2133      	movs	r1, #51	; 0x33
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f000 f857 	bl	800109c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000fee:	2132      	movs	r1, #50	; 0x32
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f853 	bl	800109c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000ff6:	2128      	movs	r1, #40	; 0x28
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f84f 	bl	800109c <lcd_write_command>
 8000ffe:	e003      	b.n	8001008 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001000:	2138      	movs	r1, #56	; 0x38
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 f84a 	bl	800109c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001008:	2101      	movs	r1, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f846 	bl	800109c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001010:	210c      	movs	r1, #12
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 f842 	bl	800109c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001018:	2106      	movs	r1, #6
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f83e 	bl	800109c <lcd_write_command>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e00a      	b.n	800104e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f858 	bl	80010f8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	3301      	adds	r3, #1
 800104c:	73fb      	strb	r3, [r7, #15]
 800104e:	7bfc      	ldrb	r4, [r7, #15]
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff f8dd 	bl	8000210 <strlen>
 8001056:	4603      	mov	r3, r0
 8001058:	429c      	cmp	r4, r3
 800105a:	d3ed      	bcc.n	8001038 <Lcd_string+0x10>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bd90      	pop	{r4, r7, pc}
	...

08001068 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
 8001074:	4613      	mov	r3, r2
 8001076:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001078:	78fb      	ldrb	r3, [r7, #3]
 800107a:	4a07      	ldr	r2, [pc, #28]	; (8001098 <Lcd_cursor+0x30>)
 800107c:	5cd2      	ldrb	r2, [r2, r3]
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	4413      	add	r3, r2
 8001082:	b2db      	uxtb	r3, r3
 8001084:	3b80      	subs	r3, #128	; 0x80
 8001086:	b2db      	uxtb	r3, r3
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f806 	bl	800109c <lcd_write_command>
	#endif
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	08009ac0 	.word	0x08009ac0

0800109c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6898      	ldr	r0, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	899b      	ldrh	r3, [r3, #12]
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	f001 fe70 	bl	8002d98 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7d9b      	ldrb	r3, [r3, #22]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d111      	bne.n	80010e4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2204      	movs	r2, #4
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f842 	bl	8001154 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80010d0:	78fb      	ldrb	r3, [r7, #3]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2204      	movs	r2, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f839 	bl	8001154 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80010e2:	e005      	b.n	80010f0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2208      	movs	r2, #8
 80010e8:	4619      	mov	r1, r3
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f000 f832 	bl	8001154 <lcd_write>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6898      	ldr	r0, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	899b      	ldrh	r3, [r3, #12]
 800110c:	2201      	movs	r2, #1
 800110e:	4619      	mov	r1, r3
 8001110:	f001 fe42 	bl	8002d98 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	7d9b      	ldrb	r3, [r3, #22]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d111      	bne.n	8001140 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800111c:	78fb      	ldrb	r3, [r7, #3]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2204      	movs	r2, #4
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f814 	bl	8001154 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2204      	movs	r2, #4
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f80b 	bl	8001154 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800113e:	e005      	b.n	800114c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001140:	78fb      	ldrb	r3, [r7, #3]
 8001142:	2208      	movs	r2, #8
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 f804 	bl	8001154 <lcd_write>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
 8001160:	4613      	mov	r3, r2
 8001162:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e019      	b.n	800119e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	8819      	ldrh	r1, [r3, #0]
 8001182:	78fa      	ldrb	r2, [r7, #3]
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	fa42 f303 	asr.w	r3, r2, r3
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	f001 fe00 	bl	8002d98 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	3301      	adds	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	7bfa      	ldrb	r2, [r7, #15]
 80011a0:	78bb      	ldrb	r3, [r7, #2]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3e1      	bcc.n	800116a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6918      	ldr	r0, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8a9b      	ldrh	r3, [r3, #20]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f001 fdf1 	bl	8002d98 <HAL_GPIO_WritePin>
	DELAY(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f001 fa7a 	bl	80026b0 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6918      	ldr	r0, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	8a9b      	ldrh	r3, [r3, #20]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	f001 fde6 	bl	8002d98 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (hled->Output.Duty) : (100.0f - hled->Output.Duty);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b1b      	ldrb	r3, [r3, #12]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d103      	bne.n	80011ec <LED_PWM_Init+0x18>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80011ea:	e006      	b.n	80011fa <LED_PWM_Init+0x26>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f2:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001210 <LED_PWM_Init+0x3c>
 80011f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_Init(&(hled->Output));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f97a 	bl	80014fc <PWM_Init>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	42c80000 	.word	0x42c80000

08001214 <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	ed87 0a00 	vstr	s0, [r7]
  hled->Output.Duty = (hled->ActiveState == LED_ON_HIGH) ? (duty) : (100.0f - duty);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7b1b      	ldrb	r3, [r3, #12]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d006      	beq.n	8001236 <LED_PWM_WriteDuty+0x22>
 8001228:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800125c <LED_PWM_WriteDuty+0x48>
 800122c:	edd7 7a00 	vldr	s15, [r7]
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	e001      	b.n	800123a <LED_PWM_WriteDuty+0x26>
 8001236:	edd7 7a00 	vldr	s15, [r7]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edc3 7a02 	vstr	s15, [r3, #8]
  PWM_WriteDuty(&(hled->Output), hled->Output.Duty);
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	edd3 7a02 	vldr	s15, [r3, #8]
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	4610      	mov	r0, r2
 800124e:	f000 f96d 	bl	800152c <PWM_WriteDuty>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	42c80000 	.word	0x42c80000

08001260 <Light_Boundries>:
#include "delay_us.h"
#include "bh1750_config.h"
#include <stdio.h>
#include <stdlib.h>
int* Light_Boundries()
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
  int size = 4;
 8001266:	2304      	movs	r3, #4
 8001268:	61fb      	str	r3, [r7, #28]
  int* Boundries = (int*) malloc(sizeof(*Boundries) * size);
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f005 fedc 	bl	800702c <malloc>
 8001274:	4603      	mov	r3, r0
 8001276:	61bb      	str	r3, [r7, #24]
  float H_Boundry_with_Bulb;
  float L_Boundry_With_Bulb;
  float H_Boundry_No_Bulb;
  float L_Boundry_No_Bulb;
  unsigned int illuminance_int = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]

    Bulb_State(1); //Light Bulb
 800127c:	2001      	movs	r0, #1
 800127e:	f7ff fe6d 	bl	8000f5c <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99);
 8001282:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800139c <Light_Boundries+0x13c>
 8001286:	4846      	ldr	r0, [pc, #280]	; (80013a0 <Light_Boundries+0x140>)
 8001288:	f7ff ffc4 	bl	8001214 <LED_PWM_WriteDuty>
    HAL_Delay(500);
 800128c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001290:	f001 fa0e 	bl	80026b0 <HAL_Delay>
    H_Boundry_with_Bulb = BH1750_ReadIlluminance_lux(&hbh1750);
 8001294:	4843      	ldr	r0, [pc, #268]	; (80013a4 <Light_Boundries+0x144>)
 8001296:	f7ff fe35 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 800129a:	ed87 0a04 	vstr	s0, [r7, #16]
    illuminance_int =  H_Boundry_with_Bulb * 1000.0f;
 800129e:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80013a8 <Light_Boundries+0x148>
 80012a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	617b      	str	r3, [r7, #20]
    Boundries[0] =   illuminance_int;
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	601a      	str	r2, [r3, #0]
    HAL_Delay(100);
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f001 f9f8 	bl	80026b0 <HAL_Delay>
    Bulb_State(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff fe4b 	bl	8000f5c <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 0);
 80012c6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80013ac <Light_Boundries+0x14c>
 80012ca:	4835      	ldr	r0, [pc, #212]	; (80013a0 <Light_Boundries+0x140>)
 80012cc:	f7ff ffa2 	bl	8001214 <LED_PWM_WriteDuty>
    HAL_Delay(500);
 80012d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012d4:	f001 f9ec 	bl	80026b0 <HAL_Delay>
    L_Boundry_With_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 80012d8:	4832      	ldr	r0, [pc, #200]	; (80013a4 <Light_Boundries+0x144>)
 80012da:	f7ff fe13 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 80012de:	ed87 0a03 	vstr	s0, [r7, #12]
    illuminance_int =  L_Boundry_With_Bulb * 1000.0f;
 80012e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80013a8 <Light_Boundries+0x148>
 80012ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012f2:	ee17 3a90 	vmov	r3, s15
 80012f6:	617b      	str	r3, [r7, #20]
    Boundries[1]=  illuminance_int;
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	3304      	adds	r3, #4
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 8001300:	2064      	movs	r0, #100	; 0x64
 8001302:	f001 f9d5 	bl	80026b0 <HAL_Delay>
    Bulb_State(0); //OFF Bulb
 8001306:	2000      	movs	r0, #0
 8001308:	f7ff fe28 	bl	8000f5c <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 99); //Light LED
 800130c:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800139c <Light_Boundries+0x13c>
 8001310:	4823      	ldr	r0, [pc, #140]	; (80013a0 <Light_Boundries+0x140>)
 8001312:	f7ff ff7f 	bl	8001214 <LED_PWM_WriteDuty>
    HAL_Delay(500);// wait 0.5s
 8001316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131a:	f001 f9c9 	bl	80026b0 <HAL_Delay>
    H_Boundry_No_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 800131e:	4821      	ldr	r0, [pc, #132]	; (80013a4 <Light_Boundries+0x144>)
 8001320:	f7ff fdf0 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 8001324:	ed87 0a02 	vstr	s0, [r7, #8]
    HAL_Delay(100);
 8001328:	2064      	movs	r0, #100	; 0x64
 800132a:	f001 f9c1 	bl	80026b0 <HAL_Delay>
    illuminance_int = H_Boundry_No_Bulb * 1000.0f;
 800132e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001332:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80013a8 <Light_Boundries+0x148>
 8001336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133e:	ee17 3a90 	vmov	r3, s15
 8001342:	617b      	str	r3, [r7, #20]
    Boundries[2]= illuminance_int;
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	3308      	adds	r3, #8
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	601a      	str	r2, [r3, #0]

    HAL_Delay(100);
 800134c:	2064      	movs	r0, #100	; 0x64
 800134e:	f001 f9af 	bl	80026b0 <HAL_Delay>
    Bulb_State(0); //OFF Bulb
 8001352:	2000      	movs	r0, #0
 8001354:	f7ff fe02 	bl	8000f5c <Bulb_State>
    LED_PWM_WriteDuty(&hld1, 0); //OFF LED
 8001358:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80013ac <Light_Boundries+0x14c>
 800135c:	4810      	ldr	r0, [pc, #64]	; (80013a0 <Light_Boundries+0x140>)
 800135e:	f7ff ff59 	bl	8001214 <LED_PWM_WriteDuty>
    HAL_Delay(500);// wait 0.5s
 8001362:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001366:	f001 f9a3 	bl	80026b0 <HAL_Delay>
    L_Boundry_No_Bulb =  BH1750_ReadIlluminance_lux(&hbh1750);
 800136a:	480e      	ldr	r0, [pc, #56]	; (80013a4 <Light_Boundries+0x144>)
 800136c:	f7ff fdca 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 8001370:	ed87 0a01 	vstr	s0, [r7, #4]
    illuminance_int = L_Boundry_No_Bulb * 1000.0f;
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80013a8 <Light_Boundries+0x148>
 800137c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001384:	ee17 3a90 	vmov	r3, s15
 8001388:	617b      	str	r3, [r7, #20]
    Boundries[3] =  illuminance_int;
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	330c      	adds	r3, #12
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	601a      	str	r2, [r3, #0]





  return Boundries;
 8001392:	69bb      	ldr	r3, [r7, #24]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	42c60000 	.word	0x42c60000
 80013a0:	20000010 	.word	0x20000010
 80013a4:	20000000 	.word	0x20000000
 80013a8:	447a0000 	.word	0x447a0000
 80013ac:	00000000 	.word	0x00000000

080013b0 <PID_GetOutput>:
  hpid->e_int = 0.0f;
  hpid->d_prev = 0.0f;
}
 
float PID_GetOutput(PID_HandleTypeDef* hpid, float yref, float y)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	; 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80013bc:	edc7 0a01 	vstr	s1, [r7, #4]
  float u;     // control signal (before saturation)
  float u_sat; // control signal (after saturation)
  float e = yref - y; // control error
 80013c0:	ed97 7a02 	vldr	s14, [r7, #8]
 80013c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013cc:	edc7 7a06 	vstr	s15, [r7, #24]

  // PID algorithm based on MATLAB doc
  // 1/s = 1 / (z - 1)

  /* Integral */
  hpid->e_int += hpid->Ki * hpid->Ts * e;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	edd3 6a01 	vldr	s13, [r3, #4]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	edd3 7a04 	vldr	s15, [r3, #16]
 80013e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80013ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	edc3 7a06 	vstr	s15, [r3, #24]

  /* Derivative */
  hpid->d_prev = (hpid->Kd*hpid->N)*(e - hpid->e_prev) + (1.0f - hpid->N*hpid->Ts)*hpid->d_prev;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	edd3 7a03 	vldr	s15, [r3, #12]
 8001404:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	edd3 7a05 	vldr	s15, [r3, #20]
 800140e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001412:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	edd3 7a04 	vldr	s15, [r3, #16]
 8001426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800142e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	edd3 7a07 	vldr	s15, [r3, #28]
 8001438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	edc3 7a07 	vstr	s15, [r3, #28]
  hpid->e_prev = e;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	615a      	str	r2, [r3, #20]

  /* Output */
  u = (hpid->Kp * e) + hpid->e_int + hpid->d_prev;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	ed93 7a00 	vldr	s14, [r3]
 8001452:	edd7 7a06 	vldr	s15, [r7, #24]
 8001456:	ee27 7a27 	vmul.f32	s14, s14, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001460:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	edd3 7a07 	vldr	s15, [r3, #28]
 800146a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146e:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Saturation */
  if( u > hpid->LimitUpper )
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	edd3 7a08 	vldr	s15, [r3, #32]
 8001478:	ed97 7a05 	vldr	s14, [r7, #20]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd03      	ble.n	800148e <PID_GetOutput+0xde>
	  u_sat = hpid->LimitUpper;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6a1b      	ldr	r3, [r3, #32]
 800148a:	61fb      	str	r3, [r7, #28]
 800148c:	e00f      	b.n	80014ae <PID_GetOutput+0xfe>
  else if( u < hpid->LimitLower )
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001494:	ed97 7a05 	vldr	s14, [r7, #20]
 8001498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a0:	d503      	bpl.n	80014aa <PID_GetOutput+0xfa>
	  u_sat = hpid->LimitLower;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e001      	b.n	80014ae <PID_GetOutput+0xfe>
  else
	  u_sat = u;
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	61fb      	str	r3, [r7, #28]

  /* Anti wind-up */
  if( u != u_sat)
 80014ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80014b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80014b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80014ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014be:	d013      	beq.n	80014e8 <PID_GetOutput+0x138>
  	hpid->e_int -= hpid->Ki * hpid->Ts * e;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	ed93 7a06 	vldr	s14, [r3, #24]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80014d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80014d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80014da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	edc3 7a06 	vstr	s15, [r3, #24]

  return u_sat;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	ee07 3a90 	vmov	s15, r3
}
 80014ee:	eeb0 0a67 	vmov.f32	s0, s15
 80014f2:	3724      	adds	r7, #36	; 0x24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <PWM_Init>:
  * @brief Initialize PWM output
  * @param[in/out] hpwm   : PWM output handler
  * @retval None
  */
void PWM_Init(PWM_Handle_TypeDef* hpwm)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  PWM_WriteDuty(hpwm, hpwm->Duty);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	edd3 7a02 	vldr	s15, [r3, #8]
 800150a:	eeb0 0a67 	vmov.f32	s0, s15
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f80c 	bl	800152c <PWM_WriteDuty>
  HAL_TIM_PWM_Start(hpwm->Timer, hpwm->Channel);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f003 fc8e 	bl	8004e40 <HAL_TIM_PWM_Start>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <PWM_WriteDuty>:
  * @param[in/out] hpwm   : PWM output handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void PWM_WriteDuty(PWM_Handle_TypeDef* hpwm, float duty)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	ed87 0a00 	vstr	s0, [r7]
  // Saturate duty cycle value
  if(duty < 0.0f)
 8001538:	edd7 7a00 	vldr	s15, [r7]
 800153c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	d503      	bpl.n	800154e <PWM_WriteDuty+0x22>
    duty = 0.0;
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	e00a      	b.n	8001564 <PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 800154e:	edd7 7a00 	vldr	s15, [r7]
 8001552:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001610 <PWM_WriteDuty+0xe4>
 8001556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	dd01      	ble.n	8001564 <PWM_WriteDuty+0x38>
    duty = 100.0f;
 8001560:	4b2c      	ldr	r3, [pc, #176]	; (8001614 <PWM_WriteDuty+0xe8>)
 8001562:	603b      	str	r3, [r7, #0]
  // Write duty to handle field
  hpwm->Duty = duty;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	609a      	str	r2, [r3, #8]
  // Compute Capture/Compare Register value
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hpwm->Timer)+1)) / 100;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001572:	3301      	adds	r3, #1
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800157c:	edd7 7a00 	vldr	s15, [r7]
 8001580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001584:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001610 <PWM_WriteDuty+0xe4>
 8001588:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800158c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001590:	ee17 3a90 	vmov	r3, s15
 8001594:	60fb      	str	r3, [r7, #12]
  // Write value to register
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d105      	bne.n	80015aa <PWM_WriteDuty+0x7e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68fa      	ldr	r2, [r7, #12]
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015a8:	e02c      	b.n	8001604 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b04      	cmp	r3, #4
 80015b0:	d105      	bne.n	80015be <PWM_WriteDuty+0x92>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6393      	str	r3, [r2, #56]	; 0x38
}
 80015bc:	e022      	b.n	8001604 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b08      	cmp	r3, #8
 80015c4:	d105      	bne.n	80015d2 <PWM_WriteDuty+0xa6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80015d0:	e018      	b.n	8001604 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d105      	bne.n	80015e6 <PWM_WriteDuty+0xba>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80015e4:	e00e      	b.n	8001604 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b10      	cmp	r3, #16
 80015ec:	d105      	bne.n	80015fa <PWM_WriteDuty+0xce>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80015f8:	e004      	b.n	8001604 <PWM_WriteDuty+0xd8>
  __HAL_TIM_SET_COMPARE(hpwm->Timer, hpwm->Channel, COMPARE);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	42c80000 	.word	0x42c80000
 8001614:	42c80000 	.word	0x42c80000

08001618 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08e      	sub	sp, #56	; 0x38
 800161c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	4baf      	ldr	r3, [pc, #700]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4aae      	ldr	r2, [pc, #696]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001634:	f043 0310 	orr.w	r3, r3, #16
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4bac      	ldr	r3, [pc, #688]	; (80018ec <MX_GPIO_Init+0x2d4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0310 	and.w	r3, r3, #16
 8001642:	623b      	str	r3, [r7, #32]
 8001644:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4ba9      	ldr	r3, [pc, #676]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4aa8      	ldr	r2, [pc, #672]	; (80018ec <MX_GPIO_Init+0x2d4>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4ba6      	ldr	r3, [pc, #664]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165e:	4ba3      	ldr	r3, [pc, #652]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4aa2      	ldr	r2, [pc, #648]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4ba0      	ldr	r3, [pc, #640]	; (80018ec <MX_GPIO_Init+0x2d4>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	61bb      	str	r3, [r7, #24]
 8001674:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001676:	4b9d      	ldr	r3, [pc, #628]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a9c      	ldr	r2, [pc, #624]	; (80018ec <MX_GPIO_Init+0x2d4>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b9a      	ldr	r3, [pc, #616]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b97      	ldr	r3, [pc, #604]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a96      	ldr	r2, [pc, #600]	; (80018ec <MX_GPIO_Init+0x2d4>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b94      	ldr	r3, [pc, #592]	; (80018ec <MX_GPIO_Init+0x2d4>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b91      	ldr	r3, [pc, #580]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a90      	ldr	r2, [pc, #576]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b8e      	ldr	r3, [pc, #568]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016be:	4b8b      	ldr	r3, [pc, #556]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a8a      	ldr	r2, [pc, #552]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b88      	ldr	r3, [pc, #544]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016d6:	4b85      	ldr	r3, [pc, #532]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a84      	ldr	r2, [pc, #528]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b82      	ldr	r3, [pc, #520]	; (80018ec <MX_GPIO_Init+0x2d4>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 80016ee:	2200      	movs	r2, #0
 80016f0:	217c      	movs	r1, #124	; 0x7c
 80016f2:	487f      	ldr	r0, [pc, #508]	; (80018f0 <MX_GPIO_Init+0x2d8>)
 80016f4:	f001 fb50 	bl	8002d98 <HAL_GPIO_WritePin>
                          |LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_EN_Pin|LD6_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f248 0101 	movw	r1, #32769	; 0x8001
 80016fe:	487d      	ldr	r0, [pc, #500]	; (80018f4 <MX_GPIO_Init+0x2dc>)
 8001700:	f001 fb4a 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|LIGHT_BULB_Pin, GPIO_PIN_RESET);
 8001704:	2200      	movs	r2, #0
 8001706:	2109      	movs	r1, #9
 8001708:	487b      	ldr	r0, [pc, #492]	; (80018f8 <MX_GPIO_Init+0x2e0>)
 800170a:	f001 fb45 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	f244 0181 	movw	r1, #16513	; 0x4081
 8001714:	4879      	ldr	r0, [pc, #484]	; (80018fc <MX_GPIO_Init+0x2e4>)
 8001716:	f001 fb3f 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin, GPIO_PIN_RESET);
 800171a:	2200      	movs	r2, #0
 800171c:	f244 2140 	movw	r1, #16960	; 0x4240
 8001720:	4877      	ldr	r0, [pc, #476]	; (8001900 <MX_GPIO_Init+0x2e8>)
 8001722:	f001 fb39 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
 8001726:	237c      	movs	r3, #124	; 0x7c
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173a:	4619      	mov	r1, r3
 800173c:	486c      	ldr	r0, [pc, #432]	; (80018f0 <MX_GPIO_Init+0x2d8>)
 800173e:	f001 f97f 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001742:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001748:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	4619      	mov	r1, r3
 8001758:	4867      	ldr	r0, [pc, #412]	; (80018f8 <MX_GPIO_Init+0x2e0>)
 800175a:	f001 f971 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LD6_Pin;
 800175e:	f248 0301 	movw	r3, #32769	; 0x8001
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001764:	2301      	movs	r3, #1
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001774:	4619      	mov	r1, r3
 8001776:	485f      	ldr	r0, [pc, #380]	; (80018f4 <MX_GPIO_Init+0x2dc>)
 8001778:	f001 f962 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|LIGHT_BULB_Pin;
 800177c:	2309      	movs	r3, #9
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001780:	2301      	movs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001788:	2300      	movs	r3, #0
 800178a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001790:	4619      	mov	r1, r3
 8001792:	4859      	ldr	r0, [pc, #356]	; (80018f8 <MX_GPIO_Init+0x2e0>)
 8001794:	f001 f954 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001798:	2332      	movs	r3, #50	; 0x32
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017a8:	230b      	movs	r3, #11
 80017aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	4619      	mov	r1, r3
 80017b2:	4851      	ldr	r0, [pc, #324]	; (80018f8 <MX_GPIO_Init+0x2e0>)
 80017b4:	f001 f944 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017b8:	2386      	movs	r3, #134	; 0x86
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017c8:	230b      	movs	r3, #11
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d0:	4619      	mov	r1, r3
 80017d2:	484c      	ldr	r0, [pc, #304]	; (8001904 <MX_GPIO_Init+0x2ec>)
 80017d4:	f001 f934 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80017d8:	f244 0381 	movw	r3, #16513	; 0x4081
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4842      	ldr	r0, [pc, #264]	; (80018fc <MX_GPIO_Init+0x2e4>)
 80017f2:	f001 f925 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ON_Btn_Pin;
 80017f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001802:	2301      	movs	r3, #1
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ON_Btn_GPIO_Port, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	4839      	ldr	r0, [pc, #228]	; (80018f4 <MX_GPIO_Init+0x2dc>)
 800180e:	f001 f917 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OFF_Btn_Pin;
 8001812:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001818:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800181e:	2302      	movs	r3, #2
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OFF_Btn_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	4831      	ldr	r0, [pc, #196]	; (80018f0 <MX_GPIO_Init+0x2d8>)
 800182a:	f001 f909 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800182e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001840:	230b      	movs	r3, #11
 8001842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	482c      	ldr	r0, [pc, #176]	; (80018fc <MX_GPIO_Init+0x2e4>)
 800184c:	f001 f8f8 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|LD4_Pin|LD5_Pin;
 8001850:	f244 2340 	movw	r3, #16960	; 0x4240
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001866:	4619      	mov	r1, r3
 8001868:	4825      	ldr	r0, [pc, #148]	; (8001900 <MX_GPIO_Init+0x2e8>)
 800186a:	f001 f8e9 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800187e:	4619      	mov	r1, r3
 8001880:	481f      	ldr	r0, [pc, #124]	; (8001900 <MX_GPIO_Init+0x2e8>)
 8001882:	f001 f8dd 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001886:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001898:	230a      	movs	r3, #10
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a0:	4619      	mov	r1, r3
 80018a2:	4818      	ldr	r0, [pc, #96]	; (8001904 <MX_GPIO_Init+0x2ec>)
 80018a4:	f001 f8cc 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ae:	2300      	movs	r3, #0
 80018b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	4619      	mov	r1, r3
 80018bc:	4811      	ldr	r0, [pc, #68]	; (8001904 <MX_GPIO_Init+0x2ec>)
 80018be:	f001 f8bf 	bl	8002a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80018c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d0:	2303      	movs	r3, #3
 80018d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018d4:	230b      	movs	r3, #11
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018dc:	4619      	mov	r1, r3
 80018de:	4808      	ldr	r0, [pc, #32]	; (8001900 <MX_GPIO_Init+0x2e8>)
 80018e0:	f001 f8ae 	bl	8002a40 <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3738      	adds	r7, #56	; 0x38
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40021400 	.word	0x40021400
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020400 	.word	0x40020400
 8001900:	40021800 	.word	0x40021800
 8001904:	40020000 	.word	0x40020000

08001908 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_I2C1_Init+0x74>)
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <MX_I2C1_Init+0x78>)
 8001910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_I2C1_Init+0x74>)
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <MX_I2C1_Init+0x7c>)
 8001916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_I2C1_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_I2C1_Init+0x74>)
 8001920:	2201      	movs	r2, #1
 8001922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001924:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_I2C1_Init+0x74>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_I2C1_Init+0x74>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_I2C1_Init+0x74>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_I2C1_Init+0x74>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_I2C1_Init+0x74>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001942:	480e      	ldr	r0, [pc, #56]	; (800197c <MX_I2C1_Init+0x74>)
 8001944:	f001 fa42 	bl	8002dcc <HAL_I2C_Init>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800194e:	f000 fa41 	bl	8001dd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001952:	2100      	movs	r1, #0
 8001954:	4809      	ldr	r0, [pc, #36]	; (800197c <MX_I2C1_Init+0x74>)
 8001956:	f001 ff1f 	bl	8003798 <HAL_I2CEx_ConfigAnalogFilter>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001960:	f000 fa38 	bl	8001dd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001964:	2100      	movs	r1, #0
 8001966:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_I2C1_Init+0x74>)
 8001968:	f001 ff61 	bl	800382e <HAL_I2CEx_ConfigDigitalFilter>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001972:	f000 fa2f 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200000d0 	.word	0x200000d0
 8001980:	40005400 	.word	0x40005400
 8001984:	20404768 	.word	0x20404768

08001988 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b0aa      	sub	sp, #168	; 0xa8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001990:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2284      	movs	r2, #132	; 0x84
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f005 fd44 	bl	8007436 <memset>
  if(i2cHandle->Instance==I2C1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_I2C_MspInit+0xb4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d13c      	bne.n	8001a32 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80019b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80019be:	2300      	movs	r3, #0
 80019c0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fca8 	bl	800431c <HAL_RCCEx_PeriphCLKConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019d2:	f000 f9ff 	bl	8001dd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019f6:	2312      	movs	r3, #18
 80019f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a12:	4619      	mov	r1, r3
 8001a14:	480b      	ldr	r0, [pc, #44]	; (8001a44 <HAL_I2C_MspInit+0xbc>)
 8001a16:	f001 f813 	bl	8002a40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 8001a20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a24:	6413      	str	r3, [r2, #64]	; 0x40
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_I2C_MspInit+0xb8>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a32:	bf00      	nop
 8001a34:	37a8      	adds	r7, #168	; 0xa8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40005400 	.word	0x40005400
 8001a40:	40023800 	.word	0x40023800
 8001a44:	40020400 	.word	0x40020400

08001a48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  if(htim == &htim7)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a48      	ldr	r2, [pc, #288]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	f040 8088 	bne.w	8001b6a <HAL_TIM_PeriodElapsedCallback+0x122>
  {
    static unsigned int cnt = 0;
    cnt++;
 8001a5a:	4b47      	ldr	r3, [pc, #284]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a62:	6013      	str	r3, [r2, #0]
    Illuminance_lux = BH1750_ReadIlluminance_lux(&hbh1750);
 8001a64:	4845      	ldr	r0, [pc, #276]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001a66:	f7ff fa4d 	bl	8000f04 <BH1750_ReadIlluminance_lux>
 8001a6a:	eef0 7a40 	vmov.f32	s15, s0
 8001a6e:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a70:	edc3 7a00 	vstr	s15, [r3]
    Illuminance_lux_Int = Illuminance_lux * 1000.0f;
 8001a74:	4b42      	ldr	r3, [pc, #264]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001b84 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8001a7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a86:	ee17 2a90 	vmov	r2, s15
 8001a8a:	4b3f      	ldr	r3, [pc, #252]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a8c:	601a      	str	r2, [r3, #0]

    duty_pid = PID_GetOutput(&hpid1, lux_ref, Illuminance_lux_Int);  // [%]
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	ee07 3a10 	vmov	s14, r3
 8001aa2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001aa6:	eef0 0a47 	vmov.f32	s1, s14
 8001aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8001aae:	4838      	ldr	r0, [pc, #224]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001ab0:	f7ff fc7e 	bl	80013b0 <PID_GetOutput>
 8001ab4:	eef0 7a40 	vmov.f32	s15, s0
 8001ab8:	4b36      	ldr	r3, [pc, #216]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001aba:	edc3 7a00 	vstr	s15, [r3]
    duty_p = duty_pid;
 8001abe:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a35      	ldr	r2, [pc, #212]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001ac4:	6013      	str	r3, [r2, #0]
    if(duty_pid > 99)
 8001ac6:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001b9c <HAL_TIM_PeriodElapsedCallback+0x154>
 8001ad0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	dd02      	ble.n	8001ae0 <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      duty_pid = 99;
 8001ada:	4b2e      	ldr	r3, [pc, #184]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001adc:	4a30      	ldr	r2, [pc, #192]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001ade:	601a      	str	r2, [r3, #0]
    }
    LED_PWM_WriteDuty(&hld1,duty_pid );
 8001ae0:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aea:	482e      	ldr	r0, [pc, #184]	; (8001ba4 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001aec:	f7ff fb92 	bl	8001214 <LED_PWM_WriteDuty>


    if(cnt == 5)
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d138      	bne.n	8001b6a <HAL_TIM_PeriodElapsedCallback+0x122>
    {
      uint8_t tx_buffer[32];
      int tx_msg_len = sprintf((char*)tx_buffer, "Illuminance: %5u.%03u\r", Illuminance_lux_Int / 1000, Illuminance_lux_Int % 1000);
 8001af8:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2a      	ldr	r2, [pc, #168]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0999      	lsrs	r1, r3, #6
 8001b04:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8001b0e:	099b      	lsrs	r3, r3, #6
 8001b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b14:	fb00 f303 	mul.w	r3, r0, r3
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	f107 000c 	add.w	r0, r7, #12
 8001b1e:	460a      	mov	r2, r1
 8001b20:	4922      	ldr	r1, [pc, #136]	; (8001bac <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001b22:	f005 fc25 	bl	8007370 <siprintf>
 8001b26:	62f8      	str	r0, [r7, #44]	; 0x2c
      HAL_UART_Transmit(&huart3, tx_buffer, tx_msg_len, 100);
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	f107 010c 	add.w	r1, r7, #12
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	481f      	ldr	r0, [pc, #124]	; (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001b34:	f004 fa5c 	bl	8005ff0 <HAL_UART_Transmit>
      cnt = 0;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
      LCD_Illuminance_lux = Illuminance_lux_Int;
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b4c:	edc3 7a00 	vstr	s15, [r3]

      gcvt(LCD_Illuminance_lux,6,buffer); //Przepisz wartość do buffera
 8001b50:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd17 	bl	8000588 <__aeabi_f2d>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4916      	ldr	r1, [pc, #88]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001b60:	2006      	movs	r0, #6
 8001b62:	ec43 2b10 	vmov	d0, r2, r3
 8001b66:	f005 fb1d 	bl	80071a4 <gcvt>
    }
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3730      	adds	r7, #48	; 0x30
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200001f8 	.word	0x200001f8
 8001b78:	20000158 	.word	0x20000158
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000124 	.word	0x20000124
 8001b84:	447a0000 	.word	0x447a0000
 8001b88:	20000128 	.word	0x20000128
 8001b8c:	20000048 	.word	0x20000048
 8001b90:	20000020 	.word	0x20000020
 8001b94:	20000150 	.word	0x20000150
 8001b98:	20000154 	.word	0x20000154
 8001b9c:	42c60000 	.word	0x42c60000
 8001ba0:	42c60000 	.word	0x42c60000
 8001ba4:	20000010 	.word	0x20000010
 8001ba8:	10624dd3 	.word	0x10624dd3
 8001bac:	08009a78 	.word	0x08009a78
 8001bb0:	20000290 	.word	0x20000290
 8001bb4:	2000012c 	.word	0x2000012c
 8001bb8:	20000130 	.word	0x20000130

08001bbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bbc:	b5b0      	push	{r4, r5, r7, lr}
 8001bbe:	b096      	sub	sp, #88	; 0x58
 8001bc0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bc2:	f000 fd18 	bl	80025f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc6:	f000 f897 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bca:	f7ff fd25 	bl	8001618 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001bce:	f000 fc51 	bl	8002474 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001bd2:	f7ff fe99 	bl	8001908 <MX_I2C1_Init>
  MX_TIM9_Init();
 8001bd6:	f000 fb4b 	bl	8002270 <MX_TIM9_Init>
  MX_TIM7_Init();
 8001bda:	f000 fb11 	bl	8002200 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001bde:	f000 fa97 	bl	8002110 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001be2:	f000 fa41 	bl	8002068 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  float Illuminance_lux_min = 0.0f;
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	643b      	str	r3, [r7, #64]	; 0x40
  float Illuminance_lux_max = 0.0f;
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

  int size = 4;
 8001bf2:	2304      	movs	r3, #4
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38


  BH1750_Init(&hbh1750);
 8001bf6:	4834      	ldr	r0, [pc, #208]	; (8001cc8 <main+0x10c>)
 8001bf8:	f7ff f95e 	bl	8000eb8 <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001bfc:	4833      	ldr	r0, [pc, #204]	; (8001ccc <main+0x110>)
 8001bfe:	f003 f845 	bl	8004c8c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 8001c02:	4833      	ldr	r0, [pc, #204]	; (8001cd0 <main+0x114>)
 8001c04:	f002 ffd2 	bl	8004bac <HAL_TIM_Base_Start>
  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
  LED_PWM_Init(&hld1);
 8001c08:	4832      	ldr	r0, [pc, #200]	; (8001cd4 <main+0x118>)
 8001c0a:	f7ff fae3 	bl	80011d4 <LED_PWM_Init>


  //Bulb_State(1);

  //Swtórz granice światła
  int* tab =Light_Boundries();
 8001c0e:	f7ff fb27 	bl	8001260 <Light_Boundries>
 8001c12:	4603      	mov	r3, r0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  free(tab);
 8001c16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c18:	f005 fa10 	bl	800703c <free>
  //Ustaw LCD
  // Lcd_PortType ports[] = { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
   Lcd_PortType ports[] = { GPIOE, GPIOE, GPIOE, GPIOE };
 8001c1c:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <main+0x11c>)
 8001c1e:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8001c22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
   Lcd_PinType pins[] = {GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5};
 8001c28:	4a2c      	ldr	r2, [pc, #176]	; (8001cdc <main+0x120>)
 8001c2a:	f107 031c 	add.w	r3, r7, #28
 8001c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c32:	e883 0003 	stmia.w	r3, {r0, r1}

   // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
   lcd = Lcd_create(ports, pins, GPIOE, GPIO_PIN_6, GPIOF, GPIO_PIN_0, LCD_4_BIT_MODE);
 8001c36:	4c2a      	ldr	r4, [pc, #168]	; (8001ce0 <main+0x124>)
 8001c38:	4638      	mov	r0, r7
 8001c3a:	f107 021c 	add.w	r2, r7, #28
 8001c3e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001c42:	2300      	movs	r3, #0
 8001c44:	9303      	str	r3, [sp, #12]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <main+0x128>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2340      	movs	r3, #64	; 0x40
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <main+0x12c>)
 8001c54:	f7ff f994 	bl	8000f80 <Lcd_create>
 8001c58:	4625      	mov	r5, r4
 8001c5a:	463c      	mov	r4, r7
 8001c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c60:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c64:	e885 0003 	stmia.w	r5, {r0, r1}

   //Wyświetlanie napisu
   Lcd_cursor(&lcd, 0,0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	481c      	ldr	r0, [pc, #112]	; (8001ce0 <main+0x124>)
 8001c6e:	f7ff f9fb 	bl	8001068 <Lcd_cursor>
              Lcd_string(&lcd, "Pomiar w lux ");
 8001c72:	491e      	ldr	r1, [pc, #120]	; (8001cec <main+0x130>)
 8001c74:	481a      	ldr	r0, [pc, #104]	; (8001ce0 <main+0x124>)
 8001c76:	f7ff f9d7 	bl	8001028 <Lcd_string>

    /* USER CODE BEGIN 3 */

    //LCD
        //Wypisz wartość lux
        Lcd_cursor(&lcd, 1,7);
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <main+0x124>)
 8001c80:	f7ff f9f2 	bl	8001068 <Lcd_cursor>
                  Lcd_string(&lcd, buffer);
 8001c84:	491a      	ldr	r1, [pc, #104]	; (8001cf0 <main+0x134>)
 8001c86:	4816      	ldr	r0, [pc, #88]	; (8001ce0 <main+0x124>)
 8001c88:	f7ff f9ce 	bl	8001028 <Lcd_string>
                  //usun poprzednie znaki
        for (int i = 0; i < 6; ++i) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001c90:	e016      	b.n	8001cc0 <main+0x104>
                            if (buffer[i] == NULL) {
 8001c92:	4a17      	ldr	r2, [pc, #92]	; (8001cf0 <main+0x134>)
 8001c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10d      	bne.n	8001cba <main+0xfe>
                              Lcd_cursor(&lcd, 1,7 + i);
 8001c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	3307      	adds	r3, #7
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	2101      	movs	r1, #1
 8001caa:	480d      	ldr	r0, [pc, #52]	; (8001ce0 <main+0x124>)
 8001cac:	f7ff f9dc 	bl	8001068 <Lcd_cursor>
                                Lcd_string(&lcd, "    ");
 8001cb0:	4910      	ldr	r1, [pc, #64]	; (8001cf4 <main+0x138>)
 8001cb2:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <main+0x124>)
 8001cb4:	f7ff f9b8 	bl	8001028 <Lcd_string>
                                continue;
 8001cb8:	bf00      	nop
        for (int i = 0; i < 6; ++i) {
 8001cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	647b      	str	r3, [r7, #68]	; 0x44
 8001cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	dde5      	ble.n	8001c92 <main+0xd6>
        Lcd_cursor(&lcd, 1,7);
 8001cc6:	e7d8      	b.n	8001c7a <main+0xbe>
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	200001f8 	.word	0x200001f8
 8001cd0:	20000160 	.word	0x20000160
 8001cd4:	20000010 	.word	0x20000010
 8001cd8:	08009aa8 	.word	0x08009aa8
 8001cdc:	08009ab8 	.word	0x08009ab8
 8001ce0:	20000138 	.word	0x20000138
 8001ce4:	40021400 	.word	0x40021400
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08009a90 	.word	0x08009a90
 8001cf0:	20000130 	.word	0x20000130
 8001cf4:	08009aa0 	.word	0x08009aa0

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	; 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2230      	movs	r2, #48	; 0x30
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f005 fb95 	bl	8007436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d1c:	f001 fdd4 	bl	80038c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b2a      	ldr	r3, [pc, #168]	; (8001dcc <SystemClock_Config+0xd4>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <SystemClock_Config+0xd4>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2c:	4b27      	ldr	r3, [pc, #156]	; (8001dcc <SystemClock_Config+0xd4>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <SystemClock_Config+0xd8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a24      	ldr	r2, [pc, #144]	; (8001dd0 <SystemClock_Config+0xd8>)
 8001d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d42:	6013      	str	r3, [r2, #0]
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <SystemClock_Config+0xd8>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d4c:	607b      	str	r3, [r7, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d50:	2301      	movs	r3, #1
 8001d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d54:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d64:	2304      	movs	r3, #4
 8001d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001d68:	23d8      	movs	r3, #216	; 0xd8
 8001d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001d70:	2303      	movs	r3, #3
 8001d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fe05 	bl	8003988 <HAL_RCC_OscConfig>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001d84:	f000 f826 	bl	8001dd4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d88:	f001 fdae 	bl	80038e8 <HAL_PWREx_EnableOverDrive>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001d92:	f000 f81f 	bl	8001dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d96:	230f      	movs	r3, #15
 8001d98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001da2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001da8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001dac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2107      	movs	r1, #7
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 f88b 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001dc0:	f000 f808 	bl	8001dd4 <Error_Handler>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3750      	adds	r7, #80	; 0x50
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000

08001dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd8:	b672      	cpsid	i
}
 8001dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <Error_Handler+0x8>
	...

08001de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_MspInit+0x44>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_MspInit+0x44>)
 8001dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_MspInit+0x44>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_MspInit+0x44>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	4a08      	ldr	r2, [pc, #32]	; (8001e24 <HAL_MspInit+0x44>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_MspInit+0x44>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <NMI_Handler+0x4>

08001e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e32:	e7fe      	b.n	8001e32 <HardFault_Handler+0x4>

08001e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e38:	e7fe      	b.n	8001e38 <MemManage_Handler+0x4>

08001e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <BusFault_Handler+0x4>

08001e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <UsageFault_Handler+0x4>

08001e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e74:	f000 fbfc 	bl	8002670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <TIM3_IRQHandler+0x10>)
 8001e82:	f003 f8d7 	bl	8005034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200001ac 	.word	0x200001ac

08001e90 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <USART3_IRQHandler+0x10>)
 8001e96:	f004 f92f 	bl	80060f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20000290 	.word	0x20000290

08001ea4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ea8:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <TIM7_IRQHandler+0x10>)
 8001eaa:	f003 f8c3 	bl	8005034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200001f8 	.word	0x200001f8

08001eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_kill>:

int _kill(int pid, int sig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ed2:	f005 fb0f 	bl	80074f4 <__errno>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2216      	movs	r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
  return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_exit>:

void _exit (int status)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffe7 	bl	8001ec8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001efa:	e7fe      	b.n	8001efa <_exit+0x12>

08001efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
  }

  return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e009      	b.n	8001f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf1      	blt.n	8001f48 <_write+0x12>
  }
  return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:

int _close(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f96:	605a      	str	r2, [r3, #4]
  return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f005 fa74 	bl	80074f4 <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20050000 	.word	0x20050000
 8002038:	00000400 	.word	0x00000400
 800203c:	2000015c 	.word	0x2000015c
 8002040:	20000468 	.word	0x20000468

08002044 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800206e:	f107 0310 	add.w	r3, r7, #16
 8002072:	2200      	movs	r2, #0
 8002074:	601a      	str	r2, [r3, #0]
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	609a      	str	r2, [r3, #8]
 800207a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207c:	1d3b      	adds	r3, r7, #4
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <MX_TIM1_Init+0xa0>)
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <MX_TIM1_Init+0xa4>)
 800208a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 108-1;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM1_Init+0xa0>)
 800208e:	226b      	movs	r2, #107	; 0x6b
 8002090:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM1_Init+0xa0>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM1_Init+0xa0>)
 800209a:	f242 7210 	movw	r2, #10000	; 0x2710
 800209e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <MX_TIM1_Init+0xa0>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM1_Init+0xa0>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM1_Init+0xa0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_TIM1_Init+0xa0>)
 80020b4:	f002 fd22 	bl	8004afc <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80020be:	f7ff fe89 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	4619      	mov	r1, r3
 80020ce:	480e      	ldr	r0, [pc, #56]	; (8002108 <MX_TIM1_Init+0xa0>)
 80020d0:	f003 f9e4 	bl	800549c <HAL_TIM_ConfigClockSource>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80020da:	f7ff fe7b 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	4619      	mov	r1, r3
 80020ee:	4806      	ldr	r0, [pc, #24]	; (8002108 <MX_TIM1_Init+0xa0>)
 80020f0:	f003 fe84 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80020fa:	f7ff fe6b 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000160 	.word	0x20000160
 800210c:	40010000 	.word	0x40010000

08002110 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
 800212c:	605a      	str	r2, [r3, #4]
 800212e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002130:	463b      	mov	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
 800213a:	60da      	str	r2, [r3, #12]
 800213c:	611a      	str	r2, [r3, #16]
 800213e:	615a      	str	r2, [r3, #20]
 8002140:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <MX_TIM3_Init+0xe8>)
 8002144:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <MX_TIM3_Init+0xec>)
 8002146:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <MX_TIM3_Init+0xe8>)
 800214a:	2200      	movs	r2, #0
 800214c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <MX_TIM3_Init+0xe8>)
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002154:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <MX_TIM3_Init+0xe8>)
 8002156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <MX_TIM3_Init+0xe8>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002162:	4b25      	ldr	r3, [pc, #148]	; (80021f8 <MX_TIM3_Init+0xe8>)
 8002164:	2200      	movs	r2, #0
 8002166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002168:	4823      	ldr	r0, [pc, #140]	; (80021f8 <MX_TIM3_Init+0xe8>)
 800216a:	f002 fcc7 	bl	8004afc <HAL_TIM_Base_Init>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002174:	f7ff fe2e 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002178:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	4619      	mov	r1, r3
 8002184:	481c      	ldr	r0, [pc, #112]	; (80021f8 <MX_TIM3_Init+0xe8>)
 8002186:	f003 f989 	bl	800549c <HAL_TIM_ConfigClockSource>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002190:	f7ff fe20 	bl	8001dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002194:	4818      	ldr	r0, [pc, #96]	; (80021f8 <MX_TIM3_Init+0xe8>)
 8002196:	f002 fdf1 	bl	8004d7c <HAL_TIM_PWM_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80021a0:	f7ff fe18 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <MX_TIM3_Init+0xe8>)
 80021b4:	f003 fe22 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80021be:	f7ff fe09 	bl	8001dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021c2:	2360      	movs	r3, #96	; 0x60
 80021c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021d2:	463b      	mov	r3, r7
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4807      	ldr	r0, [pc, #28]	; (80021f8 <MX_TIM3_Init+0xe8>)
 80021da:	f003 f84b 	bl	8005274 <HAL_TIM_PWM_ConfigChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80021e4:	f7ff fdf6 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80021e8:	4803      	ldr	r0, [pc, #12]	; (80021f8 <MX_TIM3_Init+0xe8>)
 80021ea:	f000 f90b 	bl	8002404 <HAL_TIM_MspPostInit>

}
 80021ee:	bf00      	nop
 80021f0:	3738      	adds	r7, #56	; 0x38
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200001ac 	.word	0x200001ac
 80021fc:	40000400 	.word	0x40000400

08002200 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002206:	1d3b      	adds	r3, r7, #4
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <MX_TIM7_Init+0x68>)
 8002212:	4a16      	ldr	r2, [pc, #88]	; (800226c <MX_TIM7_Init+0x6c>)
 8002214:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1079;
 8002216:	4b14      	ldr	r3, [pc, #80]	; (8002268 <MX_TIM7_Init+0x68>)
 8002218:	f240 4237 	movw	r2, #1079	; 0x437
 800221c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <MX_TIM7_Init+0x68>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8002224:	4b10      	ldr	r3, [pc, #64]	; (8002268 <MX_TIM7_Init+0x68>)
 8002226:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800222a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222c:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <MX_TIM7_Init+0x68>)
 800222e:	2200      	movs	r2, #0
 8002230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <MX_TIM7_Init+0x68>)
 8002234:	f002 fc62 	bl	8004afc <HAL_TIM_Base_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800223e:	f7ff fdc9 	bl	8001dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002242:	2300      	movs	r3, #0
 8002244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002246:	2300      	movs	r3, #0
 8002248:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <MX_TIM7_Init+0x68>)
 8002250:	f003 fdd4 	bl	8005dfc <HAL_TIMEx_MasterConfigSynchronization>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800225a:	f7ff fdbb 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001f8 	.word	0x200001f8
 800226c:	40001400 	.word	0x40001400

08002270 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	463b      	mov	r3, r7
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002282:	4b16      	ldr	r3, [pc, #88]	; (80022dc <MX_TIM9_Init+0x6c>)
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <MX_TIM9_Init+0x70>)
 8002286:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 107;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_TIM9_Init+0x6c>)
 800228a:	226b      	movs	r2, #107	; 0x6b
 800228c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_TIM9_Init+0x6c>)
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002294:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_TIM9_Init+0x6c>)
 8002296:	f240 32e7 	movw	r2, #999	; 0x3e7
 800229a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_TIM9_Init+0x6c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_TIM9_Init+0x6c>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80022a8:	480c      	ldr	r0, [pc, #48]	; (80022dc <MX_TIM9_Init+0x6c>)
 80022aa:	f002 fc27 	bl	8004afc <HAL_TIM_Base_Init>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80022b4:	f7ff fd8e 	bl	8001dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022bc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80022be:	463b      	mov	r3, r7
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_TIM9_Init+0x6c>)
 80022c4:	f003 f8ea 	bl	800549c <HAL_TIM_ConfigClockSource>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80022ce:	f7ff fd81 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000244 	.word	0x20000244
 80022e0:	40014000 	.word	0x40014000

080022e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a3a      	ldr	r2, [pc, #232]	; (80023ec <HAL_TIM_Base_MspInit+0x108>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10c      	bne.n	8002320 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002306:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	4a39      	ldr	r2, [pc, #228]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	6453      	str	r3, [r2, #68]	; 0x44
 8002312:	4b37      	ldr	r3, [pc, #220]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800231e:	e060      	b.n	80023e2 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM3)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_TIM_Base_MspInit+0x110>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d114      	bne.n	8002354 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232a:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	4a30      	ldr	r2, [pc, #192]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002330:	f043 0302 	orr.w	r3, r3, #2
 8002334:	6413      	str	r3, [r2, #64]	; 0x40
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	201d      	movs	r0, #29
 8002348:	f000 fab1 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800234c:	201d      	movs	r0, #29
 800234e:	f000 faca 	bl	80028e6 <HAL_NVIC_EnableIRQ>
}
 8002352:	e046      	b.n	80023e2 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <HAL_TIM_Base_MspInit+0x114>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d114      	bne.n	8002388 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	6413      	str	r3, [r2, #64]	; 0x40
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f003 0320 	and.w	r3, r3, #32
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002376:	2200      	movs	r2, #0
 8002378:	2100      	movs	r1, #0
 800237a:	2037      	movs	r0, #55	; 0x37
 800237c:	f000 fa97 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002380:	2037      	movs	r0, #55	; 0x37
 8002382:	f000 fab0 	bl	80028e6 <HAL_NVIC_EnableIRQ>
}
 8002386:	e02c      	b.n	80023e2 <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM9)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_TIM_Base_MspInit+0x118>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d127      	bne.n	80023e2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a16      	ldr	r2, [pc, #88]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_TIM_Base_MspInit+0x10c>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023c2:	2308      	movs	r3, #8
 80023c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c6:	2302      	movs	r3, #2
 80023c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023ca:	2302      	movs	r3, #2
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023d2:	2303      	movs	r3, #3
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d6:	f107 031c 	add.w	r3, r7, #28
 80023da:	4619      	mov	r1, r3
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <HAL_TIM_Base_MspInit+0x11c>)
 80023de:	f000 fb2f 	bl	8002a40 <HAL_GPIO_Init>
}
 80023e2:	bf00      	nop
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40000400 	.word	0x40000400
 80023f8:	40001400 	.word	0x40001400
 80023fc:	40014000 	.word	0x40014000
 8002400:	40020000 	.word	0x40020000

08002404 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 030c 	add.w	r3, r7, #12
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a11      	ldr	r2, [pc, #68]	; (8002468 <HAL_TIM_MspPostInit+0x64>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d11b      	bne.n	800245e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_TIM_MspPostInit+0x68>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <HAL_TIM_MspPostInit+0x68>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_TIM_MspPostInit+0x68>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800243e:	2340      	movs	r3, #64	; 0x40
 8002440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002442:	2302      	movs	r3, #2
 8002444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800244e:	2302      	movs	r3, #2
 8002450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 030c 	add.w	r3, r7, #12
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_TIM_MspPostInit+0x6c>)
 800245a:	f000 faf1 	bl	8002a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	3720      	adds	r7, #32
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40000400 	.word	0x40000400
 800246c:	40023800 	.word	0x40023800
 8002470:	40020000 	.word	0x40020000

08002474 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_USART3_UART_Init+0x58>)
 800247a:	4a15      	ldr	r2, [pc, #84]	; (80024d0 <MX_USART3_UART_Init+0x5c>)
 800247c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800247e:	4b13      	ldr	r3, [pc, #76]	; (80024cc <MX_USART3_UART_Init+0x58>)
 8002480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USART3_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_USART3_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USART3_UART_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USART3_UART_Init+0x58>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USART3_UART_Init+0x58>)
 80024b8:	f003 fd4c 	bl	8005f54 <HAL_UART_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024c2:	f7ff fc87 	bl	8001dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000290 	.word	0x20000290
 80024d0:	40004800 	.word	0x40004800

080024d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b0aa      	sub	sp, #168	; 0xa8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024ec:	f107 0310 	add.w	r3, r7, #16
 80024f0:	2284      	movs	r2, #132	; 0x84
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f004 ff9e 	bl	8007436 <memset>
  if(uartHandle->Instance==USART3)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a26      	ldr	r2, [pc, #152]	; (8002598 <HAL_UART_MspInit+0xc4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d144      	bne.n	800258e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002508:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800250a:	2300      	movs	r3, #0
 800250c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4618      	mov	r0, r3
 8002514:	f001 ff02 	bl	800431c <HAL_RCCEx_PeriphCLKConfig>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800251e:	f7ff fc59 	bl	8001dd4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_UART_MspInit+0xc8>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_UART_MspInit+0xc8>)
 8002528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_UART_MspInit+0xc8>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800253a:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_UART_MspInit+0xc8>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a17      	ldr	r2, [pc, #92]	; (800259c <HAL_UART_MspInit+0xc8>)
 8002540:	f043 0308 	orr.w	r3, r3, #8
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_UART_MspInit+0xc8>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0308 	and.w	r3, r3, #8
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002552:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002556:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002560:	2301      	movs	r3, #1
 8002562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800256c:	2307      	movs	r3, #7
 800256e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002572:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002576:	4619      	mov	r1, r3
 8002578:	4809      	ldr	r0, [pc, #36]	; (80025a0 <HAL_UART_MspInit+0xcc>)
 800257a:	f000 fa61 	bl	8002a40 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2100      	movs	r1, #0
 8002582:	2027      	movs	r0, #39	; 0x27
 8002584:	f000 f993 	bl	80028ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002588:	2027      	movs	r0, #39	; 0x27
 800258a:	f000 f9ac 	bl	80028e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800258e:	bf00      	nop
 8002590:	37a8      	adds	r7, #168	; 0xa8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40004800 	.word	0x40004800
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020c00 	.word	0x40020c00

080025a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025a8:	480d      	ldr	r0, [pc, #52]	; (80025e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025aa:	490e      	ldr	r1, [pc, #56]	; (80025e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b0:	e002      	b.n	80025b8 <LoopCopyDataInit>

080025b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025b6:	3304      	adds	r3, #4

080025b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025bc:	d3f9      	bcc.n	80025b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c0:	4c0b      	ldr	r4, [pc, #44]	; (80025f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c4:	e001      	b.n	80025ca <LoopFillZerobss>

080025c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025c8:	3204      	adds	r2, #4

080025ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025cc:	d3fb      	bcc.n	80025c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ce:	f7ff fd39 	bl	8002044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025d2:	f004 ff95 	bl	8007500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025d6:	f7ff faf1 	bl	8001bbc <main>
  bx  lr    
 80025da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80025e8:	08009d40 	.word	0x08009d40
  ldr r2, =_sbss
 80025ec:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 80025f0:	20000468 	.word	0x20000468

080025f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC_IRQHandler>

080025f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fa:	2003      	movs	r0, #3
 80025fc:	f000 f94c 	bl	8002898 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002600:	2000      	movs	r0, #0
 8002602:	f000 f805 	bl	8002610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002606:	f7ff fbeb 	bl	8001de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002618:	4b12      	ldr	r3, [pc, #72]	; (8002664 <HAL_InitTick+0x54>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_InitTick+0x58>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	4619      	mov	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	fbb3 f3f1 	udiv	r3, r3, r1
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f967 	bl	8002902 <HAL_SYSTICK_Config>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e00e      	b.n	800265c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0f      	cmp	r3, #15
 8002642:	d80a      	bhi.n	800265a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002644:	2200      	movs	r2, #0
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	f04f 30ff 	mov.w	r0, #4294967295
 800264c:	f000 f92f 	bl	80028ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002650:	4a06      	ldr	r2, [pc, #24]	; (800266c <HAL_InitTick+0x5c>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	2000004c 	.word	0x2000004c
 8002668:	20000054 	.word	0x20000054
 800266c:	20000050 	.word	0x20000050

08002670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <HAL_IncTick+0x20>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_IncTick+0x24>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4413      	add	r3, r2
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_IncTick+0x24>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	20000054 	.word	0x20000054
 8002694:	20000318 	.word	0x20000318

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b03      	ldr	r3, [pc, #12]	; (80026ac <HAL_GetTick+0x14>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000318 	.word	0x20000318

080026b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7ff ffee 	bl	8002698 <HAL_GetTick>
 80026bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c8:	d005      	beq.n	80026d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ca:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <HAL_Delay+0x44>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d6:	bf00      	nop
 80026d8:	f7ff ffde 	bl	8002698 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d8f7      	bhi.n	80026d8 <HAL_Delay+0x28>
  {
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000054 	.word	0x20000054

080026f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <__NVIC_SetPriorityGrouping+0x40>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800270e:	68ba      	ldr	r2, [r7, #8]
 8002710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002714:	4013      	ands	r3, r2
 8002716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	4313      	orrs	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002726:	4a04      	ldr	r2, [pc, #16]	; (8002738 <__NVIC_SetPriorityGrouping+0x40>)
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	60d3      	str	r3, [r2, #12]
}
 800272c:	bf00      	nop
 800272e:	3714      	adds	r7, #20
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000ed00 	.word	0xe000ed00
 800273c:	05fa0000 	.word	0x05fa0000

08002740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002744:	4b04      	ldr	r3, [pc, #16]	; (8002758 <__NVIC_GetPriorityGrouping+0x18>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	f003 0307 	and.w	r3, r3, #7
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00

0800275c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db0b      	blt.n	8002786 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	f003 021f 	and.w	r2, r3, #31
 8002774:	4907      	ldr	r1, [pc, #28]	; (8002794 <__NVIC_EnableIRQ+0x38>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2001      	movs	r0, #1
 800277e:	fa00 f202 	lsl.w	r2, r0, r2
 8002782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	; (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	; (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	; 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	; 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
	...

08002854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002864:	d301      	bcc.n	800286a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002866:	2301      	movs	r3, #1
 8002868:	e00f      	b.n	800288a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800286a:	4a0a      	ldr	r2, [pc, #40]	; (8002894 <SysTick_Config+0x40>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3b01      	subs	r3, #1
 8002870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002872:	210f      	movs	r1, #15
 8002874:	f04f 30ff 	mov.w	r0, #4294967295
 8002878:	f7ff ff8e 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SysTick_Config+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002882:	4b04      	ldr	r3, [pc, #16]	; (8002894 <SysTick_Config+0x40>)
 8002884:	2207      	movs	r2, #7
 8002886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	e000e010 	.word	0xe000e010

08002898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ff29 	bl	80026f8 <__NVIC_SetPriorityGrouping>
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028c0:	f7ff ff3e 	bl	8002740 <__NVIC_GetPriorityGrouping>
 80028c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	6978      	ldr	r0, [r7, #20]
 80028cc:	f7ff ff8e 	bl	80027ec <NVIC_EncodePriority>
 80028d0:	4602      	mov	r2, r0
 80028d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff5d 	bl	8002798 <__NVIC_SetPriority>
}
 80028de:	bf00      	nop
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	4603      	mov	r3, r0
 80028ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff31 	bl	800275c <__NVIC_EnableIRQ>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff ffa2 	bl	8002854 <SysTick_Config>
 8002910:	4603      	mov	r3, r0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b084      	sub	sp, #16
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002926:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002928:	f7ff feb6 	bl	8002698 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d008      	beq.n	800294c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2280      	movs	r2, #128	; 0x80
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e052      	b.n	80029f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0216 	bic.w	r2, r2, #22
 800295a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800296a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d103      	bne.n	800297c <HAL_DMA_Abort+0x62>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0208 	bic.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299c:	e013      	b.n	80029c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800299e:	f7ff fe7b 	bl	8002698 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d90c      	bls.n	80029c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2203      	movs	r2, #3
 80029b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e015      	b.n	80029f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e4      	bne.n	800299e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d8:	223f      	movs	r2, #63	; 0x3f
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029fa:	b480      	push	{r7}
 80029fc:	b083      	sub	sp, #12
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d004      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2280      	movs	r2, #128	; 0x80
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e00c      	b.n	8002a32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2205      	movs	r2, #5
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a30:	2300      	movs	r3, #0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a56:	2300      	movs	r3, #0
 8002a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
 8002a5e:	e175      	b.n	8002d4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a60:	2201      	movs	r2, #1
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	f040 8164 	bne.w	8002d46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d005      	beq.n	8002a96 <HAL_GPIO_Init+0x56>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d130      	bne.n	8002af8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002acc:	2201      	movs	r2, #1
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	091b      	lsrs	r3, r3, #4
 8002ae2:	f003 0201 	and.w	r2, r3, #1
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0303 	and.w	r3, r3, #3
 8002b00:	2b03      	cmp	r3, #3
 8002b02:	d017      	beq.n	8002b34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	2203      	movs	r2, #3
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d123      	bne.n	8002b88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	220f      	movs	r2, #15
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	69ba      	ldr	r2, [r7, #24]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3208      	adds	r2, #8
 8002b82:	69b9      	ldr	r1, [r7, #24]
 8002b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	2203      	movs	r2, #3
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0203 	and.w	r2, r3, #3
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80be 	beq.w	8002d46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bca:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_GPIO_Init+0x324>)
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	4a65      	ldr	r2, [pc, #404]	; (8002d64 <HAL_GPIO_Init+0x324>)
 8002bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd6:	4b63      	ldr	r3, [pc, #396]	; (8002d64 <HAL_GPIO_Init+0x324>)
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002be2:	4a61      	ldr	r2, [pc, #388]	; (8002d68 <HAL_GPIO_Init+0x328>)
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	089b      	lsrs	r3, r3, #2
 8002be8:	3302      	adds	r3, #2
 8002bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a58      	ldr	r2, [pc, #352]	; (8002d6c <HAL_GPIO_Init+0x32c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d037      	beq.n	8002c7e <HAL_GPIO_Init+0x23e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a57      	ldr	r2, [pc, #348]	; (8002d70 <HAL_GPIO_Init+0x330>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d031      	beq.n	8002c7a <HAL_GPIO_Init+0x23a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a56      	ldr	r2, [pc, #344]	; (8002d74 <HAL_GPIO_Init+0x334>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d02b      	beq.n	8002c76 <HAL_GPIO_Init+0x236>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a55      	ldr	r2, [pc, #340]	; (8002d78 <HAL_GPIO_Init+0x338>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x232>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a54      	ldr	r2, [pc, #336]	; (8002d7c <HAL_GPIO_Init+0x33c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x22e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a53      	ldr	r2, [pc, #332]	; (8002d80 <HAL_GPIO_Init+0x340>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x22a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a52      	ldr	r2, [pc, #328]	; (8002d84 <HAL_GPIO_Init+0x344>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x226>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a51      	ldr	r2, [pc, #324]	; (8002d88 <HAL_GPIO_Init+0x348>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x222>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a50      	ldr	r2, [pc, #320]	; (8002d8c <HAL_GPIO_Init+0x34c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x21e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4f      	ldr	r2, [pc, #316]	; (8002d90 <HAL_GPIO_Init+0x350>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x21a>
 8002c56:	2309      	movs	r3, #9
 8002c58:	e012      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c5a:	230a      	movs	r3, #10
 8002c5c:	e010      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c5e:	2308      	movs	r3, #8
 8002c60:	e00e      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e00c      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c66:	2306      	movs	r3, #6
 8002c68:	e00a      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	e008      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e004      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_GPIO_Init+0x240>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f002 0203 	and.w	r2, r2, #3
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	4093      	lsls	r3, r2
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c90:	4935      	ldr	r1, [pc, #212]	; (8002d68 <HAL_GPIO_Init+0x328>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc2:	4a34      	ldr	r2, [pc, #208]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc8:	4b32      	ldr	r3, [pc, #200]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cec:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf2:	4b28      	ldr	r3, [pc, #160]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1c:	4b1d      	ldr	r3, [pc, #116]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d40:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <HAL_GPIO_Init+0x354>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	f67f ae86 	bls.w	8002a60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d54:	bf00      	nop
 8002d56:	bf00      	nop
 8002d58:	3724      	adds	r7, #36	; 0x24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020400 	.word	0x40020400
 8002d74:	40020800 	.word	0x40020800
 8002d78:	40020c00 	.word	0x40020c00
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	40021400 	.word	0x40021400
 8002d84:	40021800 	.word	0x40021800
 8002d88:	40021c00 	.word	0x40021c00
 8002d8c:	40022000 	.word	0x40022000
 8002d90:	40022400 	.word	0x40022400
 8002d94:	40013c00 	.word	0x40013c00

08002d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
 8002da4:	4613      	mov	r3, r2
 8002da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e07f      	b.n	8002ede <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d106      	bne.n	8002df8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f7fe fdc8 	bl	8001988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2224      	movs	r2, #36	; 0x24
 8002dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d107      	bne.n	8002e46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	e006      	b.n	8002e54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689a      	ldr	r2, [r3, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d104      	bne.n	8002e66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_I2C_Init+0x11c>)
 8002e72:	430b      	orrs	r3, r1
 8002e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691a      	ldr	r2, [r3, #16]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69d9      	ldr	r1, [r3, #28]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	02008000 	.word	0x02008000

08002eec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b088      	sub	sp, #32
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	460b      	mov	r3, r1
 8002efa:	817b      	strh	r3, [r7, #10]
 8002efc:	4613      	mov	r3, r2
 8002efe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	f040 80da 	bne.w	80030c2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d101      	bne.n	8002f1c <HAL_I2C_Master_Transmit+0x30>
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0d3      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1d8>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f24:	f7ff fbb8 	bl	8002698 <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	2319      	movs	r3, #25
 8002f30:	2201      	movs	r2, #1
 8002f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f9e6 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0be      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2221      	movs	r2, #33	; 0x21
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2210      	movs	r2, #16
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	893a      	ldrh	r2, [r7, #8]
 8002f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2bff      	cmp	r3, #255	; 0xff
 8002f76:	d90e      	bls.n	8002f96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	8979      	ldrh	r1, [r7, #10]
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_I2C_Master_Transmit+0x1e0>)
 8002f88:	9300      	str	r3, [sp, #0]
 8002f8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fbd0 	bl	8003734 <I2C_TransferConfig>
 8002f94:	e06c      	b.n	8003070 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	8979      	ldrh	r1, [r7, #10]
 8002fa8:	4b48      	ldr	r3, [pc, #288]	; (80030cc <HAL_I2C_Master_Transmit+0x1e0>)
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fbbf 	bl	8003734 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fb6:	e05b      	b.n	8003070 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	6a39      	ldr	r1, [r7, #32]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 f9e3 	bl	8003388 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e07b      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	781a      	ldrb	r2, [r3, #0]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d034      	beq.n	8003070 <HAL_I2C_Master_Transmit+0x184>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300a:	2b00      	cmp	r3, #0
 800300c:	d130      	bne.n	8003070 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	2200      	movs	r2, #0
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f975 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e04d      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2bff      	cmp	r3, #255	; 0xff
 8003030:	d90e      	bls.n	8003050 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	22ff      	movs	r2, #255	; 0xff
 8003036:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303c:	b2da      	uxtb	r2, r3
 800303e:	8979      	ldrh	r1, [r7, #10]
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 fb73 	bl	8003734 <I2C_TransferConfig>
 800304e:	e00f      	b.n	8003070 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305e:	b2da      	uxtb	r2, r3
 8003060:	8979      	ldrh	r1, [r7, #10]
 8003062:	2300      	movs	r3, #0
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fb62 	bl	8003734 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d19e      	bne.n	8002fb8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f9c2 	bl	8003408 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e01a      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2220      	movs	r2, #32
 8003094:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_I2C_Master_Transmit+0x1e4>)
 80030a2:	400b      	ands	r3, r1
 80030a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	e000      	b.n	80030c4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
  }
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	80002000 	.word	0x80002000
 80030d0:	fe00e800 	.word	0xfe00e800

080030d4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	461a      	mov	r2, r3
 80030e0:	460b      	mov	r3, r1
 80030e2:	817b      	strh	r3, [r7, #10]
 80030e4:	4613      	mov	r3, r2
 80030e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 80db 	bne.w	80032ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d101      	bne.n	8003104 <HAL_I2C_Master_Receive+0x30>
 8003100:	2302      	movs	r3, #2
 8003102:	e0d4      	b.n	80032ae <HAL_I2C_Master_Receive+0x1da>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800310c:	f7ff fac4 	bl	8002698 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	2319      	movs	r3, #25
 8003118:	2201      	movs	r2, #1
 800311a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f8f2 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e0bf      	b.n	80032ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2222      	movs	r2, #34	; 0x22
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2210      	movs	r2, #16
 800313a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	893a      	ldrh	r2, [r7, #8]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29b      	uxth	r3, r3
 800315c:	2bff      	cmp	r3, #255	; 0xff
 800315e:	d90e      	bls.n	800317e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	22ff      	movs	r2, #255	; 0xff
 8003164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316a:	b2da      	uxtb	r2, r3
 800316c:	8979      	ldrh	r1, [r7, #10]
 800316e:	4b52      	ldr	r3, [pc, #328]	; (80032b8 <HAL_I2C_Master_Receive+0x1e4>)
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fadc 	bl	8003734 <I2C_TransferConfig>
 800317c:	e06d      	b.n	800325a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <HAL_I2C_Master_Receive+0x1e4>)
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 facb 	bl	8003734 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800319e:	e05c      	b.n	800325a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	6a39      	ldr	r1, [r7, #32]
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 f96b 	bl	8003480 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e07c      	b.n	80032ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b29a      	uxth	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d034      	beq.n	800325a <HAL_I2C_Master_Receive+0x186>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d130      	bne.n	800325a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	6a3b      	ldr	r3, [r7, #32]
 80031fe:	2200      	movs	r2, #0
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f880 	bl	8003308 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e04d      	b.n	80032ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	2bff      	cmp	r3, #255	; 0xff
 800321a:	d90e      	bls.n	800323a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	22ff      	movs	r2, #255	; 0xff
 8003220:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003226:	b2da      	uxtb	r2, r3
 8003228:	8979      	ldrh	r1, [r7, #10]
 800322a:	2300      	movs	r3, #0
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fa7e 	bl	8003734 <I2C_TransferConfig>
 8003238:	e00f      	b.n	800325a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	b2da      	uxtb	r2, r3
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fa6d 	bl	8003734 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d19d      	bne.n	80031a0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	6a39      	ldr	r1, [r7, #32]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f8cd 	bl	8003408 <I2C_WaitOnSTOPFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e01a      	b.n	80032ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2220      	movs	r2, #32
 800327e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6859      	ldr	r1, [r3, #4]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_I2C_Master_Receive+0x1e8>)
 800328c:	400b      	ands	r3, r1
 800328e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	80002400 	.word	0x80002400
 80032bc:	fe00e800 	.word	0xfe00e800

080032c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d103      	bne.n	80032de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d007      	beq.n	80032fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	619a      	str	r2, [r3, #24]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	4613      	mov	r3, r2
 8003316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003318:	e022      	b.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003320:	d01e      	beq.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003322:	f7ff f9b9 	bl	8002698 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d302      	bcc.n	8003338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e00f      	b.n	8003380 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	4013      	ands	r3, r2
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	429a      	cmp	r2, r3
 800336e:	bf0c      	ite	eq
 8003370:	2301      	moveq	r3, #1
 8003372:	2300      	movne	r3, #0
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	429a      	cmp	r2, r3
 800337c:	d0cd      	beq.n	800331a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003394:	e02c      	b.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f8ea 	bl	8003574 <I2C_IsErrorOccurred>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e02a      	b.n	8003400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d01e      	beq.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b2:	f7ff f971 	bl	8002698 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d302      	bcc.n	80033c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d113      	bne.n	80033f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e007      	b.n	8003400 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d1cb      	bne.n	8003396 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003414:	e028      	b.n	8003468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	68b9      	ldr	r1, [r7, #8]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f8aa 	bl	8003574 <I2C_IsErrorOccurred>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e026      	b.n	8003478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800342a:	f7ff f935 	bl	8002698 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003444:	f043 0220 	orr.w	r2, r3, #32
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b20      	cmp	r3, #32
 8003474:	d1cf      	bne.n	8003416 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800348c:	e064      	b.n	8003558 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68b9      	ldr	r1, [r7, #8]
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f86e 	bl	8003574 <I2C_IsErrorOccurred>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e062      	b.n	8003568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	f003 0320 	and.w	r3, r3, #32
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d138      	bne.n	8003522 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d105      	bne.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e04e      	b.n	8003568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d107      	bne.n	80034e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2210      	movs	r2, #16
 80034de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2204      	movs	r2, #4
 80034e4:	645a      	str	r2, [r3, #68]	; 0x44
 80034e6:	e002      	b.n	80034ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2220      	movs	r2, #32
 80034f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b1b      	ldr	r3, [pc, #108]	; (8003570 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003502:	400b      	ands	r3, r1
 8003504:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e022      	b.n	8003568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7ff f8b9 	bl	8002698 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10f      	bne.n	8003558 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	f043 0220 	orr.w	r2, r3, #32
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e007      	b.n	8003568 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d193      	bne.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	fe00e800 	.word	0xfe00e800

08003574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	; 0x28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d068      	beq.n	8003672 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2210      	movs	r2, #16
 80035a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035a8:	e049      	b.n	800363e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b0:	d045      	beq.n	800363e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b2:	f7ff f871 	bl	8002698 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d302      	bcc.n	80035c8 <I2C_IsErrorOccurred+0x54>
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d13a      	bne.n	800363e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d121      	bne.n	8003630 <I2C_IsErrorOccurred+0xbc>
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035f2:	d01d      	beq.n	8003630 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035f4:	7cfb      	ldrb	r3, [r7, #19]
 80035f6:	2b20      	cmp	r3, #32
 80035f8:	d01a      	beq.n	8003630 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003608:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800360a:	f7ff f845 	bl	8002698 <HAL_GetTick>
 800360e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003610:	e00e      	b.n	8003630 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003612:	f7ff f841 	bl	8002698 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b19      	cmp	r3, #25
 800361e:	d907      	bls.n	8003630 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	f043 0320 	orr.w	r3, r3, #32
 8003626:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800362e:	e006      	b.n	800363e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b20      	cmp	r3, #32
 800363c:	d1e9      	bne.n	8003612 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b20      	cmp	r3, #32
 800364a:	d003      	beq.n	8003654 <I2C_IsErrorOccurred+0xe0>
 800364c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0aa      	beq.n	80035aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003658:	2b00      	cmp	r3, #0
 800365a:	d103      	bne.n	8003664 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2220      	movs	r2, #32
 8003662:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	f043 0304 	orr.w	r3, r3, #4
 800366a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f043 0308 	orr.w	r3, r3, #8
 80036ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00b      	beq.n	80036e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036c8:	6a3b      	ldr	r3, [r7, #32]
 80036ca:	f043 0302 	orr.w	r3, r3, #2
 80036ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d01c      	beq.n	8003722 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7ff fde9 	bl	80032c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <I2C_IsErrorOccurred+0x1bc>)
 80036fa:	400b      	ands	r3, r1
 80036fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003702:	6a3b      	ldr	r3, [r7, #32]
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2220      	movs	r2, #32
 800370e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003726:	4618      	mov	r0, r3
 8003728:	3728      	adds	r7, #40	; 0x28
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	fe00e800 	.word	0xfe00e800

08003734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	817b      	strh	r3, [r7, #10]
 8003742:	4613      	mov	r3, r2
 8003744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800374c:	7a7b      	ldrb	r3, [r7, #9]
 800374e:	041b      	lsls	r3, r3, #16
 8003750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003754:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	4313      	orrs	r3, r2
 800375e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003762:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	0d5b      	lsrs	r3, r3, #21
 800376e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003772:	4b08      	ldr	r3, [pc, #32]	; (8003794 <I2C_TransferConfig+0x60>)
 8003774:	430b      	orrs	r3, r1
 8003776:	43db      	mvns	r3, r3
 8003778:	ea02 0103 	and.w	r1, r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	430a      	orrs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003786:	bf00      	nop
 8003788:	371c      	adds	r7, #28
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	03ff63ff 	.word	0x03ff63ff

08003798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d138      	bne.n	8003820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e032      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	; 0x24
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6819      	ldr	r1, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
 8003836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	d139      	bne.n	80038b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800384e:	2302      	movs	r3, #2
 8003850:	e033      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2224      	movs	r2, #36	; 0x24
 800385e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f022 0201 	bic.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
	...

080038c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a04      	ldr	r2, [pc, #16]	; (80038e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]
}
 80038d8:	bf00      	nop
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40007000 	.word	0x40007000

080038e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_PWREx_EnableOverDrive+0x98>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	4a22      	ldr	r2, [pc, #136]	; (8003980 <HAL_PWREx_EnableOverDrive+0x98>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fc:	6413      	str	r3, [r2, #64]	; 0x40
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_PWREx_EnableOverDrive+0x98>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800390a:	4b1e      	ldr	r3, [pc, #120]	; (8003984 <HAL_PWREx_EnableOverDrive+0x9c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1d      	ldr	r2, [pc, #116]	; (8003984 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003914:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003916:	f7fe febf 	bl	8002698 <HAL_GetTick>
 800391a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800391c:	e009      	b.n	8003932 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800391e:	f7fe febb 	bl	8002698 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800392c:	d901      	bls.n	8003932 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e022      	b.n	8003978 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003932:	4b14      	ldr	r3, [pc, #80]	; (8003984 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800393e:	d1ee      	bne.n	800391e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003940:	4b10      	ldr	r3, [pc, #64]	; (8003984 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a0f      	ldr	r2, [pc, #60]	; (8003984 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800394c:	f7fe fea4 	bl	8002698 <HAL_GetTick>
 8003950:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003952:	e009      	b.n	8003968 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003954:	f7fe fea0 	bl	8002698 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003962:	d901      	bls.n	8003968 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e007      	b.n	8003978 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003968:	4b06      	ldr	r3, [pc, #24]	; (8003984 <HAL_PWREx_EnableOverDrive+0x9c>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003974:	d1ee      	bne.n	8003954 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3708      	adds	r7, #8
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	40007000 	.word	0x40007000

08003988 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003990:	2300      	movs	r3, #0
 8003992:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e291      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8087 	beq.w	8003aba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ac:	4b96      	ldr	r3, [pc, #600]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d00c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039b8:	4b93      	ldr	r3, [pc, #588]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d112      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
 80039c4:	4b90      	ldr	r3, [pc, #576]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039d0:	d10b      	bne.n	80039ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d2:	4b8d      	ldr	r3, [pc, #564]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d06c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x130>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d168      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e26b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x7a>
 80039f4:	4b84      	ldr	r3, [pc, #528]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a83      	ldr	r2, [pc, #524]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e02e      	b.n	8003a60 <HAL_RCC_OscConfig+0xd8>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x9c>
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7e      	ldr	r2, [pc, #504]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b7c      	ldr	r3, [pc, #496]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a7b      	ldr	r2, [pc, #492]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0xd8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0xc0>
 8003a2e:	4b76      	ldr	r3, [pc, #472]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a75      	ldr	r2, [pc, #468]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a72      	ldr	r2, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0xd8>
 8003a48:	4b6f      	ldr	r3, [pc, #444]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6e      	ldr	r2, [pc, #440]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a6b      	ldr	r2, [pc, #428]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fe fe16 	bl	8002698 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fe12 	bl	8002698 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e21f      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b61      	ldr	r3, [pc, #388]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe8>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fe02 	bl	8002698 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe fdfe 	bl	8002698 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e20b      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	4b57      	ldr	r3, [pc, #348]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x110>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d069      	beq.n	8003b9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac6:	4b50      	ldr	r3, [pc, #320]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ad2:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x190>
 8003ade:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	4b47      	ldr	r3, [pc, #284]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x17a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1df      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b41      	ldr	r3, [pc, #260]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	493d      	ldr	r1, [pc, #244]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	e040      	b.n	8003b9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d023      	beq.n	8003b68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a38      	ldr	r2, [pc, #224]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f043 0301 	orr.w	r3, r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fdb4 	bl	8002698 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe fdb0 	bl	8002698 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e1bd      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b46:	4b30      	ldr	r3, [pc, #192]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b52:	4b2d      	ldr	r3, [pc, #180]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4929      	ldr	r1, [pc, #164]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
 8003b66:	e018      	b.n	8003b9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b68:	4b27      	ldr	r3, [pc, #156]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a26      	ldr	r2, [pc, #152]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	f023 0301 	bic.w	r3, r3, #1
 8003b72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe fd90 	bl	8002698 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7c:	f7fe fd8c 	bl	8002698 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e199      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b8e:	4b1e      	ldr	r3, [pc, #120]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d038      	beq.n	8003c18 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d019      	beq.n	8003be2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bae:	4b16      	ldr	r3, [pc, #88]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	4a15      	ldr	r2, [pc, #84]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bba:	f7fe fd6d 	bl	8002698 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fd69 	bl	8002698 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e176      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x23a>
 8003be0:	e01a      	b.n	8003c18 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be6:	4a08      	ldr	r2, [pc, #32]	; (8003c08 <HAL_RCC_OscConfig+0x280>)
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fe fd53 	bl	8002698 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	e00a      	b.n	8003c0c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fe fd4f 	bl	8002698 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d903      	bls.n	8003c0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e15c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
 8003c08:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0c:	4b91      	ldr	r3, [pc, #580]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c10:	f003 0302 	and.w	r3, r3, #2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1ee      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 80a4 	beq.w	8003d6e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c26:	4b8b      	ldr	r3, [pc, #556]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b88      	ldr	r3, [pc, #544]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	4a87      	ldr	r2, [pc, #540]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3e:	4b85      	ldr	r3, [pc, #532]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4e:	4b82      	ldr	r3, [pc, #520]	; (8003e58 <HAL_RCC_OscConfig+0x4d0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c5a:	4b7f      	ldr	r3, [pc, #508]	; (8003e58 <HAL_RCC_OscConfig+0x4d0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a7e      	ldr	r2, [pc, #504]	; (8003e58 <HAL_RCC_OscConfig+0x4d0>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fe fd17 	bl	8002698 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fe fd13 	bl	8002698 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b64      	cmp	r3, #100	; 0x64
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e120      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	4b75      	ldr	r3, [pc, #468]	; (8003e58 <HAL_RCC_OscConfig+0x4d0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d106      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x31a>
 8003c94:	4b6f      	ldr	r3, [pc, #444]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a6e      	ldr	r2, [pc, #440]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	e02d      	b.n	8003cfe <HAL_RCC_OscConfig+0x376>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x33c>
 8003caa:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a69      	ldr	r2, [pc, #420]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	4a66      	ldr	r2, [pc, #408]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cbc:	f023 0304 	bic.w	r3, r3, #4
 8003cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc2:	e01c      	b.n	8003cfe <HAL_RCC_OscConfig+0x376>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b05      	cmp	r3, #5
 8003cca:	d10c      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x35e>
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	4a60      	ldr	r2, [pc, #384]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cd2:	f043 0304 	orr.w	r3, r3, #4
 8003cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd8:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cdc:	4a5d      	ldr	r2, [pc, #372]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce4:	e00b      	b.n	8003cfe <HAL_RCC_OscConfig+0x376>
 8003ce6:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a5a      	ldr	r2, [pc, #360]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cec:	f023 0301 	bic.w	r3, r3, #1
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf2:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf6:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003cf8:	f023 0304 	bic.w	r3, r3, #4
 8003cfc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d015      	beq.n	8003d32 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d06:	f7fe fcc7 	bl	8002698 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0c:	e00a      	b.n	8003d24 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0e:	f7fe fcc3 	bl	8002698 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e0ce      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d24:	4b4b      	ldr	r3, [pc, #300]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0ee      	beq.n	8003d0e <HAL_RCC_OscConfig+0x386>
 8003d30:	e014      	b.n	8003d5c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d32:	f7fe fcb1 	bl	8002698 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d38:	e00a      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3a:	f7fe fcad 	bl	8002698 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d50:	4b40      	ldr	r3, [pc, #256]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ee      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d105      	bne.n	8003d6e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d62:	4b3c      	ldr	r3, [pc, #240]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d66:	4a3b      	ldr	r2, [pc, #236]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a4 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d78:	4b36      	ldr	r3, [pc, #216]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 030c 	and.w	r3, r3, #12
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d06b      	beq.n	8003e5c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d149      	bne.n	8003e20 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d8c:	4b31      	ldr	r3, [pc, #196]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a30      	ldr	r2, [pc, #192]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d98:	f7fe fc7e 	bl	8002698 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fe fc7a 	bl	8002698 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e087      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	4b28      	ldr	r3, [pc, #160]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69da      	ldr	r2, [r3, #28]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	4313      	orrs	r3, r2
 8003de4:	4a1b      	ldr	r2, [pc, #108]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003de6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a18      	ldr	r2, [pc, #96]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe fc4e 	bl	8002698 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe fc4a 	bl	8002698 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e057      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f0      	beq.n	8003e00 <HAL_RCC_OscConfig+0x478>
 8003e1e:	e04f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e20:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fc34 	bl	8002698 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe fc30 	bl	8002698 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e03d      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e46:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_OscConfig+0x4cc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1f0      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4ac>
 8003e52:	e035      	b.n	8003ec0 <HAL_RCC_OscConfig+0x538>
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_RCC_OscConfig+0x544>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d028      	beq.n	8003ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d121      	bne.n	8003ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d11a      	bne.n	8003ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d111      	bne.n	8003ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800

08003ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0d0      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b6a      	ldr	r3, [pc, #424]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d910      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b67      	ldr	r3, [pc, #412]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 020f 	bic.w	r2, r3, #15
 8003efe:	4965      	ldr	r1, [pc, #404]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f06:	4b63      	ldr	r3, [pc, #396]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 030f 	and.w	r3, r3, #15
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e0b8      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f30:	4b59      	ldr	r3, [pc, #356]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a58      	ldr	r2, [pc, #352]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f48:	4b53      	ldr	r3, [pc, #332]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	4a52      	ldr	r2, [pc, #328]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f54:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	494d      	ldr	r1, [pc, #308]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d040      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d107      	bne.n	8003f8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d115      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e07f      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e073      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e06b      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4936      	ldr	r1, [pc, #216]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc4:	f7fe fb68 	bl	8002698 <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7fe fb64 	bl	8002698 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e053      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b27      	ldr	r3, [pc, #156]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d210      	bcs.n	8004024 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b24      	ldr	r3, [pc, #144]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 020f 	bic.w	r2, r3, #15
 800400a:	4922      	ldr	r1, [pc, #136]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4313      	orrs	r3, r2
 8004010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d001      	beq.n	8004024 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e032      	b.n	800408a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0304 	and.w	r3, r3, #4
 800402c:	2b00      	cmp	r3, #0
 800402e:	d008      	beq.n	8004042 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004030:	4b19      	ldr	r3, [pc, #100]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	4916      	ldr	r1, [pc, #88]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0308 	and.w	r3, r3, #8
 800404a:	2b00      	cmp	r3, #0
 800404c:	d009      	beq.n	8004062 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	490e      	ldr	r1, [pc, #56]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 800405e:	4313      	orrs	r3, r2
 8004060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004062:	f000 f821 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8004066:	4602      	mov	r2, r0
 8004068:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	091b      	lsrs	r3, r3, #4
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	490a      	ldr	r1, [pc, #40]	; (800409c <HAL_RCC_ClockConfig+0x1cc>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	fa22 f303 	lsr.w	r3, r2, r3
 800407a:	4a09      	ldr	r2, [pc, #36]	; (80040a0 <HAL_RCC_ClockConfig+0x1d0>)
 800407c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fac4 	bl	8002610 <HAL_InitTick>

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	bf00      	nop
 8004094:	40023c00 	.word	0x40023c00
 8004098:	40023800 	.word	0x40023800
 800409c:	08009ac4 	.word	0x08009ac4
 80040a0:	2000004c 	.word	0x2000004c
 80040a4:	20000050 	.word	0x20000050

080040a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b094      	sub	sp, #80	; 0x50
 80040ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	647b      	str	r3, [r7, #68]	; 0x44
 80040b4:	2300      	movs	r3, #0
 80040b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b8:	2300      	movs	r3, #0
 80040ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80040bc:	2300      	movs	r3, #0
 80040be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c0:	4b79      	ldr	r3, [pc, #484]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d00d      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x40>
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	f200 80e1 	bhi.w	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x34>
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d003      	beq.n	80040e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80040da:	e0db      	b.n	8004294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b73      	ldr	r3, [pc, #460]	; (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 80040de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e0:	e0db      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040e2:	4b73      	ldr	r3, [pc, #460]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040e6:	e0d8      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040e8:	4b6f      	ldr	r3, [pc, #444]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040f2:	4b6d      	ldr	r3, [pc, #436]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d063      	beq.n	80041c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040fe:	4b6a      	ldr	r3, [pc, #424]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	2200      	movs	r2, #0
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
 8004108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
 8004112:	2300      	movs	r3, #0
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
 8004116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800411a:	4622      	mov	r2, r4
 800411c:	462b      	mov	r3, r5
 800411e:	f04f 0000 	mov.w	r0, #0
 8004122:	f04f 0100 	mov.w	r1, #0
 8004126:	0159      	lsls	r1, r3, #5
 8004128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412c:	0150      	lsls	r0, r2, #5
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4621      	mov	r1, r4
 8004134:	1a51      	subs	r1, r2, r1
 8004136:	6139      	str	r1, [r7, #16]
 8004138:	4629      	mov	r1, r5
 800413a:	eb63 0301 	sbc.w	r3, r3, r1
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800414c:	4659      	mov	r1, fp
 800414e:	018b      	lsls	r3, r1, #6
 8004150:	4651      	mov	r1, sl
 8004152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004156:	4651      	mov	r1, sl
 8004158:	018a      	lsls	r2, r1, #6
 800415a:	4651      	mov	r1, sl
 800415c:	ebb2 0801 	subs.w	r8, r2, r1
 8004160:	4659      	mov	r1, fp
 8004162:	eb63 0901 	sbc.w	r9, r3, r1
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	4623      	mov	r3, r4
 8004180:	eb18 0303 	adds.w	r3, r8, r3
 8004184:	60bb      	str	r3, [r7, #8]
 8004186:	462b      	mov	r3, r5
 8004188:	eb49 0303 	adc.w	r3, r9, r3
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f04f 0300 	mov.w	r3, #0
 8004196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800419a:	4629      	mov	r1, r5
 800419c:	024b      	lsls	r3, r1, #9
 800419e:	4621      	mov	r1, r4
 80041a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041a4:	4621      	mov	r1, r4
 80041a6:	024a      	lsls	r2, r1, #9
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	2200      	movs	r2, #0
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041b8:	f7fc fd00 	bl	8000bbc <__aeabi_uldivmod>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4613      	mov	r3, r2
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	e058      	b.n	8004278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c6:	4b38      	ldr	r3, [pc, #224]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	2200      	movs	r2, #0
 80041ce:	4618      	mov	r0, r3
 80041d0:	4611      	mov	r1, r2
 80041d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041d6:	623b      	str	r3, [r7, #32]
 80041d8:	2300      	movs	r3, #0
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
 80041dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0159      	lsls	r1, r3, #5
 80041ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041f2:	0150      	lsls	r0, r2, #5
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4641      	mov	r1, r8
 80041fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80041fe:	4649      	mov	r1, r9
 8004200:	eb63 0b01 	sbc.w	fp, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004218:	ebb2 040a 	subs.w	r4, r2, sl
 800421c:	eb63 050b 	sbc.w	r5, r3, fp
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	00eb      	lsls	r3, r5, #3
 800422a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800422e:	00e2      	lsls	r2, r4, #3
 8004230:	4614      	mov	r4, r2
 8004232:	461d      	mov	r5, r3
 8004234:	4643      	mov	r3, r8
 8004236:	18e3      	adds	r3, r4, r3
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	464b      	mov	r3, r9
 800423c:	eb45 0303 	adc.w	r3, r5, r3
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800424e:	4629      	mov	r1, r5
 8004250:	028b      	lsls	r3, r1, #10
 8004252:	4621      	mov	r1, r4
 8004254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004258:	4621      	mov	r1, r4
 800425a:	028a      	lsls	r2, r1, #10
 800425c:	4610      	mov	r0, r2
 800425e:	4619      	mov	r1, r3
 8004260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004262:	2200      	movs	r2, #0
 8004264:	61bb      	str	r3, [r7, #24]
 8004266:	61fa      	str	r2, [r7, #28]
 8004268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426c:	f7fc fca6 	bl	8000bbc <__aeabi_uldivmod>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4613      	mov	r3, r2
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	0c1b      	lsrs	r3, r3, #16
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	3301      	adds	r3, #1
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800428a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004292:	e002      	b.n	800429a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800429c:	4618      	mov	r0, r3
 800429e:	3750      	adds	r7, #80	; 0x50
 80042a0:	46bd      	mov	sp, r7
 80042a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042a6:	bf00      	nop
 80042a8:	40023800 	.word	0x40023800
 80042ac:	00f42400 	.word	0x00f42400
 80042b0:	007a1200 	.word	0x007a1200

080042b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042b4:	b480      	push	{r7}
 80042b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042b8:	4b03      	ldr	r3, [pc, #12]	; (80042c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ba:	681b      	ldr	r3, [r3, #0]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	2000004c 	.word	0x2000004c

080042cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d0:	f7ff fff0 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	0a9b      	lsrs	r3, r3, #10
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40023800 	.word	0x40023800
 80042f0:	08009ad4 	.word	0x08009ad4

080042f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042f8:	f7ff ffdc 	bl	80042b4 <HAL_RCC_GetHCLKFreq>
 80042fc:	4602      	mov	r2, r0
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	0b5b      	lsrs	r3, r3, #13
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	4903      	ldr	r1, [pc, #12]	; (8004318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800430a:	5ccb      	ldrb	r3, [r1, r3]
 800430c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004310:	4618      	mov	r0, r3
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40023800 	.word	0x40023800
 8004318:	08009ad4 	.word	0x08009ad4

0800431c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b088      	sub	sp, #32
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d012      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004344:	4b69      	ldr	r3, [pc, #420]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	4a68      	ldr	r2, [pc, #416]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800434a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800434e:	6093      	str	r3, [r2, #8]
 8004350:	4b66      	ldr	r3, [pc, #408]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004358:	4964      	ldr	r1, [pc, #400]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800435a:	4313      	orrs	r3, r2
 800435c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004366:	2301      	movs	r3, #1
 8004368:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d017      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004376:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004378:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800437c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004384:	4959      	ldr	r1, [pc, #356]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004386:	4313      	orrs	r3, r2
 8004388:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004394:	d101      	bne.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004396:	2301      	movs	r3, #1
 8004398:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d017      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043b2:	4b4e      	ldr	r3, [pc, #312]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	494a      	ldr	r1, [pc, #296]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d0:	d101      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80043d2:	2301      	movs	r3, #1
 80043d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043ee:	2301      	movs	r3, #1
 80043f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 808b 	beq.w	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004400:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	4a39      	ldr	r2, [pc, #228]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800440a:	6413      	str	r3, [r2, #64]	; 0x40
 800440c:	4b37      	ldr	r3, [pc, #220]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004418:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a34      	ldr	r2, [pc, #208]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800441e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004424:	f7fe f938 	bl	8002698 <HAL_GetTick>
 8004428:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800442c:	f7fe f934 	bl	8002698 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b64      	cmp	r3, #100	; 0x64
 8004438:	d901      	bls.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e357      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800444a:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004452:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d035      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	429a      	cmp	r2, r3
 8004466:	d02e      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004468:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004470:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004472:	4b1e      	ldr	r3, [pc, #120]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004476:	4a1d      	ldr	r2, [pc, #116]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800447e:	4b1b      	ldr	r3, [pc, #108]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	4a1a      	ldr	r2, [pc, #104]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004484:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004488:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800448a:	4a18      	ldr	r2, [pc, #96]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004490:	4b16      	ldr	r3, [pc, #88]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d114      	bne.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449c:	f7fe f8fc 	bl	8002698 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a2:	e00a      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044a4:	f7fe f8f8 	bl	8002698 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d901      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e319      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ee      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d2:	d111      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044d4:	4b05      	ldr	r3, [pc, #20]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044e0:	4b04      	ldr	r3, [pc, #16]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044e2:	400b      	ands	r3, r1
 80044e4:	4901      	ldr	r1, [pc, #4]	; (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	608b      	str	r3, [r1, #8]
 80044ea:	e00b      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044ec:	40023800 	.word	0x40023800
 80044f0:	40007000 	.word	0x40007000
 80044f4:	0ffffcff 	.word	0x0ffffcff
 80044f8:	4baa      	ldr	r3, [pc, #680]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4aa9      	ldr	r2, [pc, #676]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	4ba7      	ldr	r3, [pc, #668]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004510:	49a4      	ldr	r1, [pc, #656]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004512:	4313      	orrs	r3, r2
 8004514:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d010      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004522:	4ba0      	ldr	r3, [pc, #640]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004528:	4a9e      	ldr	r2, [pc, #632]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800452a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800452e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004532:	4b9c      	ldr	r3, [pc, #624]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004534:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453c:	4999      	ldr	r1, [pc, #612]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004550:	4b94      	ldr	r3, [pc, #592]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455e:	4991      	ldr	r1, [pc, #580]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004560:	4313      	orrs	r3, r2
 8004562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004572:	4b8c      	ldr	r3, [pc, #560]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004580:	4988      	ldr	r1, [pc, #544]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004594:	4b83      	ldr	r3, [pc, #524]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	4980      	ldr	r1, [pc, #512]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045b6:	4b7b      	ldr	r3, [pc, #492]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c4:	4977      	ldr	r1, [pc, #476]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045d8:	4b72      	ldr	r3, [pc, #456]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f023 0203 	bic.w	r2, r3, #3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	496f      	ldr	r1, [pc, #444]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045fa:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f023 020c 	bic.w	r2, r3, #12
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004608:	4966      	ldr	r1, [pc, #408]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800461c:	4b61      	ldr	r3, [pc, #388]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	495e      	ldr	r1, [pc, #376]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800463e:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	4955      	ldr	r1, [pc, #340]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004660:	4b50      	ldr	r3, [pc, #320]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	494d      	ldr	r1, [pc, #308]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004682:	4b48      	ldr	r3, [pc, #288]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004690:	4944      	ldr	r1, [pc, #272]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046a4:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b2:	493c      	ldr	r1, [pc, #240]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80046c6:	4b37      	ldr	r3, [pc, #220]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d4:	4933      	ldr	r1, [pc, #204]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046e8:	4b2e      	ldr	r3, [pc, #184]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f6:	492b      	ldr	r1, [pc, #172]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d011      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800470a:	4b26      	ldr	r3, [pc, #152]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004718:	4922      	ldr	r1, [pc, #136]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800472a:	2301      	movs	r3, #1
 800472c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800473a:	2301      	movs	r3, #1
 800473c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800474a:	4b16      	ldr	r3, [pc, #88]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004758:	4912      	ldr	r1, [pc, #72]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00b      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800476c:	4b0d      	ldr	r3, [pc, #52]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800477c:	4909      	ldr	r1, [pc, #36]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d006      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 80d9 	beq.w	800494a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004798:	4b02      	ldr	r3, [pc, #8]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a01      	ldr	r2, [pc, #4]	; (80047a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047a2:	e001      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fd ff75 	bl	8002698 <HAL_GetTick>
 80047ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b0:	e008      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047b2:	f7fd ff71 	bl	8002698 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e194      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c4:	4b6c      	ldr	r3, [pc, #432]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f0      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d11d      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80047e4:	4b64      	ldr	r3, [pc, #400]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	0c1b      	lsrs	r3, r3, #16
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047f2:	4b61      	ldr	r3, [pc, #388]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f8:	0e1b      	lsrs	r3, r3, #24
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	019a      	lsls	r2, r3, #6
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	431a      	orrs	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	061b      	lsls	r3, r3, #24
 8004810:	431a      	orrs	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	071b      	lsls	r3, r3, #28
 8004818:	4957      	ldr	r1, [pc, #348]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d004      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004834:	d00a      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02e      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484a:	d129      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800484c:	4b4a      	ldr	r3, [pc, #296]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004852:	0c1b      	lsrs	r3, r3, #16
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800485a:	4b47      	ldr	r3, [pc, #284]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004860:	0f1b      	lsrs	r3, r3, #28
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	019a      	lsls	r2, r3, #6
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	041b      	lsls	r3, r3, #16
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	061b      	lsls	r3, r3, #24
 800487a:	431a      	orrs	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	071b      	lsls	r3, r3, #28
 8004880:	493d      	ldr	r1, [pc, #244]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004888:	4b3b      	ldr	r3, [pc, #236]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800488e:	f023 021f 	bic.w	r2, r3, #31
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	3b01      	subs	r3, #1
 8004898:	4937      	ldr	r1, [pc, #220]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01d      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048ac:	4b32      	ldr	r3, [pc, #200]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b2:	0e1b      	lsrs	r3, r3, #24
 80048b4:	f003 030f 	and.w	r3, r3, #15
 80048b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048ba:	4b2f      	ldr	r3, [pc, #188]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c0:	0f1b      	lsrs	r3, r3, #28
 80048c2:	f003 0307 	and.w	r3, r3, #7
 80048c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	019a      	lsls	r2, r3, #6
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	041b      	lsls	r3, r3, #16
 80048d4:	431a      	orrs	r2, r3
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	061b      	lsls	r3, r3, #24
 80048da:	431a      	orrs	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	4925      	ldr	r1, [pc, #148]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d011      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	019a      	lsls	r2, r3, #6
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	071b      	lsls	r3, r3, #28
 8004910:	4919      	ldr	r1, [pc, #100]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004924:	f7fd feb8 	bl	8002698 <HAL_GetTick>
 8004928:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800492c:	f7fd feb4 	bl	8002698 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e0d7      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800493e:	4b0e      	ldr	r3, [pc, #56]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b01      	cmp	r3, #1
 800494e:	f040 80cd 	bne.w	8004aec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a08      	ldr	r2, [pc, #32]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495e:	f7fd fe9b 	bl	8002698 <HAL_GetTick>
 8004962:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004964:	e00a      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004966:	f7fd fe97 	bl	8002698 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b64      	cmp	r3, #100	; 0x64
 8004972:	d903      	bls.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e0ba      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004978:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800497c:	4b5e      	ldr	r3, [pc, #376]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004988:	d0ed      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d009      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d02e      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d12a      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049b2:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049c0:	4b4d      	ldr	r3, [pc, #308]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	0f1b      	lsrs	r3, r3, #28
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	019a      	lsls	r2, r3, #6
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	041b      	lsls	r3, r3, #16
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	061b      	lsls	r3, r3, #24
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	071b      	lsls	r3, r3, #28
 80049e6:	4944      	ldr	r1, [pc, #272]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80049ee:	4b42      	ldr	r3, [pc, #264]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	3b01      	subs	r3, #1
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	493d      	ldr	r1, [pc, #244]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d022      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1c:	d11d      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a1e:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a24:	0e1b      	lsrs	r3, r3, #24
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a2c:	4b32      	ldr	r3, [pc, #200]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a32:	0f1b      	lsrs	r3, r3, #28
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	019a      	lsls	r2, r3, #6
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	431a      	orrs	r2, r3
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	061b      	lsls	r3, r3, #24
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	071b      	lsls	r3, r3, #28
 8004a52:	4929      	ldr	r1, [pc, #164]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d028      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	0e1b      	lsrs	r3, r3, #24
 8004a6e:	f003 030f 	and.w	r3, r3, #15
 8004a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a74:	4b20      	ldr	r3, [pc, #128]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	0c1b      	lsrs	r3, r3, #16
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	019a      	lsls	r2, r3, #6
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	061b      	lsls	r3, r3, #24
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	4917      	ldr	r1, [pc, #92]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4911      	ldr	r1, [pc, #68]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ab8:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a0e      	ldr	r2, [pc, #56]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac4:	f7fd fde8 	bl	8002698 <HAL_GetTick>
 8004ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004acc:	f7fd fde4 	bl	8002698 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	; 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e007      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004ade:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aea:	d1ef      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3720      	adds	r7, #32
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40023800 	.word	0x40023800

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e049      	b.n	8004ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fd fbde 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f000 fda0 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d001      	beq.n	8004bc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	e04c      	b.n	8004c5e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <HAL_TIM_Base_Start+0xc0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d01d      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a22      	ldr	r2, [pc, #136]	; (8004c70 <HAL_TIM_Base_Start+0xc4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a21      	ldr	r2, [pc, #132]	; (8004c74 <HAL_TIM_Base_Start+0xc8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_TIM_Base_Start+0xcc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_TIM_Base_Start+0xd0>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_TIM_Base_Start+0xd4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start+0x70>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_TIM_Base_Start+0xd8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d115      	bne.n	8004c48 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <HAL_TIM_Base_Start+0xdc>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d015      	beq.n	8004c5a <HAL_TIM_Base_Start+0xae>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d011      	beq.n	8004c5a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	e008      	b.n	8004c5a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40000400 	.word	0x40000400
 8004c74:	40000800 	.word	0x40000800
 8004c78:	40000c00 	.word	0x40000c00
 8004c7c:	40010400 	.word	0x40010400
 8004c80:	40014000 	.word	0x40014000
 8004c84:	40001800 	.word	0x40001800
 8004c88:	00010007 	.word	0x00010007

08004c8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d001      	beq.n	8004ca4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e054      	b.n	8004d4e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a26      	ldr	r2, [pc, #152]	; (8004d5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d022      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cce:	d01d      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d018      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a21      	ldr	r2, [pc, #132]	; (8004d64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d013      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d00e      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1e      	ldr	r2, [pc, #120]	; (8004d6c <HAL_TIM_Base_Start_IT+0xe0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d009      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a1c      	ldr	r2, [pc, #112]	; (8004d70 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <HAL_TIM_Base_Start_IT+0x80>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1b      	ldr	r2, [pc, #108]	; (8004d74 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d115      	bne.n	8004d38 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689a      	ldr	r2, [r3, #8]
 8004d12:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_TIM_Base_Start_IT+0xec>)
 8004d14:	4013      	ands	r3, r2
 8004d16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b06      	cmp	r3, #6
 8004d1c:	d015      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0xbe>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d24:	d011      	beq.n	8004d4a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f042 0201 	orr.w	r2, r2, #1
 8004d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d36:	e008      	b.n	8004d4a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e000      	b.n	8004d4c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	40010000 	.word	0x40010000
 8004d60:	40000400 	.word	0x40000400
 8004d64:	40000800 	.word	0x40000800
 8004d68:	40000c00 	.word	0x40000c00
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40014000 	.word	0x40014000
 8004d74:	40001800 	.word	0x40001800
 8004d78:	00010007 	.word	0x00010007

08004d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e049      	b.n	8004e22 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f841 	bl	8004e2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4619      	mov	r1, r3
 8004dba:	4610      	mov	r0, r2
 8004dbc:	f000 fc60 	bl	8005680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d109      	bne.n	8004e64 <HAL_TIM_PWM_Start+0x24>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	e03c      	b.n	8004ede <HAL_TIM_PWM_Start+0x9e>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d109      	bne.n	8004e7e <HAL_TIM_PWM_Start+0x3e>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	bf14      	ite	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	2300      	moveq	r3, #0
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e02f      	b.n	8004ede <HAL_TIM_PWM_Start+0x9e>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d109      	bne.n	8004e98 <HAL_TIM_PWM_Start+0x58>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	e022      	b.n	8004ede <HAL_TIM_PWM_Start+0x9e>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d109      	bne.n	8004eb2 <HAL_TIM_PWM_Start+0x72>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	e015      	b.n	8004ede <HAL_TIM_PWM_Start+0x9e>
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d109      	bne.n	8004ecc <HAL_TIM_PWM_Start+0x8c>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	e008      	b.n	8004ede <HAL_TIM_PWM_Start+0x9e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d001      	beq.n	8004ee6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e092      	b.n	800500c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d104      	bne.n	8004ef6 <HAL_TIM_PWM_Start+0xb6>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef4:	e023      	b.n	8004f3e <HAL_TIM_PWM_Start+0xfe>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_PWM_Start+0xc6>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2202      	movs	r2, #2
 8004f00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f04:	e01b      	b.n	8004f3e <HAL_TIM_PWM_Start+0xfe>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_PWM_Start+0xd6>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f14:	e013      	b.n	8004f3e <HAL_TIM_PWM_Start+0xfe>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_PWM_Start+0xe6>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f24:	e00b      	b.n	8004f3e <HAL_TIM_PWM_Start+0xfe>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b10      	cmp	r3, #16
 8004f2a:	d104      	bne.n	8004f36 <HAL_TIM_PWM_Start+0xf6>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f34:	e003      	b.n	8004f3e <HAL_TIM_PWM_Start+0xfe>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2201      	movs	r2, #1
 8004f44:	6839      	ldr	r1, [r7, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 ff32 	bl	8005db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a30      	ldr	r2, [pc, #192]	; (8005014 <HAL_TIM_PWM_Start+0x1d4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d004      	beq.n	8004f60 <HAL_TIM_PWM_Start+0x120>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a2f      	ldr	r2, [pc, #188]	; (8005018 <HAL_TIM_PWM_Start+0x1d8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIM_PWM_Start+0x124>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <HAL_TIM_PWM_Start+0x126>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a25      	ldr	r2, [pc, #148]	; (8005014 <HAL_TIM_PWM_Start+0x1d4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d022      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8c:	d01d      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a22      	ldr	r2, [pc, #136]	; (800501c <HAL_TIM_PWM_Start+0x1dc>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d018      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a20      	ldr	r2, [pc, #128]	; (8005020 <HAL_TIM_PWM_Start+0x1e0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	; (8005024 <HAL_TIM_PWM_Start+0x1e4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d00e      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	; (8005018 <HAL_TIM_PWM_Start+0x1d8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d009      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	; (8005028 <HAL_TIM_PWM_Start+0x1e8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_TIM_PWM_Start+0x18a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a19      	ldr	r2, [pc, #100]	; (800502c <HAL_TIM_PWM_Start+0x1ec>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d115      	bne.n	8004ff6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	4b17      	ldr	r3, [pc, #92]	; (8005030 <HAL_TIM_PWM_Start+0x1f0>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b06      	cmp	r3, #6
 8004fda:	d015      	beq.n	8005008 <HAL_TIM_PWM_Start+0x1c8>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe2:	d011      	beq.n	8005008 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f042 0201 	orr.w	r2, r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff4:	e008      	b.n	8005008 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	e000      	b.n	800500a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	40010000 	.word	0x40010000
 8005018:	40010400 	.word	0x40010400
 800501c:	40000400 	.word	0x40000400
 8005020:	40000800 	.word	0x40000800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40014000 	.word	0x40014000
 800502c:	40001800 	.word	0x40001800
 8005030:	00010007 	.word	0x00010007

08005034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b02      	cmp	r3, #2
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0202 	mvn.w	r2, #2
 8005060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fae4 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fad6 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fae7 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b04      	cmp	r3, #4
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b04      	cmp	r3, #4
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0204 	mvn.w	r2, #4
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2202      	movs	r2, #2
 80050ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 faba 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 faac 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fabd 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b08      	cmp	r3, #8
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0208 	mvn.w	r2, #8
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2204      	movs	r2, #4
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa90 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa82 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 fa93 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b10      	cmp	r3, #16
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0310 	and.w	r3, r3, #16
 8005150:	2b10      	cmp	r3, #16
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0210 	mvn.w	r2, #16
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2208      	movs	r2, #8
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fa66 	bl	8005644 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fa58 	bl	8005630 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fa69 	bl	8005658 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0201 	mvn.w	r2, #1
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fc48 	bl	8001a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b80      	cmp	r3, #128	; 0x80
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d0:	2b80      	cmp	r3, #128	; 0x80
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fea4 	bl	8005f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051f2:	d10e      	bne.n	8005212 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d107      	bne.n	8005212 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800520a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fe97 	bl	8005f40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b40      	cmp	r3, #64	; 0x40
 800521e:	d10e      	bne.n	800523e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522a:	2b40      	cmp	r3, #64	; 0x40
 800522c:	d107      	bne.n	800523e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fa17 	bl	800566c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0320 	and.w	r3, r3, #32
 8005248:	2b20      	cmp	r3, #32
 800524a:	d10e      	bne.n	800526a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d107      	bne.n	800526a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0220 	mvn.w	r2, #32
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fe57 	bl	8005f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800528e:	2302      	movs	r3, #2
 8005290:	e0ff      	b.n	8005492 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2b14      	cmp	r3, #20
 800529e:	f200 80f0 	bhi.w	8005482 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052a2:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a8:	080052fd 	.word	0x080052fd
 80052ac:	08005483 	.word	0x08005483
 80052b0:	08005483 	.word	0x08005483
 80052b4:	08005483 	.word	0x08005483
 80052b8:	0800533d 	.word	0x0800533d
 80052bc:	08005483 	.word	0x08005483
 80052c0:	08005483 	.word	0x08005483
 80052c4:	08005483 	.word	0x08005483
 80052c8:	0800537f 	.word	0x0800537f
 80052cc:	08005483 	.word	0x08005483
 80052d0:	08005483 	.word	0x08005483
 80052d4:	08005483 	.word	0x08005483
 80052d8:	080053bf 	.word	0x080053bf
 80052dc:	08005483 	.word	0x08005483
 80052e0:	08005483 	.word	0x08005483
 80052e4:	08005483 	.word	0x08005483
 80052e8:	08005401 	.word	0x08005401
 80052ec:	08005483 	.word	0x08005483
 80052f0:	08005483 	.word	0x08005483
 80052f4:	08005483 	.word	0x08005483
 80052f8:	08005441 	.word	0x08005441
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa5c 	bl	80057c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0208 	orr.w	r2, r2, #8
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
      break;
 800533a:	e0a5      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 faae 	bl	80058a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6999      	ldr	r1, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	021a      	lsls	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	619a      	str	r2, [r3, #24]
      break;
 800537c:	e084      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fb05 	bl	8005994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0204 	bic.w	r2, r2, #4
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]
      break;
 80053bc:	e064      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fb5b 	bl	8005a80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69d9      	ldr	r1, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
      break;
 80053fe:	e043      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68b9      	ldr	r1, [r7, #8]
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fb92 	bl	8005b30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0204 	bic.w	r2, r2, #4
 800542a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	691a      	ldr	r2, [r3, #16]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800543e:	e023      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	4618      	mov	r0, r3
 8005448:	f000 fbc4 	bl	8005bd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800545a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	021a      	lsls	r2, r3, #8
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005480:	e002      	b.n	8005488 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	75fb      	strb	r3, [r7, #23]
      break;
 8005486:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005490:	7dfb      	ldrb	r3, [r7, #23]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop

0800549c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIM_ConfigClockSource+0x1c>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e0b4      	b.n	8005622 <HAL_TIM_ConfigClockSource+0x186>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	4b56      	ldr	r3, [pc, #344]	; (800562c <HAL_TIM_ConfigClockSource+0x190>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68ba      	ldr	r2, [r7, #8]
 80054e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f0:	d03e      	beq.n	8005570 <HAL_TIM_ConfigClockSource+0xd4>
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	f200 8087 	bhi.w	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 80054fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fe:	f000 8086 	beq.w	800560e <HAL_TIM_ConfigClockSource+0x172>
 8005502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005506:	d87f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005508:	2b70      	cmp	r3, #112	; 0x70
 800550a:	d01a      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0xa6>
 800550c:	2b70      	cmp	r3, #112	; 0x70
 800550e:	d87b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005510:	2b60      	cmp	r3, #96	; 0x60
 8005512:	d050      	beq.n	80055b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005514:	2b60      	cmp	r3, #96	; 0x60
 8005516:	d877      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005518:	2b50      	cmp	r3, #80	; 0x50
 800551a:	d03c      	beq.n	8005596 <HAL_TIM_ConfigClockSource+0xfa>
 800551c:	2b50      	cmp	r3, #80	; 0x50
 800551e:	d873      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005520:	2b40      	cmp	r3, #64	; 0x40
 8005522:	d058      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d86f      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005528:	2b30      	cmp	r3, #48	; 0x30
 800552a:	d064      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 800552c:	2b30      	cmp	r3, #48	; 0x30
 800552e:	d86b      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005530:	2b20      	cmp	r3, #32
 8005532:	d060      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	2b20      	cmp	r3, #32
 8005536:	d867      	bhi.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d05c      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 800553c:	2b10      	cmp	r3, #16
 800553e:	d05a      	beq.n	80055f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	e062      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005552:	f000 fc0d 	bl	8005d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	609a      	str	r2, [r3, #8]
      break;
 800556e:	e04f      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005580:	f000 fbf6 	bl	8005d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005592:	609a      	str	r2, [r3, #8]
      break;
 8005594:	e03c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	461a      	mov	r2, r3
 80055a4:	f000 fb6a 	bl	8005c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2150      	movs	r1, #80	; 0x50
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fbc3 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 80055b4:	e02c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c2:	461a      	mov	r2, r3
 80055c4:	f000 fb89 	bl	8005cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2160      	movs	r1, #96	; 0x60
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 fbb3 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 80055d4:	e01c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	461a      	mov	r2, r3
 80055e4:	f000 fb4a 	bl	8005c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fba3 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 80055f4:	e00c      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f000 fb9a 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005606:	e003      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
      break;
 800560c:	e000      	b.n	8005610 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800560e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	fffeff88 	.word	0xfffeff88

08005630 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <TIM_Base_SetConfig+0x114>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d013      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800569e:	d00f      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a3d      	ldr	r2, [pc, #244]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a3c      	ldr	r2, [pc, #240]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a3b      	ldr	r2, [pc, #236]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d003      	beq.n	80056c0 <TIM_Base_SetConfig+0x40>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a3a      	ldr	r2, [pc, #232]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d108      	bne.n	80056d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <TIM_Base_SetConfig+0x114>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d02b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d027      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2c      	ldr	r2, [pc, #176]	; (8005798 <TIM_Base_SetConfig+0x118>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d023      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <TIM_Base_SetConfig+0x11c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d01f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <TIM_Base_SetConfig+0x120>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d01b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <TIM_Base_SetConfig+0x128>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <TIM_Base_SetConfig+0x12c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00f      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <TIM_Base_SetConfig+0x130>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d00b      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a25      	ldr	r2, [pc, #148]	; (80057b4 <TIM_Base_SetConfig+0x134>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d007      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <TIM_Base_SetConfig+0x138>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a23      	ldr	r2, [pc, #140]	; (80057bc <TIM_Base_SetConfig+0x13c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d108      	bne.n	8005744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a0a      	ldr	r2, [pc, #40]	; (8005794 <TIM_Base_SetConfig+0x114>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d003      	beq.n	8005778 <TIM_Base_SetConfig+0xf8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a0c      	ldr	r2, [pc, #48]	; (80057a4 <TIM_Base_SetConfig+0x124>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d103      	bne.n	8005780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	691a      	ldr	r2, [r3, #16]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	615a      	str	r2, [r3, #20]
}
 8005786:	bf00      	nop
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40010000 	.word	0x40010000
 8005798:	40000400 	.word	0x40000400
 800579c:	40000800 	.word	0x40000800
 80057a0:	40000c00 	.word	0x40000c00
 80057a4:	40010400 	.word	0x40010400
 80057a8:	40014000 	.word	0x40014000
 80057ac:	40014400 	.word	0x40014400
 80057b0:	40014800 	.word	0x40014800
 80057b4:	40001800 	.word	0x40001800
 80057b8:	40001c00 	.word	0x40001c00
 80057bc:	40002000 	.word	0x40002000

080057c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0201 	bic.w	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <TIM_OC1_SetConfig+0xd8>)
 80057ec:	4013      	ands	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 0302 	bic.w	r3, r3, #2
 8005808:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	4313      	orrs	r3, r2
 8005812:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a21      	ldr	r2, [pc, #132]	; (800589c <TIM_OC1_SetConfig+0xdc>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d003      	beq.n	8005824 <TIM_OC1_SetConfig+0x64>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <TIM_OC1_SetConfig+0xe0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d10c      	bne.n	800583e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f023 0308 	bic.w	r3, r3, #8
 800582a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	4313      	orrs	r3, r2
 8005834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 0304 	bic.w	r3, r3, #4
 800583c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a16      	ldr	r2, [pc, #88]	; (800589c <TIM_OC1_SetConfig+0xdc>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d003      	beq.n	800584e <TIM_OC1_SetConfig+0x8e>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <TIM_OC1_SetConfig+0xe0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d111      	bne.n	8005872 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800585c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	685a      	ldr	r2, [r3, #4]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	621a      	str	r2, [r3, #32]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr
 8005898:	fffeff8f 	.word	0xfffeff8f
 800589c:	40010000 	.word	0x40010000
 80058a0:	40010400 	.word	0x40010400

080058a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b087      	sub	sp, #28
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	f023 0210 	bic.w	r2, r3, #16
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <TIM_OC2_SetConfig+0xe4>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	021b      	lsls	r3, r3, #8
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f023 0320 	bic.w	r3, r3, #32
 80058ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	011b      	lsls	r3, r3, #4
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a23      	ldr	r2, [pc, #140]	; (800598c <TIM_OC2_SetConfig+0xe8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d003      	beq.n	800590c <TIM_OC2_SetConfig+0x68>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <TIM_OC2_SetConfig+0xec>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d10d      	bne.n	8005928 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	011b      	lsls	r3, r3, #4
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005926:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <TIM_OC2_SetConfig+0xe8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_OC2_SetConfig+0x94>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a17      	ldr	r2, [pc, #92]	; (8005990 <TIM_OC2_SetConfig+0xec>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d113      	bne.n	8005960 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800593e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	695b      	ldr	r3, [r3, #20]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	feff8fff 	.word	0xfeff8fff
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400

08005994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <TIM_OC3_SetConfig+0xe0>)
 80059c0:	4013      	ands	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0303 	bic.w	r3, r3, #3
 80059ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a22      	ldr	r2, [pc, #136]	; (8005a78 <TIM_OC3_SetConfig+0xe4>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d003      	beq.n	80059fa <TIM_OC3_SetConfig+0x66>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a21      	ldr	r2, [pc, #132]	; (8005a7c <TIM_OC3_SetConfig+0xe8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d10d      	bne.n	8005a16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a17      	ldr	r2, [pc, #92]	; (8005a78 <TIM_OC3_SetConfig+0xe4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d003      	beq.n	8005a26 <TIM_OC3_SetConfig+0x92>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a16      	ldr	r2, [pc, #88]	; (8005a7c <TIM_OC3_SetConfig+0xe8>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d113      	bne.n	8005a4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	011b      	lsls	r3, r3, #4
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	fffeff8f 	.word	0xfffeff8f
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40010400 	.word	0x40010400

08005a80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4b1e      	ldr	r3, [pc, #120]	; (8005b24 <TIM_OC4_SetConfig+0xa4>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	031b      	lsls	r3, r3, #12
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <TIM_OC4_SetConfig+0xa8>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_OC4_SetConfig+0x68>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a12      	ldr	r2, [pc, #72]	; (8005b2c <TIM_OC4_SetConfig+0xac>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d109      	bne.n	8005afc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	019b      	lsls	r3, r3, #6
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	feff8fff 	.word	0xfeff8fff
 8005b28:	40010000 	.word	0x40010000
 8005b2c:	40010400 	.word	0x40010400

08005b30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <TIM_OC5_SetConfig+0x98>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a12      	ldr	r2, [pc, #72]	; (8005bcc <TIM_OC5_SetConfig+0x9c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_OC5_SetConfig+0x5e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a11      	ldr	r2, [pc, #68]	; (8005bd0 <TIM_OC5_SetConfig+0xa0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d109      	bne.n	8005ba2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	621a      	str	r2, [r3, #32]
}
 8005bbc:	bf00      	nop
 8005bbe:	371c      	adds	r7, #28
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	fffeff8f 	.word	0xfffeff8f
 8005bcc:	40010000 	.word	0x40010000
 8005bd0:	40010400 	.word	0x40010400

08005bd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4b1c      	ldr	r3, [pc, #112]	; (8005c70 <TIM_OC6_SetConfig+0x9c>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	051b      	lsls	r3, r3, #20
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <TIM_OC6_SetConfig+0xa0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC6_SetConfig+0x60>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a12      	ldr	r2, [pc, #72]	; (8005c78 <TIM_OC6_SetConfig+0xa4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d109      	bne.n	8005c48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	029b      	lsls	r3, r3, #10
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	feff8fff 	.word	0xfeff8fff
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40010400 	.word	0x40010400

08005c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 030a 	bic.w	r3, r3, #10
 8005cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	f023 0210 	bic.w	r2, r3, #16
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	031b      	lsls	r3, r3, #12
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f043 0307 	orr.w	r3, r3, #7
 8005d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	609a      	str	r2, [r3, #8]
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	021a      	lsls	r2, r3, #8
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	371c      	adds	r7, #28
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f003 031f 	and.w	r3, r3, #31
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1a      	ldr	r2, [r3, #32]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 031f 	and.w	r3, r3, #31
 8005de2:	6879      	ldr	r1, [r7, #4]
 8005de4:	fa01 f303 	lsl.w	r3, r1, r3
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e06d      	b.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a30      	ldr	r2, [pc, #192]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d108      	bne.n	8005e5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	68fa      	ldr	r2, [r7, #12]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a20      	ldr	r2, [pc, #128]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d022      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e86:	d01d      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a1d      	ldr	r2, [pc, #116]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d018      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a1c      	ldr	r2, [pc, #112]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d013      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a1a      	ldr	r2, [pc, #104]	; (8005f0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00e      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a15      	ldr	r2, [pc, #84]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d009      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a16      	ldr	r2, [pc, #88]	; (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d004      	beq.n	8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10c      	bne.n	8005ede <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40010400 	.word	0x40010400
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
 8005f0c:	40000c00 	.word	0x40000c00
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40001800 	.word	0x40001800

08005f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b083      	sub	sp, #12
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e040      	b.n	8005fe8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d106      	bne.n	8005f7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fc faac 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2224      	movs	r2, #36	; 0x24
 8005f80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0201 	bic.w	r2, r2, #1
 8005f90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fba2 	bl	80066dc <UART_SetConfig>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d101      	bne.n	8005fa2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e022      	b.n	8005fe8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fdfa 	bl	8006ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685a      	ldr	r2, [r3, #4]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f042 0201 	orr.w	r2, r2, #1
 8005fde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fe81 	bl	8006ce8 <UART_CheckIdleState>
 8005fe6:	4603      	mov	r3, r0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08a      	sub	sp, #40	; 0x28
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	603b      	str	r3, [r7, #0]
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006004:	2b20      	cmp	r3, #32
 8006006:	d171      	bne.n	80060ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_UART_Transmit+0x24>
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e06a      	b.n	80060ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2221      	movs	r2, #33	; 0x21
 8006024:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006026:	f7fc fb37 	bl	8002698 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	88fa      	ldrh	r2, [r7, #6]
 8006038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006044:	d108      	bne.n	8006058 <HAL_UART_Transmit+0x68>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d104      	bne.n	8006058 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	61bb      	str	r3, [r7, #24]
 8006056:	e003      	b.n	8006060 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006060:	e02c      	b.n	80060bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	9300      	str	r3, [sp, #0]
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	2200      	movs	r2, #0
 800606a:	2180      	movs	r1, #128	; 0x80
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 fe72 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 8006072:	4603      	mov	r3, r0
 8006074:	2b00      	cmp	r3, #0
 8006076:	d001      	beq.n	800607c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e038      	b.n	80060ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10b      	bne.n	800609a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	461a      	mov	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006090:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	3302      	adds	r3, #2
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	e007      	b.n	80060aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	3301      	adds	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1cc      	bne.n	8006062 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2200      	movs	r2, #0
 80060d0:	2140      	movs	r1, #64	; 0x40
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fe3f 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e005      	b.n	80060ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2220      	movs	r2, #32
 80060e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80060e8:	2300      	movs	r3, #0
 80060ea:	e000      	b.n	80060ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80060ec:	2302      	movs	r3, #2
  }
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3720      	adds	r7, #32
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b0ba      	sub	sp, #232	; 0xe8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800611e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006122:	f640 030f 	movw	r3, #2063	; 0x80f
 8006126:	4013      	ands	r3, r2
 8006128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800612c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d115      	bne.n	8006160 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00f      	beq.n	8006160 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8297 	beq.w	8006684 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
      }
      return;
 800615e:	e291      	b.n	8006684 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8117 	beq.w	8006398 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800617a:	4b85      	ldr	r3, [pc, #532]	; (8006390 <HAL_UART_IRQHandler+0x298>)
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 810a 	beq.w	8006398 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d011      	beq.n	80061b4 <HAL_UART_IRQHandler+0xbc>
 8006190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2201      	movs	r2, #1
 80061a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061aa:	f043 0201 	orr.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d011      	beq.n	80061e4 <HAL_UART_IRQHandler+0xec>
 80061c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2202      	movs	r2, #2
 80061d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061da:	f043 0204 	orr.w	r2, r3, #4
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d011      	beq.n	8006214 <HAL_UART_IRQHandler+0x11c>
 80061f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2204      	movs	r2, #4
 8006202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620a:	f043 0202 	orr.w	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d105      	bne.n	8006238 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800622c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006230:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2208      	movs	r2, #8
 800623e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006246:	f043 0208 	orr.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006258:	2b00      	cmp	r3, #0
 800625a:	d012      	beq.n	8006282 <HAL_UART_IRQHandler+0x18a>
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00c      	beq.n	8006282 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006278:	f043 0220 	orr.w	r2, r3, #32
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 81fd 	beq.w	8006688 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800628e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800629a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04f      	beq.n	800637a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fe01 	bl	8006ee2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d141      	bne.n	8006372 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800631a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800631e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1d9      	bne.n	80062ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633e:	2b00      	cmp	r3, #0
 8006340:	d013      	beq.n	800636a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <HAL_UART_IRQHandler+0x29c>)
 8006348:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634e:	4618      	mov	r0, r3
 8006350:	f7fc fb53 	bl	80029fa <HAL_DMA_Abort_IT>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d017      	beq.n	800638a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e00f      	b.n	800638a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9a0 	bl	80066b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	e00b      	b.n	800638a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f99c 	bl	80066b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e007      	b.n	800638a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f998 	bl	80066b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006388:	e17e      	b.n	8006688 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638a:	bf00      	nop
    return;
 800638c:	e17c      	b.n	8006688 <HAL_UART_IRQHandler+0x590>
 800638e:	bf00      	nop
 8006390:	04000120 	.word	0x04000120
 8006394:	08006fab 	.word	0x08006fab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639c:	2b01      	cmp	r3, #1
 800639e:	f040 814c 	bne.w	800663a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8145 	beq.w	800663a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 813e 	beq.w	800663a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2210      	movs	r2, #16
 80063c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	f040 80b6 	bne.w	8006542 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8150 	beq.w	800668c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f080 8148 	bcs.w	800668c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	f000 8086 	beq.w	8006520 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006442:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800644a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1da      	bne.n	8006414 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800648a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e1      	bne.n	800645e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006502:	65bb      	str	r3, [r7, #88]	; 0x58
 8006504:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e4      	bne.n	80064e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc f9fd 	bl	800291a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006532:	b29b      	uxth	r3, r3
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8c2 	bl	80066c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006540:	e0a4      	b.n	800668c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800654e:	b29b      	uxth	r3, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 8096 	beq.w	8006690 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8006564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 8091 	beq.w	8006690 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006590:	647b      	str	r3, [r7, #68]	; 0x44
 8006592:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e4      	bne.n	800656e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	623b      	str	r3, [r7, #32]
   return(result);
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c8:	633a      	str	r2, [r7, #48]	; 0x30
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e3      	bne.n	80065a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 0310 	bic.w	r3, r3, #16
 8006604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	617b      	str	r3, [r7, #20]
   return(result);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e4      	bne.n	80065f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800662c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f846 	bl	80066c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006638:	e02a      	b.n	8006690 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01c      	beq.n	8006694 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
    }
    return;
 8006662:	e017      	b.n	8006694 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666c:	2b00      	cmp	r3, #0
 800666e:	d012      	beq.n	8006696 <HAL_UART_IRQHandler+0x59e>
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00c      	beq.n	8006696 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fcaa 	bl	8006fd6 <UART_EndTransmit_IT>
    return;
 8006682:	e008      	b.n	8006696 <HAL_UART_IRQHandler+0x59e>
      return;
 8006684:	bf00      	nop
 8006686:	e006      	b.n	8006696 <HAL_UART_IRQHandler+0x59e>
    return;
 8006688:	bf00      	nop
 800668a:	e004      	b.n	8006696 <HAL_UART_IRQHandler+0x59e>
      return;
 800668c:	bf00      	nop
 800668e:	e002      	b.n	8006696 <HAL_UART_IRQHandler+0x59e>
      return;
 8006690:	bf00      	nop
 8006692:	e000      	b.n	8006696 <HAL_UART_IRQHandler+0x59e>
    return;
 8006694:	bf00      	nop
  }

}
 8006696:	37e8      	adds	r7, #232	; 0xe8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	460b      	mov	r3, r1
 80066ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	431a      	orrs	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	431a      	orrs	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	69db      	ldr	r3, [r3, #28]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4ba6      	ldr	r3, [pc, #664]	; (80069a0 <UART_SetConfig+0x2c4>)
 8006708:	4013      	ands	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6812      	ldr	r2, [r2, #0]
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	430b      	orrs	r3, r1
 8006712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	4313      	orrs	r3, r2
 8006738:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	430a      	orrs	r2, r1
 800674c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a94      	ldr	r2, [pc, #592]	; (80069a4 <UART_SetConfig+0x2c8>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d120      	bne.n	800679a <UART_SetConfig+0xbe>
 8006758:	4b93      	ldr	r3, [pc, #588]	; (80069a8 <UART_SetConfig+0x2cc>)
 800675a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675e:	f003 0303 	and.w	r3, r3, #3
 8006762:	2b03      	cmp	r3, #3
 8006764:	d816      	bhi.n	8006794 <UART_SetConfig+0xb8>
 8006766:	a201      	add	r2, pc, #4	; (adr r2, 800676c <UART_SetConfig+0x90>)
 8006768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800676c:	0800677d 	.word	0x0800677d
 8006770:	08006789 	.word	0x08006789
 8006774:	08006783 	.word	0x08006783
 8006778:	0800678f 	.word	0x0800678f
 800677c:	2301      	movs	r3, #1
 800677e:	77fb      	strb	r3, [r7, #31]
 8006780:	e150      	b.n	8006a24 <UART_SetConfig+0x348>
 8006782:	2302      	movs	r3, #2
 8006784:	77fb      	strb	r3, [r7, #31]
 8006786:	e14d      	b.n	8006a24 <UART_SetConfig+0x348>
 8006788:	2304      	movs	r3, #4
 800678a:	77fb      	strb	r3, [r7, #31]
 800678c:	e14a      	b.n	8006a24 <UART_SetConfig+0x348>
 800678e:	2308      	movs	r3, #8
 8006790:	77fb      	strb	r3, [r7, #31]
 8006792:	e147      	b.n	8006a24 <UART_SetConfig+0x348>
 8006794:	2310      	movs	r3, #16
 8006796:	77fb      	strb	r3, [r7, #31]
 8006798:	e144      	b.n	8006a24 <UART_SetConfig+0x348>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a83      	ldr	r2, [pc, #524]	; (80069ac <UART_SetConfig+0x2d0>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d132      	bne.n	800680a <UART_SetConfig+0x12e>
 80067a4:	4b80      	ldr	r3, [pc, #512]	; (80069a8 <UART_SetConfig+0x2cc>)
 80067a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b0c      	cmp	r3, #12
 80067b0:	d828      	bhi.n	8006804 <UART_SetConfig+0x128>
 80067b2:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <UART_SetConfig+0xdc>)
 80067b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b8:	080067ed 	.word	0x080067ed
 80067bc:	08006805 	.word	0x08006805
 80067c0:	08006805 	.word	0x08006805
 80067c4:	08006805 	.word	0x08006805
 80067c8:	080067f9 	.word	0x080067f9
 80067cc:	08006805 	.word	0x08006805
 80067d0:	08006805 	.word	0x08006805
 80067d4:	08006805 	.word	0x08006805
 80067d8:	080067f3 	.word	0x080067f3
 80067dc:	08006805 	.word	0x08006805
 80067e0:	08006805 	.word	0x08006805
 80067e4:	08006805 	.word	0x08006805
 80067e8:	080067ff 	.word	0x080067ff
 80067ec:	2300      	movs	r3, #0
 80067ee:	77fb      	strb	r3, [r7, #31]
 80067f0:	e118      	b.n	8006a24 <UART_SetConfig+0x348>
 80067f2:	2302      	movs	r3, #2
 80067f4:	77fb      	strb	r3, [r7, #31]
 80067f6:	e115      	b.n	8006a24 <UART_SetConfig+0x348>
 80067f8:	2304      	movs	r3, #4
 80067fa:	77fb      	strb	r3, [r7, #31]
 80067fc:	e112      	b.n	8006a24 <UART_SetConfig+0x348>
 80067fe:	2308      	movs	r3, #8
 8006800:	77fb      	strb	r3, [r7, #31]
 8006802:	e10f      	b.n	8006a24 <UART_SetConfig+0x348>
 8006804:	2310      	movs	r3, #16
 8006806:	77fb      	strb	r3, [r7, #31]
 8006808:	e10c      	b.n	8006a24 <UART_SetConfig+0x348>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a68      	ldr	r2, [pc, #416]	; (80069b0 <UART_SetConfig+0x2d4>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d120      	bne.n	8006856 <UART_SetConfig+0x17a>
 8006814:	4b64      	ldr	r3, [pc, #400]	; (80069a8 <UART_SetConfig+0x2cc>)
 8006816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800681e:	2b30      	cmp	r3, #48	; 0x30
 8006820:	d013      	beq.n	800684a <UART_SetConfig+0x16e>
 8006822:	2b30      	cmp	r3, #48	; 0x30
 8006824:	d814      	bhi.n	8006850 <UART_SetConfig+0x174>
 8006826:	2b20      	cmp	r3, #32
 8006828:	d009      	beq.n	800683e <UART_SetConfig+0x162>
 800682a:	2b20      	cmp	r3, #32
 800682c:	d810      	bhi.n	8006850 <UART_SetConfig+0x174>
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <UART_SetConfig+0x15c>
 8006832:	2b10      	cmp	r3, #16
 8006834:	d006      	beq.n	8006844 <UART_SetConfig+0x168>
 8006836:	e00b      	b.n	8006850 <UART_SetConfig+0x174>
 8006838:	2300      	movs	r3, #0
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e0f2      	b.n	8006a24 <UART_SetConfig+0x348>
 800683e:	2302      	movs	r3, #2
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e0ef      	b.n	8006a24 <UART_SetConfig+0x348>
 8006844:	2304      	movs	r3, #4
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e0ec      	b.n	8006a24 <UART_SetConfig+0x348>
 800684a:	2308      	movs	r3, #8
 800684c:	77fb      	strb	r3, [r7, #31]
 800684e:	e0e9      	b.n	8006a24 <UART_SetConfig+0x348>
 8006850:	2310      	movs	r3, #16
 8006852:	77fb      	strb	r3, [r7, #31]
 8006854:	e0e6      	b.n	8006a24 <UART_SetConfig+0x348>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a56      	ldr	r2, [pc, #344]	; (80069b4 <UART_SetConfig+0x2d8>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d120      	bne.n	80068a2 <UART_SetConfig+0x1c6>
 8006860:	4b51      	ldr	r3, [pc, #324]	; (80069a8 <UART_SetConfig+0x2cc>)
 8006862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006866:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800686a:	2bc0      	cmp	r3, #192	; 0xc0
 800686c:	d013      	beq.n	8006896 <UART_SetConfig+0x1ba>
 800686e:	2bc0      	cmp	r3, #192	; 0xc0
 8006870:	d814      	bhi.n	800689c <UART_SetConfig+0x1c0>
 8006872:	2b80      	cmp	r3, #128	; 0x80
 8006874:	d009      	beq.n	800688a <UART_SetConfig+0x1ae>
 8006876:	2b80      	cmp	r3, #128	; 0x80
 8006878:	d810      	bhi.n	800689c <UART_SetConfig+0x1c0>
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <UART_SetConfig+0x1a8>
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d006      	beq.n	8006890 <UART_SetConfig+0x1b4>
 8006882:	e00b      	b.n	800689c <UART_SetConfig+0x1c0>
 8006884:	2300      	movs	r3, #0
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e0cc      	b.n	8006a24 <UART_SetConfig+0x348>
 800688a:	2302      	movs	r3, #2
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0c9      	b.n	8006a24 <UART_SetConfig+0x348>
 8006890:	2304      	movs	r3, #4
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e0c6      	b.n	8006a24 <UART_SetConfig+0x348>
 8006896:	2308      	movs	r3, #8
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e0c3      	b.n	8006a24 <UART_SetConfig+0x348>
 800689c:	2310      	movs	r3, #16
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e0c0      	b.n	8006a24 <UART_SetConfig+0x348>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a44      	ldr	r2, [pc, #272]	; (80069b8 <UART_SetConfig+0x2dc>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d125      	bne.n	80068f8 <UART_SetConfig+0x21c>
 80068ac:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <UART_SetConfig+0x2cc>)
 80068ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068ba:	d017      	beq.n	80068ec <UART_SetConfig+0x210>
 80068bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c0:	d817      	bhi.n	80068f2 <UART_SetConfig+0x216>
 80068c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c6:	d00b      	beq.n	80068e0 <UART_SetConfig+0x204>
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d811      	bhi.n	80068f2 <UART_SetConfig+0x216>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <UART_SetConfig+0x1fe>
 80068d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068d6:	d006      	beq.n	80068e6 <UART_SetConfig+0x20a>
 80068d8:	e00b      	b.n	80068f2 <UART_SetConfig+0x216>
 80068da:	2300      	movs	r3, #0
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e0a1      	b.n	8006a24 <UART_SetConfig+0x348>
 80068e0:	2302      	movs	r3, #2
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e09e      	b.n	8006a24 <UART_SetConfig+0x348>
 80068e6:	2304      	movs	r3, #4
 80068e8:	77fb      	strb	r3, [r7, #31]
 80068ea:	e09b      	b.n	8006a24 <UART_SetConfig+0x348>
 80068ec:	2308      	movs	r3, #8
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e098      	b.n	8006a24 <UART_SetConfig+0x348>
 80068f2:	2310      	movs	r3, #16
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e095      	b.n	8006a24 <UART_SetConfig+0x348>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a2f      	ldr	r2, [pc, #188]	; (80069bc <UART_SetConfig+0x2e0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d125      	bne.n	800694e <UART_SetConfig+0x272>
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <UART_SetConfig+0x2cc>)
 8006904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800690c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006910:	d017      	beq.n	8006942 <UART_SetConfig+0x266>
 8006912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006916:	d817      	bhi.n	8006948 <UART_SetConfig+0x26c>
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691c:	d00b      	beq.n	8006936 <UART_SetConfig+0x25a>
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006922:	d811      	bhi.n	8006948 <UART_SetConfig+0x26c>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0x254>
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692c:	d006      	beq.n	800693c <UART_SetConfig+0x260>
 800692e:	e00b      	b.n	8006948 <UART_SetConfig+0x26c>
 8006930:	2301      	movs	r3, #1
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e076      	b.n	8006a24 <UART_SetConfig+0x348>
 8006936:	2302      	movs	r3, #2
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e073      	b.n	8006a24 <UART_SetConfig+0x348>
 800693c:	2304      	movs	r3, #4
 800693e:	77fb      	strb	r3, [r7, #31]
 8006940:	e070      	b.n	8006a24 <UART_SetConfig+0x348>
 8006942:	2308      	movs	r3, #8
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e06d      	b.n	8006a24 <UART_SetConfig+0x348>
 8006948:	2310      	movs	r3, #16
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e06a      	b.n	8006a24 <UART_SetConfig+0x348>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <UART_SetConfig+0x2e4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d138      	bne.n	80069ca <UART_SetConfig+0x2ee>
 8006958:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <UART_SetConfig+0x2cc>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006962:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006966:	d017      	beq.n	8006998 <UART_SetConfig+0x2bc>
 8006968:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800696c:	d82a      	bhi.n	80069c4 <UART_SetConfig+0x2e8>
 800696e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006972:	d00b      	beq.n	800698c <UART_SetConfig+0x2b0>
 8006974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006978:	d824      	bhi.n	80069c4 <UART_SetConfig+0x2e8>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <UART_SetConfig+0x2aa>
 800697e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006982:	d006      	beq.n	8006992 <UART_SetConfig+0x2b6>
 8006984:	e01e      	b.n	80069c4 <UART_SetConfig+0x2e8>
 8006986:	2300      	movs	r3, #0
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e04b      	b.n	8006a24 <UART_SetConfig+0x348>
 800698c:	2302      	movs	r3, #2
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e048      	b.n	8006a24 <UART_SetConfig+0x348>
 8006992:	2304      	movs	r3, #4
 8006994:	77fb      	strb	r3, [r7, #31]
 8006996:	e045      	b.n	8006a24 <UART_SetConfig+0x348>
 8006998:	2308      	movs	r3, #8
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e042      	b.n	8006a24 <UART_SetConfig+0x348>
 800699e:	bf00      	nop
 80069a0:	efff69f3 	.word	0xefff69f3
 80069a4:	40011000 	.word	0x40011000
 80069a8:	40023800 	.word	0x40023800
 80069ac:	40004400 	.word	0x40004400
 80069b0:	40004800 	.word	0x40004800
 80069b4:	40004c00 	.word	0x40004c00
 80069b8:	40005000 	.word	0x40005000
 80069bc:	40011400 	.word	0x40011400
 80069c0:	40007800 	.word	0x40007800
 80069c4:	2310      	movs	r3, #16
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e02c      	b.n	8006a24 <UART_SetConfig+0x348>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a72      	ldr	r2, [pc, #456]	; (8006b98 <UART_SetConfig+0x4bc>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d125      	bne.n	8006a20 <UART_SetConfig+0x344>
 80069d4:	4b71      	ldr	r3, [pc, #452]	; (8006b9c <UART_SetConfig+0x4c0>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069e2:	d017      	beq.n	8006a14 <UART_SetConfig+0x338>
 80069e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069e8:	d817      	bhi.n	8006a1a <UART_SetConfig+0x33e>
 80069ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ee:	d00b      	beq.n	8006a08 <UART_SetConfig+0x32c>
 80069f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069f4:	d811      	bhi.n	8006a1a <UART_SetConfig+0x33e>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d003      	beq.n	8006a02 <UART_SetConfig+0x326>
 80069fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069fe:	d006      	beq.n	8006a0e <UART_SetConfig+0x332>
 8006a00:	e00b      	b.n	8006a1a <UART_SetConfig+0x33e>
 8006a02:	2300      	movs	r3, #0
 8006a04:	77fb      	strb	r3, [r7, #31]
 8006a06:	e00d      	b.n	8006a24 <UART_SetConfig+0x348>
 8006a08:	2302      	movs	r3, #2
 8006a0a:	77fb      	strb	r3, [r7, #31]
 8006a0c:	e00a      	b.n	8006a24 <UART_SetConfig+0x348>
 8006a0e:	2304      	movs	r3, #4
 8006a10:	77fb      	strb	r3, [r7, #31]
 8006a12:	e007      	b.n	8006a24 <UART_SetConfig+0x348>
 8006a14:	2308      	movs	r3, #8
 8006a16:	77fb      	strb	r3, [r7, #31]
 8006a18:	e004      	b.n	8006a24 <UART_SetConfig+0x348>
 8006a1a:	2310      	movs	r3, #16
 8006a1c:	77fb      	strb	r3, [r7, #31]
 8006a1e:	e001      	b.n	8006a24 <UART_SetConfig+0x348>
 8006a20:	2310      	movs	r3, #16
 8006a22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2c:	d15b      	bne.n	8006ae6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a2e:	7ffb      	ldrb	r3, [r7, #31]
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d828      	bhi.n	8006a86 <UART_SetConfig+0x3aa>
 8006a34:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <UART_SetConfig+0x360>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a61 	.word	0x08006a61
 8006a40:	08006a69 	.word	0x08006a69
 8006a44:	08006a71 	.word	0x08006a71
 8006a48:	08006a87 	.word	0x08006a87
 8006a4c:	08006a77 	.word	0x08006a77
 8006a50:	08006a87 	.word	0x08006a87
 8006a54:	08006a87 	.word	0x08006a87
 8006a58:	08006a87 	.word	0x08006a87
 8006a5c:	08006a7f 	.word	0x08006a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a60:	f7fd fc34 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8006a64:	61b8      	str	r0, [r7, #24]
        break;
 8006a66:	e013      	b.n	8006a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a68:	f7fd fc44 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8006a6c:	61b8      	str	r0, [r7, #24]
        break;
 8006a6e:	e00f      	b.n	8006a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a70:	4b4b      	ldr	r3, [pc, #300]	; (8006ba0 <UART_SetConfig+0x4c4>)
 8006a72:	61bb      	str	r3, [r7, #24]
        break;
 8006a74:	e00c      	b.n	8006a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a76:	f7fd fb17 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8006a7a:	61b8      	str	r0, [r7, #24]
        break;
 8006a7c:	e008      	b.n	8006a90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a82:	61bb      	str	r3, [r7, #24]
        break;
 8006a84:	e004      	b.n	8006a90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	77bb      	strb	r3, [r7, #30]
        break;
 8006a8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a90:	69bb      	ldr	r3, [r7, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d074      	beq.n	8006b80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	005a      	lsls	r2, r3, #1
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	441a      	add	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aaa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b0f      	cmp	r3, #15
 8006ab0:	d916      	bls.n	8006ae0 <UART_SetConfig+0x404>
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d212      	bcs.n	8006ae0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	f023 030f 	bic.w	r3, r3, #15
 8006ac2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	085b      	lsrs	r3, r3, #1
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	f003 0307 	and.w	r3, r3, #7
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	89fb      	ldrh	r3, [r7, #14]
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	89fa      	ldrh	r2, [r7, #14]
 8006adc:	60da      	str	r2, [r3, #12]
 8006ade:	e04f      	b.n	8006b80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	77bb      	strb	r3, [r7, #30]
 8006ae4:	e04c      	b.n	8006b80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ae6:	7ffb      	ldrb	r3, [r7, #31]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d828      	bhi.n	8006b3e <UART_SetConfig+0x462>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <UART_SetConfig+0x418>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b19 	.word	0x08006b19
 8006af8:	08006b21 	.word	0x08006b21
 8006afc:	08006b29 	.word	0x08006b29
 8006b00:	08006b3f 	.word	0x08006b3f
 8006b04:	08006b2f 	.word	0x08006b2f
 8006b08:	08006b3f 	.word	0x08006b3f
 8006b0c:	08006b3f 	.word	0x08006b3f
 8006b10:	08006b3f 	.word	0x08006b3f
 8006b14:	08006b37 	.word	0x08006b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b18:	f7fd fbd8 	bl	80042cc <HAL_RCC_GetPCLK1Freq>
 8006b1c:	61b8      	str	r0, [r7, #24]
        break;
 8006b1e:	e013      	b.n	8006b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b20:	f7fd fbe8 	bl	80042f4 <HAL_RCC_GetPCLK2Freq>
 8006b24:	61b8      	str	r0, [r7, #24]
        break;
 8006b26:	e00f      	b.n	8006b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b28:	4b1d      	ldr	r3, [pc, #116]	; (8006ba0 <UART_SetConfig+0x4c4>)
 8006b2a:	61bb      	str	r3, [r7, #24]
        break;
 8006b2c:	e00c      	b.n	8006b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b2e:	f7fd fabb 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 8006b32:	61b8      	str	r0, [r7, #24]
        break;
 8006b34:	e008      	b.n	8006b48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	61bb      	str	r3, [r7, #24]
        break;
 8006b3c:	e004      	b.n	8006b48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	77bb      	strb	r3, [r7, #30]
        break;
 8006b46:	bf00      	nop
    }

    if (pclk != 0U)
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d018      	beq.n	8006b80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	085a      	lsrs	r2, r3, #1
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	441a      	add	r2, r3
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	2b0f      	cmp	r3, #15
 8006b66:	d909      	bls.n	8006b7c <UART_SetConfig+0x4a0>
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b6e:	d205      	bcs.n	8006b7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	b29a      	uxth	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	e001      	b.n	8006b80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	40007c00 	.word	0x40007c00
 8006b9c:	40023800 	.word	0x40023800
 8006ba0:	00f42400 	.word	0x00f42400

08006ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f003 0308 	and.w	r3, r3, #8
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f003 0310 	and.w	r3, r3, #16
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00a      	beq.n	8006c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5a:	f003 0320 	and.w	r3, r3, #32
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d00a      	beq.n	8006c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d01a      	beq.n	8006cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ca2:	d10a      	bne.n	8006cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
  }
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cf8:	f7fb fcce 	bl	8002698 <HAL_GetTick>
 8006cfc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b08      	cmp	r3, #8
 8006d0a:	d10e      	bne.n	8006d2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f81b 	bl	8006d56 <UART_WaitOnFlagUntilTimeout>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e011      	b.n	8006d4e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b09c      	sub	sp, #112	; 0x70
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	603b      	str	r3, [r7, #0]
 8006d62:	4613      	mov	r3, r2
 8006d64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d66:	e0a7      	b.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6e:	f000 80a3 	beq.w	8006eb8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d72:	f7fb fc91 	bl	8002698 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d302      	bcc.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13f      	bne.n	8006e08 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d9c:	667b      	str	r3, [r7, #100]	; 0x64
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	461a      	mov	r2, r3
 8006da4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006daa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006dac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006dae:	e841 2300 	strex	r3, r2, [r1]
 8006db2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1e6      	bne.n	8006d88 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dda:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ddc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e5      	bne.n	8006dba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2220      	movs	r2, #32
 8006df2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	e068      	b.n	8006eda <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d050      	beq.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69db      	ldr	r3, [r3, #28]
 8006e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e24:	d148      	bne.n	8006eb8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e2e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e50:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e6      	bne.n	8006e30 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	e853 3f00 	ldrex	r3, [r3]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f023 0301 	bic.w	r3, r3, #1
 8006e78:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3308      	adds	r3, #8
 8006e80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e82:	623a      	str	r2, [r7, #32]
 8006e84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e86:	69f9      	ldr	r1, [r7, #28]
 8006e88:	6a3a      	ldr	r2, [r7, #32]
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1e5      	bne.n	8006e62 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e010      	b.n	8006eda <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	69da      	ldr	r2, [r3, #28]
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	f43f af48 	beq.w	8006d68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3770      	adds	r7, #112	; 0x70
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b095      	sub	sp, #84	; 0x54
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f08:	643b      	str	r3, [r7, #64]	; 0x40
 8006f0a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e6      	bne.n	8006eea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f2c:	69fb      	ldr	r3, [r7, #28]
 8006f2e:	f023 0301 	bic.w	r3, r3, #1
 8006f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3308      	adds	r3, #8
 8006f3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e5      	bne.n	8006f1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d118      	bne.n	8006f8a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	e853 3f00 	ldrex	r3, [r3]
 8006f64:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	f023 0310 	bic.w	r3, r3, #16
 8006f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7a:	6979      	ldr	r1, [r7, #20]
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	e841 2300 	strex	r3, r2, [r1]
 8006f82:	613b      	str	r3, [r7, #16]
   return(result);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1e6      	bne.n	8006f58 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f9e:	bf00      	nop
 8006fa0:	3754      	adds	r7, #84	; 0x54
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fc8:	68f8      	ldr	r0, [r7, #12]
 8006fca:	f7ff fb71 	bl	80066b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fce:	bf00      	nop
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	61bb      	str	r3, [r7, #24]
 8006ffe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6979      	ldr	r1, [r7, #20]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	613b      	str	r3, [r7, #16]
   return(result);
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2220      	movs	r2, #32
 8007014:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fb3d 	bl	800669c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007022:	bf00      	nop
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <malloc>:
 800702c:	4b02      	ldr	r3, [pc, #8]	; (8007038 <malloc+0xc>)
 800702e:	4601      	mov	r1, r0
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	f000 b82b 	b.w	800708c <_malloc_r>
 8007036:	bf00      	nop
 8007038:	200000b0 	.word	0x200000b0

0800703c <free>:
 800703c:	4b02      	ldr	r3, [pc, #8]	; (8007048 <free+0xc>)
 800703e:	4601      	mov	r1, r0
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	f000 ba85 	b.w	8007550 <_free_r>
 8007046:	bf00      	nop
 8007048:	200000b0 	.word	0x200000b0

0800704c <sbrk_aligned>:
 800704c:	b570      	push	{r4, r5, r6, lr}
 800704e:	4e0e      	ldr	r6, [pc, #56]	; (8007088 <sbrk_aligned+0x3c>)
 8007050:	460c      	mov	r4, r1
 8007052:	6831      	ldr	r1, [r6, #0]
 8007054:	4605      	mov	r5, r0
 8007056:	b911      	cbnz	r1, 800705e <sbrk_aligned+0x12>
 8007058:	f000 fa2a 	bl	80074b0 <_sbrk_r>
 800705c:	6030      	str	r0, [r6, #0]
 800705e:	4621      	mov	r1, r4
 8007060:	4628      	mov	r0, r5
 8007062:	f000 fa25 	bl	80074b0 <_sbrk_r>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d00a      	beq.n	8007080 <sbrk_aligned+0x34>
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d007      	beq.n	8007084 <sbrk_aligned+0x38>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4628      	mov	r0, r5
 8007078:	f000 fa1a 	bl	80074b0 <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d101      	bne.n	8007084 <sbrk_aligned+0x38>
 8007080:	f04f 34ff 	mov.w	r4, #4294967295
 8007084:	4620      	mov	r0, r4
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	20000320 	.word	0x20000320

0800708c <_malloc_r>:
 800708c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007090:	1ccd      	adds	r5, r1, #3
 8007092:	f025 0503 	bic.w	r5, r5, #3
 8007096:	3508      	adds	r5, #8
 8007098:	2d0c      	cmp	r5, #12
 800709a:	bf38      	it	cc
 800709c:	250c      	movcc	r5, #12
 800709e:	2d00      	cmp	r5, #0
 80070a0:	4607      	mov	r7, r0
 80070a2:	db01      	blt.n	80070a8 <_malloc_r+0x1c>
 80070a4:	42a9      	cmp	r1, r5
 80070a6:	d905      	bls.n	80070b4 <_malloc_r+0x28>
 80070a8:	230c      	movs	r3, #12
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	2600      	movs	r6, #0
 80070ae:	4630      	mov	r0, r6
 80070b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007188 <_malloc_r+0xfc>
 80070b8:	f000 f868 	bl	800718c <__malloc_lock>
 80070bc:	f8d8 3000 	ldr.w	r3, [r8]
 80070c0:	461c      	mov	r4, r3
 80070c2:	bb5c      	cbnz	r4, 800711c <_malloc_r+0x90>
 80070c4:	4629      	mov	r1, r5
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7ff ffc0 	bl	800704c <sbrk_aligned>
 80070cc:	1c43      	adds	r3, r0, #1
 80070ce:	4604      	mov	r4, r0
 80070d0:	d155      	bne.n	800717e <_malloc_r+0xf2>
 80070d2:	f8d8 4000 	ldr.w	r4, [r8]
 80070d6:	4626      	mov	r6, r4
 80070d8:	2e00      	cmp	r6, #0
 80070da:	d145      	bne.n	8007168 <_malloc_r+0xdc>
 80070dc:	2c00      	cmp	r4, #0
 80070de:	d048      	beq.n	8007172 <_malloc_r+0xe6>
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	4631      	mov	r1, r6
 80070e4:	4638      	mov	r0, r7
 80070e6:	eb04 0903 	add.w	r9, r4, r3
 80070ea:	f000 f9e1 	bl	80074b0 <_sbrk_r>
 80070ee:	4581      	cmp	r9, r0
 80070f0:	d13f      	bne.n	8007172 <_malloc_r+0xe6>
 80070f2:	6821      	ldr	r1, [r4, #0]
 80070f4:	1a6d      	subs	r5, r5, r1
 80070f6:	4629      	mov	r1, r5
 80070f8:	4638      	mov	r0, r7
 80070fa:	f7ff ffa7 	bl	800704c <sbrk_aligned>
 80070fe:	3001      	adds	r0, #1
 8007100:	d037      	beq.n	8007172 <_malloc_r+0xe6>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	442b      	add	r3, r5
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	f8d8 3000 	ldr.w	r3, [r8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d038      	beq.n	8007182 <_malloc_r+0xf6>
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	42a2      	cmp	r2, r4
 8007114:	d12b      	bne.n	800716e <_malloc_r+0xe2>
 8007116:	2200      	movs	r2, #0
 8007118:	605a      	str	r2, [r3, #4]
 800711a:	e00f      	b.n	800713c <_malloc_r+0xb0>
 800711c:	6822      	ldr	r2, [r4, #0]
 800711e:	1b52      	subs	r2, r2, r5
 8007120:	d41f      	bmi.n	8007162 <_malloc_r+0xd6>
 8007122:	2a0b      	cmp	r2, #11
 8007124:	d917      	bls.n	8007156 <_malloc_r+0xca>
 8007126:	1961      	adds	r1, r4, r5
 8007128:	42a3      	cmp	r3, r4
 800712a:	6025      	str	r5, [r4, #0]
 800712c:	bf18      	it	ne
 800712e:	6059      	strne	r1, [r3, #4]
 8007130:	6863      	ldr	r3, [r4, #4]
 8007132:	bf08      	it	eq
 8007134:	f8c8 1000 	streq.w	r1, [r8]
 8007138:	5162      	str	r2, [r4, r5]
 800713a:	604b      	str	r3, [r1, #4]
 800713c:	4638      	mov	r0, r7
 800713e:	f104 060b 	add.w	r6, r4, #11
 8007142:	f000 f829 	bl	8007198 <__malloc_unlock>
 8007146:	f026 0607 	bic.w	r6, r6, #7
 800714a:	1d23      	adds	r3, r4, #4
 800714c:	1af2      	subs	r2, r6, r3
 800714e:	d0ae      	beq.n	80070ae <_malloc_r+0x22>
 8007150:	1b9b      	subs	r3, r3, r6
 8007152:	50a3      	str	r3, [r4, r2]
 8007154:	e7ab      	b.n	80070ae <_malloc_r+0x22>
 8007156:	42a3      	cmp	r3, r4
 8007158:	6862      	ldr	r2, [r4, #4]
 800715a:	d1dd      	bne.n	8007118 <_malloc_r+0x8c>
 800715c:	f8c8 2000 	str.w	r2, [r8]
 8007160:	e7ec      	b.n	800713c <_malloc_r+0xb0>
 8007162:	4623      	mov	r3, r4
 8007164:	6864      	ldr	r4, [r4, #4]
 8007166:	e7ac      	b.n	80070c2 <_malloc_r+0x36>
 8007168:	4634      	mov	r4, r6
 800716a:	6876      	ldr	r6, [r6, #4]
 800716c:	e7b4      	b.n	80070d8 <_malloc_r+0x4c>
 800716e:	4613      	mov	r3, r2
 8007170:	e7cc      	b.n	800710c <_malloc_r+0x80>
 8007172:	230c      	movs	r3, #12
 8007174:	603b      	str	r3, [r7, #0]
 8007176:	4638      	mov	r0, r7
 8007178:	f000 f80e 	bl	8007198 <__malloc_unlock>
 800717c:	e797      	b.n	80070ae <_malloc_r+0x22>
 800717e:	6025      	str	r5, [r4, #0]
 8007180:	e7dc      	b.n	800713c <_malloc_r+0xb0>
 8007182:	605b      	str	r3, [r3, #4]
 8007184:	deff      	udf	#255	; 0xff
 8007186:	bf00      	nop
 8007188:	2000031c 	.word	0x2000031c

0800718c <__malloc_lock>:
 800718c:	4801      	ldr	r0, [pc, #4]	; (8007194 <__malloc_lock+0x8>)
 800718e:	f000 b9dc 	b.w	800754a <__retarget_lock_acquire_recursive>
 8007192:	bf00      	nop
 8007194:	20000464 	.word	0x20000464

08007198 <__malloc_unlock>:
 8007198:	4801      	ldr	r0, [pc, #4]	; (80071a0 <__malloc_unlock+0x8>)
 800719a:	f000 b9d7 	b.w	800754c <__retarget_lock_release_recursive>
 800719e:	bf00      	nop
 80071a0:	20000464 	.word	0x20000464

080071a4 <gcvt>:
 80071a4:	b530      	push	{r4, r5, lr}
 80071a6:	2200      	movs	r2, #0
 80071a8:	b085      	sub	sp, #20
 80071aa:	460c      	mov	r4, r1
 80071ac:	4605      	mov	r5, r0
 80071ae:	2300      	movs	r3, #0
 80071b0:	ec51 0b10 	vmov	r0, r1, d0
 80071b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071b8:	f7f9 fcb0 	bl	8000b1c <__aeabi_dcmplt>
 80071bc:	ed9d 0b02 	vldr	d0, [sp, #8]
 80071c0:	4622      	mov	r2, r4
 80071c2:	b118      	cbz	r0, 80071cc <gcvt+0x28>
 80071c4:	232d      	movs	r3, #45	; 0x2d
 80071c6:	f802 3b01 	strb.w	r3, [r2], #1
 80071ca:	3d01      	subs	r5, #1
 80071cc:	2300      	movs	r3, #0
 80071ce:	4806      	ldr	r0, [pc, #24]	; (80071e8 <gcvt+0x44>)
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	4629      	mov	r1, r5
 80071d4:	2367      	movs	r3, #103	; 0x67
 80071d6:	6800      	ldr	r0, [r0, #0]
 80071d8:	f000 fa7e 	bl	80076d8 <_gcvt>
 80071dc:	2800      	cmp	r0, #0
 80071de:	bf14      	ite	ne
 80071e0:	4620      	movne	r0, r4
 80071e2:	2000      	moveq	r0, #0
 80071e4:	b005      	add	sp, #20
 80071e6:	bd30      	pop	{r4, r5, pc}
 80071e8:	200000b0 	.word	0x200000b0

080071ec <std>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b510      	push	{r4, lr}
 80071f0:	4604      	mov	r4, r0
 80071f2:	e9c0 3300 	strd	r3, r3, [r0]
 80071f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071fa:	6083      	str	r3, [r0, #8]
 80071fc:	8181      	strh	r1, [r0, #12]
 80071fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007200:	81c2      	strh	r2, [r0, #14]
 8007202:	6183      	str	r3, [r0, #24]
 8007204:	4619      	mov	r1, r3
 8007206:	2208      	movs	r2, #8
 8007208:	305c      	adds	r0, #92	; 0x5c
 800720a:	f000 f914 	bl	8007436 <memset>
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <std+0x58>)
 8007210:	6263      	str	r3, [r4, #36]	; 0x24
 8007212:	4b0d      	ldr	r3, [pc, #52]	; (8007248 <std+0x5c>)
 8007214:	62a3      	str	r3, [r4, #40]	; 0x28
 8007216:	4b0d      	ldr	r3, [pc, #52]	; (800724c <std+0x60>)
 8007218:	62e3      	str	r3, [r4, #44]	; 0x2c
 800721a:	4b0d      	ldr	r3, [pc, #52]	; (8007250 <std+0x64>)
 800721c:	6323      	str	r3, [r4, #48]	; 0x30
 800721e:	4b0d      	ldr	r3, [pc, #52]	; (8007254 <std+0x68>)
 8007220:	6224      	str	r4, [r4, #32]
 8007222:	429c      	cmp	r4, r3
 8007224:	d006      	beq.n	8007234 <std+0x48>
 8007226:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800722a:	4294      	cmp	r4, r2
 800722c:	d002      	beq.n	8007234 <std+0x48>
 800722e:	33d0      	adds	r3, #208	; 0xd0
 8007230:	429c      	cmp	r4, r3
 8007232:	d105      	bne.n	8007240 <std+0x54>
 8007234:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800723c:	f000 b984 	b.w	8007548 <__retarget_lock_init_recursive>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	bf00      	nop
 8007244:	080073b1 	.word	0x080073b1
 8007248:	080073d3 	.word	0x080073d3
 800724c:	0800740b 	.word	0x0800740b
 8007250:	0800742f 	.word	0x0800742f
 8007254:	20000324 	.word	0x20000324

08007258 <stdio_exit_handler>:
 8007258:	4a02      	ldr	r2, [pc, #8]	; (8007264 <stdio_exit_handler+0xc>)
 800725a:	4903      	ldr	r1, [pc, #12]	; (8007268 <stdio_exit_handler+0x10>)
 800725c:	4803      	ldr	r0, [pc, #12]	; (800726c <stdio_exit_handler+0x14>)
 800725e:	f000 b869 	b.w	8007334 <_fwalk_sglue>
 8007262:	bf00      	nop
 8007264:	20000058 	.word	0x20000058
 8007268:	08007f35 	.word	0x08007f35
 800726c:	20000064 	.word	0x20000064

08007270 <cleanup_stdio>:
 8007270:	6841      	ldr	r1, [r0, #4]
 8007272:	4b0c      	ldr	r3, [pc, #48]	; (80072a4 <cleanup_stdio+0x34>)
 8007274:	4299      	cmp	r1, r3
 8007276:	b510      	push	{r4, lr}
 8007278:	4604      	mov	r4, r0
 800727a:	d001      	beq.n	8007280 <cleanup_stdio+0x10>
 800727c:	f000 fe5a 	bl	8007f34 <_fflush_r>
 8007280:	68a1      	ldr	r1, [r4, #8]
 8007282:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <cleanup_stdio+0x38>)
 8007284:	4299      	cmp	r1, r3
 8007286:	d002      	beq.n	800728e <cleanup_stdio+0x1e>
 8007288:	4620      	mov	r0, r4
 800728a:	f000 fe53 	bl	8007f34 <_fflush_r>
 800728e:	68e1      	ldr	r1, [r4, #12]
 8007290:	4b06      	ldr	r3, [pc, #24]	; (80072ac <cleanup_stdio+0x3c>)
 8007292:	4299      	cmp	r1, r3
 8007294:	d004      	beq.n	80072a0 <cleanup_stdio+0x30>
 8007296:	4620      	mov	r0, r4
 8007298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800729c:	f000 be4a 	b.w	8007f34 <_fflush_r>
 80072a0:	bd10      	pop	{r4, pc}
 80072a2:	bf00      	nop
 80072a4:	20000324 	.word	0x20000324
 80072a8:	2000038c 	.word	0x2000038c
 80072ac:	200003f4 	.word	0x200003f4

080072b0 <global_stdio_init.part.0>:
 80072b0:	b510      	push	{r4, lr}
 80072b2:	4b0b      	ldr	r3, [pc, #44]	; (80072e0 <global_stdio_init.part.0+0x30>)
 80072b4:	4c0b      	ldr	r4, [pc, #44]	; (80072e4 <global_stdio_init.part.0+0x34>)
 80072b6:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <global_stdio_init.part.0+0x38>)
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4620      	mov	r0, r4
 80072bc:	2200      	movs	r2, #0
 80072be:	2104      	movs	r1, #4
 80072c0:	f7ff ff94 	bl	80071ec <std>
 80072c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80072c8:	2201      	movs	r2, #1
 80072ca:	2109      	movs	r1, #9
 80072cc:	f7ff ff8e 	bl	80071ec <std>
 80072d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80072d4:	2202      	movs	r2, #2
 80072d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072da:	2112      	movs	r1, #18
 80072dc:	f7ff bf86 	b.w	80071ec <std>
 80072e0:	2000045c 	.word	0x2000045c
 80072e4:	20000324 	.word	0x20000324
 80072e8:	08007259 	.word	0x08007259

080072ec <__sfp_lock_acquire>:
 80072ec:	4801      	ldr	r0, [pc, #4]	; (80072f4 <__sfp_lock_acquire+0x8>)
 80072ee:	f000 b92c 	b.w	800754a <__retarget_lock_acquire_recursive>
 80072f2:	bf00      	nop
 80072f4:	20000465 	.word	0x20000465

080072f8 <__sfp_lock_release>:
 80072f8:	4801      	ldr	r0, [pc, #4]	; (8007300 <__sfp_lock_release+0x8>)
 80072fa:	f000 b927 	b.w	800754c <__retarget_lock_release_recursive>
 80072fe:	bf00      	nop
 8007300:	20000465 	.word	0x20000465

08007304 <__sinit>:
 8007304:	b510      	push	{r4, lr}
 8007306:	4604      	mov	r4, r0
 8007308:	f7ff fff0 	bl	80072ec <__sfp_lock_acquire>
 800730c:	6a23      	ldr	r3, [r4, #32]
 800730e:	b11b      	cbz	r3, 8007318 <__sinit+0x14>
 8007310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007314:	f7ff bff0 	b.w	80072f8 <__sfp_lock_release>
 8007318:	4b04      	ldr	r3, [pc, #16]	; (800732c <__sinit+0x28>)
 800731a:	6223      	str	r3, [r4, #32]
 800731c:	4b04      	ldr	r3, [pc, #16]	; (8007330 <__sinit+0x2c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1f5      	bne.n	8007310 <__sinit+0xc>
 8007324:	f7ff ffc4 	bl	80072b0 <global_stdio_init.part.0>
 8007328:	e7f2      	b.n	8007310 <__sinit+0xc>
 800732a:	bf00      	nop
 800732c:	08007271 	.word	0x08007271
 8007330:	2000045c 	.word	0x2000045c

08007334 <_fwalk_sglue>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4607      	mov	r7, r0
 800733a:	4688      	mov	r8, r1
 800733c:	4614      	mov	r4, r2
 800733e:	2600      	movs	r6, #0
 8007340:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007344:	f1b9 0901 	subs.w	r9, r9, #1
 8007348:	d505      	bpl.n	8007356 <_fwalk_sglue+0x22>
 800734a:	6824      	ldr	r4, [r4, #0]
 800734c:	2c00      	cmp	r4, #0
 800734e:	d1f7      	bne.n	8007340 <_fwalk_sglue+0xc>
 8007350:	4630      	mov	r0, r6
 8007352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d907      	bls.n	800736c <_fwalk_sglue+0x38>
 800735c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007360:	3301      	adds	r3, #1
 8007362:	d003      	beq.n	800736c <_fwalk_sglue+0x38>
 8007364:	4629      	mov	r1, r5
 8007366:	4638      	mov	r0, r7
 8007368:	47c0      	blx	r8
 800736a:	4306      	orrs	r6, r0
 800736c:	3568      	adds	r5, #104	; 0x68
 800736e:	e7e9      	b.n	8007344 <_fwalk_sglue+0x10>

08007370 <siprintf>:
 8007370:	b40e      	push	{r1, r2, r3}
 8007372:	b500      	push	{lr}
 8007374:	b09c      	sub	sp, #112	; 0x70
 8007376:	ab1d      	add	r3, sp, #116	; 0x74
 8007378:	9002      	str	r0, [sp, #8]
 800737a:	9006      	str	r0, [sp, #24]
 800737c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007380:	4809      	ldr	r0, [pc, #36]	; (80073a8 <siprintf+0x38>)
 8007382:	9107      	str	r1, [sp, #28]
 8007384:	9104      	str	r1, [sp, #16]
 8007386:	4909      	ldr	r1, [pc, #36]	; (80073ac <siprintf+0x3c>)
 8007388:	f853 2b04 	ldr.w	r2, [r3], #4
 800738c:	9105      	str	r1, [sp, #20]
 800738e:	6800      	ldr	r0, [r0, #0]
 8007390:	9301      	str	r3, [sp, #4]
 8007392:	a902      	add	r1, sp, #8
 8007394:	f000 faba 	bl	800790c <_svfiprintf_r>
 8007398:	9b02      	ldr	r3, [sp, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	701a      	strb	r2, [r3, #0]
 800739e:	b01c      	add	sp, #112	; 0x70
 80073a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a4:	b003      	add	sp, #12
 80073a6:	4770      	bx	lr
 80073a8:	200000b0 	.word	0x200000b0
 80073ac:	ffff0208 	.word	0xffff0208

080073b0 <__sread>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	f000 f868 	bl	800748c <_read_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	bfab      	itete	ge
 80073c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrhlt	r3, [r4, #12]
 80073c4:	181b      	addge	r3, r3, r0
 80073c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ca:	bfac      	ite	ge
 80073cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ce:	81a3      	strhlt	r3, [r4, #12]
 80073d0:	bd10      	pop	{r4, pc}

080073d2 <__swrite>:
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	461f      	mov	r7, r3
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	05db      	lsls	r3, r3, #23
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	4616      	mov	r6, r2
 80073e2:	d505      	bpl.n	80073f0 <__swrite+0x1e>
 80073e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e8:	2302      	movs	r3, #2
 80073ea:	2200      	movs	r2, #0
 80073ec:	f000 f83c 	bl	8007468 <_lseek_r>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	4632      	mov	r2, r6
 80073fe:	463b      	mov	r3, r7
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007406:	f000 b863 	b.w	80074d0 <_write_r>

0800740a <__sseek>:
 800740a:	b510      	push	{r4, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 f829 	bl	8007468 <_lseek_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	bf15      	itete	ne
 800741c:	6560      	strne	r0, [r4, #84]	; 0x54
 800741e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strheq	r3, [r4, #12]
 8007428:	bf18      	it	ne
 800742a:	81a3      	strhne	r3, [r4, #12]
 800742c:	bd10      	pop	{r4, pc}

0800742e <__sclose>:
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 b809 	b.w	8007448 <_close_r>

08007436 <memset>:
 8007436:	4402      	add	r2, r0
 8007438:	4603      	mov	r3, r0
 800743a:	4293      	cmp	r3, r2
 800743c:	d100      	bne.n	8007440 <memset+0xa>
 800743e:	4770      	bx	lr
 8007440:	f803 1b01 	strb.w	r1, [r3], #1
 8007444:	e7f9      	b.n	800743a <memset+0x4>
	...

08007448 <_close_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4d06      	ldr	r5, [pc, #24]	; (8007464 <_close_r+0x1c>)
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	4608      	mov	r0, r1
 8007452:	602b      	str	r3, [r5, #0]
 8007454:	f7fa fd8b 	bl	8001f6e <_close>
 8007458:	1c43      	adds	r3, r0, #1
 800745a:	d102      	bne.n	8007462 <_close_r+0x1a>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	b103      	cbz	r3, 8007462 <_close_r+0x1a>
 8007460:	6023      	str	r3, [r4, #0]
 8007462:	bd38      	pop	{r3, r4, r5, pc}
 8007464:	20000460 	.word	0x20000460

08007468 <_lseek_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4d07      	ldr	r5, [pc, #28]	; (8007488 <_lseek_r+0x20>)
 800746c:	4604      	mov	r4, r0
 800746e:	4608      	mov	r0, r1
 8007470:	4611      	mov	r1, r2
 8007472:	2200      	movs	r2, #0
 8007474:	602a      	str	r2, [r5, #0]
 8007476:	461a      	mov	r2, r3
 8007478:	f7fa fda0 	bl	8001fbc <_lseek>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d102      	bne.n	8007486 <_lseek_r+0x1e>
 8007480:	682b      	ldr	r3, [r5, #0]
 8007482:	b103      	cbz	r3, 8007486 <_lseek_r+0x1e>
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	bd38      	pop	{r3, r4, r5, pc}
 8007488:	20000460 	.word	0x20000460

0800748c <_read_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d07      	ldr	r5, [pc, #28]	; (80074ac <_read_r+0x20>)
 8007490:	4604      	mov	r4, r0
 8007492:	4608      	mov	r0, r1
 8007494:	4611      	mov	r1, r2
 8007496:	2200      	movs	r2, #0
 8007498:	602a      	str	r2, [r5, #0]
 800749a:	461a      	mov	r2, r3
 800749c:	f7fa fd2e 	bl	8001efc <_read>
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	d102      	bne.n	80074aa <_read_r+0x1e>
 80074a4:	682b      	ldr	r3, [r5, #0]
 80074a6:	b103      	cbz	r3, 80074aa <_read_r+0x1e>
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	bd38      	pop	{r3, r4, r5, pc}
 80074ac:	20000460 	.word	0x20000460

080074b0 <_sbrk_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d06      	ldr	r5, [pc, #24]	; (80074cc <_sbrk_r+0x1c>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	f7fa fd8c 	bl	8001fd8 <_sbrk>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_sbrk_r+0x1a>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_sbrk_r+0x1a>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20000460 	.word	0x20000460

080074d0 <_write_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d07      	ldr	r5, [pc, #28]	; (80074f0 <_write_r+0x20>)
 80074d4:	4604      	mov	r4, r0
 80074d6:	4608      	mov	r0, r1
 80074d8:	4611      	mov	r1, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	602a      	str	r2, [r5, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f7fa fd29 	bl	8001f36 <_write>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_write_r+0x1e>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_write_r+0x1e>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000460 	.word	0x20000460

080074f4 <__errno>:
 80074f4:	4b01      	ldr	r3, [pc, #4]	; (80074fc <__errno+0x8>)
 80074f6:	6818      	ldr	r0, [r3, #0]
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	200000b0 	.word	0x200000b0

08007500 <__libc_init_array>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4d0d      	ldr	r5, [pc, #52]	; (8007538 <__libc_init_array+0x38>)
 8007504:	4c0d      	ldr	r4, [pc, #52]	; (800753c <__libc_init_array+0x3c>)
 8007506:	1b64      	subs	r4, r4, r5
 8007508:	10a4      	asrs	r4, r4, #2
 800750a:	2600      	movs	r6, #0
 800750c:	42a6      	cmp	r6, r4
 800750e:	d109      	bne.n	8007524 <__libc_init_array+0x24>
 8007510:	4d0b      	ldr	r5, [pc, #44]	; (8007540 <__libc_init_array+0x40>)
 8007512:	4c0c      	ldr	r4, [pc, #48]	; (8007544 <__libc_init_array+0x44>)
 8007514:	f002 faa2 	bl	8009a5c <_init>
 8007518:	1b64      	subs	r4, r4, r5
 800751a:	10a4      	asrs	r4, r4, #2
 800751c:	2600      	movs	r6, #0
 800751e:	42a6      	cmp	r6, r4
 8007520:	d105      	bne.n	800752e <__libc_init_array+0x2e>
 8007522:	bd70      	pop	{r4, r5, r6, pc}
 8007524:	f855 3b04 	ldr.w	r3, [r5], #4
 8007528:	4798      	blx	r3
 800752a:	3601      	adds	r6, #1
 800752c:	e7ee      	b.n	800750c <__libc_init_array+0xc>
 800752e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007532:	4798      	blx	r3
 8007534:	3601      	adds	r6, #1
 8007536:	e7f2      	b.n	800751e <__libc_init_array+0x1e>
 8007538:	08009d38 	.word	0x08009d38
 800753c:	08009d38 	.word	0x08009d38
 8007540:	08009d38 	.word	0x08009d38
 8007544:	08009d3c 	.word	0x08009d3c

08007548 <__retarget_lock_init_recursive>:
 8007548:	4770      	bx	lr

0800754a <__retarget_lock_acquire_recursive>:
 800754a:	4770      	bx	lr

0800754c <__retarget_lock_release_recursive>:
 800754c:	4770      	bx	lr
	...

08007550 <_free_r>:
 8007550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007552:	2900      	cmp	r1, #0
 8007554:	d044      	beq.n	80075e0 <_free_r+0x90>
 8007556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800755a:	9001      	str	r0, [sp, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f1a1 0404 	sub.w	r4, r1, #4
 8007562:	bfb8      	it	lt
 8007564:	18e4      	addlt	r4, r4, r3
 8007566:	f7ff fe11 	bl	800718c <__malloc_lock>
 800756a:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <_free_r+0x94>)
 800756c:	9801      	ldr	r0, [sp, #4]
 800756e:	6813      	ldr	r3, [r2, #0]
 8007570:	b933      	cbnz	r3, 8007580 <_free_r+0x30>
 8007572:	6063      	str	r3, [r4, #4]
 8007574:	6014      	str	r4, [r2, #0]
 8007576:	b003      	add	sp, #12
 8007578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800757c:	f7ff be0c 	b.w	8007198 <__malloc_unlock>
 8007580:	42a3      	cmp	r3, r4
 8007582:	d908      	bls.n	8007596 <_free_r+0x46>
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	1961      	adds	r1, r4, r5
 8007588:	428b      	cmp	r3, r1
 800758a:	bf01      	itttt	eq
 800758c:	6819      	ldreq	r1, [r3, #0]
 800758e:	685b      	ldreq	r3, [r3, #4]
 8007590:	1949      	addeq	r1, r1, r5
 8007592:	6021      	streq	r1, [r4, #0]
 8007594:	e7ed      	b.n	8007572 <_free_r+0x22>
 8007596:	461a      	mov	r2, r3
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	b10b      	cbz	r3, 80075a0 <_free_r+0x50>
 800759c:	42a3      	cmp	r3, r4
 800759e:	d9fa      	bls.n	8007596 <_free_r+0x46>
 80075a0:	6811      	ldr	r1, [r2, #0]
 80075a2:	1855      	adds	r5, r2, r1
 80075a4:	42a5      	cmp	r5, r4
 80075a6:	d10b      	bne.n	80075c0 <_free_r+0x70>
 80075a8:	6824      	ldr	r4, [r4, #0]
 80075aa:	4421      	add	r1, r4
 80075ac:	1854      	adds	r4, r2, r1
 80075ae:	42a3      	cmp	r3, r4
 80075b0:	6011      	str	r1, [r2, #0]
 80075b2:	d1e0      	bne.n	8007576 <_free_r+0x26>
 80075b4:	681c      	ldr	r4, [r3, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	6053      	str	r3, [r2, #4]
 80075ba:	440c      	add	r4, r1
 80075bc:	6014      	str	r4, [r2, #0]
 80075be:	e7da      	b.n	8007576 <_free_r+0x26>
 80075c0:	d902      	bls.n	80075c8 <_free_r+0x78>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	e7d6      	b.n	8007576 <_free_r+0x26>
 80075c8:	6825      	ldr	r5, [r4, #0]
 80075ca:	1961      	adds	r1, r4, r5
 80075cc:	428b      	cmp	r3, r1
 80075ce:	bf04      	itt	eq
 80075d0:	6819      	ldreq	r1, [r3, #0]
 80075d2:	685b      	ldreq	r3, [r3, #4]
 80075d4:	6063      	str	r3, [r4, #4]
 80075d6:	bf04      	itt	eq
 80075d8:	1949      	addeq	r1, r1, r5
 80075da:	6021      	streq	r1, [r4, #0]
 80075dc:	6054      	str	r4, [r2, #4]
 80075de:	e7ca      	b.n	8007576 <_free_r+0x26>
 80075e0:	b003      	add	sp, #12
 80075e2:	bd30      	pop	{r4, r5, pc}
 80075e4:	2000031c 	.word	0x2000031c

080075e8 <print_e>:
 80075e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075ea:	b087      	sub	sp, #28
 80075ec:	ec43 2b10 	vmov	d0, r2, r3
 80075f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80075f2:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80075f6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80075f8:	ab04      	add	r3, sp, #16
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	ab03      	add	r3, sp, #12
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	1c62      	adds	r2, r4, #1
 8007602:	ab05      	add	r3, sp, #20
 8007604:	460f      	mov	r7, r1
 8007606:	2102      	movs	r1, #2
 8007608:	f000 fd76 	bl	80080f8 <_dtoa_r>
 800760c:	9a05      	ldr	r2, [sp, #20]
 800760e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007612:	429a      	cmp	r2, r3
 8007614:	d105      	bne.n	8007622 <print_e+0x3a>
 8007616:	4601      	mov	r1, r0
 8007618:	4638      	mov	r0, r7
 800761a:	f000 fccd 	bl	8007fb8 <strcpy>
 800761e:	b007      	add	sp, #28
 8007620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007622:	463b      	mov	r3, r7
 8007624:	7801      	ldrb	r1, [r0, #0]
 8007626:	f803 1b01 	strb.w	r1, [r3], #1
 800762a:	2c00      	cmp	r4, #0
 800762c:	bfc8      	it	gt
 800762e:	2501      	movgt	r5, #1
 8007630:	212e      	movs	r1, #46	; 0x2e
 8007632:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8007636:	b10f      	cbz	r7, 800763c <print_e+0x54>
 8007638:	2c00      	cmp	r4, #0
 800763a:	dc37      	bgt.n	80076ac <print_e+0xc4>
 800763c:	2e67      	cmp	r6, #103	; 0x67
 800763e:	d046      	beq.n	80076ce <print_e+0xe6>
 8007640:	2e47      	cmp	r6, #71	; 0x47
 8007642:	d046      	beq.n	80076d2 <print_e+0xea>
 8007644:	212e      	movs	r1, #46	; 0x2e
 8007646:	2030      	movs	r0, #48	; 0x30
 8007648:	2c00      	cmp	r4, #0
 800764a:	dc38      	bgt.n	80076be <print_e+0xd6>
 800764c:	1e51      	subs	r1, r2, #1
 800764e:	2900      	cmp	r1, #0
 8007650:	bfb8      	it	lt
 8007652:	f1c2 0201 	rsblt	r2, r2, #1
 8007656:	4618      	mov	r0, r3
 8007658:	9105      	str	r1, [sp, #20]
 800765a:	bfac      	ite	ge
 800765c:	222b      	movge	r2, #43	; 0x2b
 800765e:	9205      	strlt	r2, [sp, #20]
 8007660:	f800 6b02 	strb.w	r6, [r0], #2
 8007664:	bfa8      	it	ge
 8007666:	705a      	strbge	r2, [r3, #1]
 8007668:	9a05      	ldr	r2, [sp, #20]
 800766a:	bfbc      	itt	lt
 800766c:	212d      	movlt	r1, #45	; 0x2d
 800766e:	7059      	strblt	r1, [r3, #1]
 8007670:	2a63      	cmp	r2, #99	; 0x63
 8007672:	dd0b      	ble.n	800768c <print_e+0xa4>
 8007674:	2164      	movs	r1, #100	; 0x64
 8007676:	fb92 f1f1 	sdiv	r1, r2, r1
 800767a:	f101 0430 	add.w	r4, r1, #48	; 0x30
 800767e:	1cd8      	adds	r0, r3, #3
 8007680:	709c      	strb	r4, [r3, #2]
 8007682:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007686:	fb03 2201 	mla	r2, r3, r1, r2
 800768a:	9205      	str	r2, [sp, #20]
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	220a      	movs	r2, #10
 8007690:	fb93 f2f2 	sdiv	r2, r3, r2
 8007694:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8007698:	7001      	strb	r1, [r0, #0]
 800769a:	f06f 0109 	mvn.w	r1, #9
 800769e:	fb01 3302 	mla	r3, r1, r2, r3
 80076a2:	3330      	adds	r3, #48	; 0x30
 80076a4:	7043      	strb	r3, [r0, #1]
 80076a6:	2300      	movs	r3, #0
 80076a8:	7083      	strb	r3, [r0, #2]
 80076aa:	e7b8      	b.n	800761e <print_e+0x36>
 80076ac:	b10d      	cbz	r5, 80076b2 <print_e+0xca>
 80076ae:	f803 1b01 	strb.w	r1, [r3], #1
 80076b2:	7805      	ldrb	r5, [r0, #0]
 80076b4:	f803 5b01 	strb.w	r5, [r3], #1
 80076b8:	3c01      	subs	r4, #1
 80076ba:	2500      	movs	r5, #0
 80076bc:	e7b9      	b.n	8007632 <print_e+0x4a>
 80076be:	b10d      	cbz	r5, 80076c4 <print_e+0xdc>
 80076c0:	f803 1b01 	strb.w	r1, [r3], #1
 80076c4:	f803 0b01 	strb.w	r0, [r3], #1
 80076c8:	3c01      	subs	r4, #1
 80076ca:	2500      	movs	r5, #0
 80076cc:	e7bc      	b.n	8007648 <print_e+0x60>
 80076ce:	2665      	movs	r6, #101	; 0x65
 80076d0:	e7bc      	b.n	800764c <print_e+0x64>
 80076d2:	2645      	movs	r6, #69	; 0x45
 80076d4:	e7ba      	b.n	800764c <print_e+0x64>
	...

080076d8 <_gcvt>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	ec55 4b10 	vmov	r4, r5, d0
 80076e0:	b088      	sub	sp, #32
 80076e2:	4681      	mov	r9, r0
 80076e4:	4688      	mov	r8, r1
 80076e6:	4616      	mov	r6, r2
 80076e8:	469a      	mov	sl, r3
 80076ea:	ee10 0a10 	vmov	r0, s0
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	4629      	mov	r1, r5
 80076f4:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80076f6:	f7f9 fa11 	bl	8000b1c <__aeabi_dcmplt>
 80076fa:	b110      	cbz	r0, 8007702 <_gcvt+0x2a>
 80076fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007700:	461d      	mov	r5, r3
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	4620      	mov	r0, r4
 8007708:	4629      	mov	r1, r5
 800770a:	f7f9 f9fd 	bl	8000b08 <__aeabi_dcmpeq>
 800770e:	b138      	cbz	r0, 8007720 <_gcvt+0x48>
 8007710:	2330      	movs	r3, #48	; 0x30
 8007712:	7033      	strb	r3, [r6, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	7073      	strb	r3, [r6, #1]
 8007718:	4630      	mov	r0, r6
 800771a:	b008      	add	sp, #32
 800771c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007720:	a34b      	add	r3, pc, #300	; (adr r3, 8007850 <_gcvt+0x178>)
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	f7f9 fa01 	bl	8000b30 <__aeabi_dcmple>
 800772e:	b158      	cbz	r0, 8007748 <_gcvt+0x70>
 8007730:	f108 33ff 	add.w	r3, r8, #4294967295
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	e9cd a701 	strd	sl, r7, [sp, #4]
 800773a:	4622      	mov	r2, r4
 800773c:	462b      	mov	r3, r5
 800773e:	4631      	mov	r1, r6
 8007740:	4648      	mov	r0, r9
 8007742:	f7ff ff51 	bl	80075e8 <print_e>
 8007746:	e7e7      	b.n	8007718 <_gcvt+0x40>
 8007748:	4640      	mov	r0, r8
 800774a:	f001 fe43 	bl	80093d4 <_mprec_log10>
 800774e:	4622      	mov	r2, r4
 8007750:	ec51 0b10 	vmov	r0, r1, d0
 8007754:	462b      	mov	r3, r5
 8007756:	f7f9 f9eb 	bl	8000b30 <__aeabi_dcmple>
 800775a:	2800      	cmp	r0, #0
 800775c:	d1e8      	bne.n	8007730 <_gcvt+0x58>
 800775e:	ab07      	add	r3, sp, #28
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	ab06      	add	r3, sp, #24
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4642      	mov	r2, r8
 8007768:	ab05      	add	r3, sp, #20
 800776a:	ec45 4b10 	vmov	d0, r4, r5
 800776e:	2102      	movs	r1, #2
 8007770:	4648      	mov	r0, r9
 8007772:	f000 fcc1 	bl	80080f8 <_dtoa_r>
 8007776:	9a05      	ldr	r2, [sp, #20]
 8007778:	f242 730f 	movw	r3, #9999	; 0x270f
 800777c:	429a      	cmp	r2, r3
 800777e:	d00e      	beq.n	800779e <_gcvt+0xc6>
 8007780:	4633      	mov	r3, r6
 8007782:	44b0      	add	r8, r6
 8007784:	4605      	mov	r5, r0
 8007786:	f810 1b01 	ldrb.w	r1, [r0], #1
 800778a:	9c05      	ldr	r4, [sp, #20]
 800778c:	eba8 0203 	sub.w	r2, r8, r3
 8007790:	b109      	cbz	r1, 8007796 <_gcvt+0xbe>
 8007792:	2c00      	cmp	r4, #0
 8007794:	dc08      	bgt.n	80077a8 <_gcvt+0xd0>
 8007796:	2100      	movs	r1, #0
 8007798:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800779c:	e00d      	b.n	80077ba <_gcvt+0xe2>
 800779e:	4601      	mov	r1, r0
 80077a0:	4630      	mov	r0, r6
 80077a2:	f000 fc09 	bl	8007fb8 <strcpy>
 80077a6:	e7b7      	b.n	8007718 <_gcvt+0x40>
 80077a8:	3c01      	subs	r4, #1
 80077aa:	f803 1b01 	strb.w	r1, [r3], #1
 80077ae:	9405      	str	r4, [sp, #20]
 80077b0:	e7e8      	b.n	8007784 <_gcvt+0xac>
 80077b2:	f803 cb01 	strb.w	ip, [r3], #1
 80077b6:	3a01      	subs	r2, #1
 80077b8:	2101      	movs	r1, #1
 80077ba:	2c00      	cmp	r4, #0
 80077bc:	4620      	mov	r0, r4
 80077be:	dc2a      	bgt.n	8007816 <_gcvt+0x13e>
 80077c0:	b101      	cbz	r1, 80077c4 <_gcvt+0xec>
 80077c2:	9405      	str	r4, [sp, #20]
 80077c4:	b90f      	cbnz	r7, 80077ca <_gcvt+0xf2>
 80077c6:	7829      	ldrb	r1, [r5, #0]
 80077c8:	b311      	cbz	r1, 8007810 <_gcvt+0x138>
 80077ca:	42b3      	cmp	r3, r6
 80077cc:	bf04      	itt	eq
 80077ce:	2130      	moveq	r1, #48	; 0x30
 80077d0:	f803 1b01 	strbeq.w	r1, [r3], #1
 80077d4:	212e      	movs	r1, #46	; 0x2e
 80077d6:	7019      	strb	r1, [r3, #0]
 80077d8:	9905      	ldr	r1, [sp, #20]
 80077da:	4618      	mov	r0, r3
 80077dc:	2400      	movs	r4, #0
 80077de:	eba1 0c03 	sub.w	ip, r1, r3
 80077e2:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80077e6:	eb1c 0f00 	cmn.w	ip, r0
 80077ea:	d41c      	bmi.n	8007826 <_gcvt+0x14e>
 80077ec:	2900      	cmp	r1, #0
 80077ee:	f1c1 0000 	rsb	r0, r1, #0
 80077f2:	bfc8      	it	gt
 80077f4:	2000      	movgt	r0, #0
 80077f6:	f100 0c01 	add.w	ip, r0, #1
 80077fa:	4463      	add	r3, ip
 80077fc:	4401      	add	r1, r0
 80077fe:	b104      	cbz	r4, 8007802 <_gcvt+0x12a>
 8007800:	9105      	str	r1, [sp, #20]
 8007802:	1e69      	subs	r1, r5, #1
 8007804:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007808:	b108      	cbz	r0, 800780e <_gcvt+0x136>
 800780a:	2a00      	cmp	r2, #0
 800780c:	dc0f      	bgt.n	800782e <_gcvt+0x156>
 800780e:	b9df      	cbnz	r7, 8007848 <_gcvt+0x170>
 8007810:	2200      	movs	r2, #0
 8007812:	701a      	strb	r2, [r3, #0]
 8007814:	e780      	b.n	8007718 <_gcvt+0x40>
 8007816:	2a00      	cmp	r2, #0
 8007818:	f104 34ff 	add.w	r4, r4, #4294967295
 800781c:	dcc9      	bgt.n	80077b2 <_gcvt+0xda>
 800781e:	2900      	cmp	r1, #0
 8007820:	d0d0      	beq.n	80077c4 <_gcvt+0xec>
 8007822:	9005      	str	r0, [sp, #20]
 8007824:	e7ce      	b.n	80077c4 <_gcvt+0xec>
 8007826:	f800 ef01 	strb.w	lr, [r0, #1]!
 800782a:	2401      	movs	r4, #1
 800782c:	e7db      	b.n	80077e6 <_gcvt+0x10e>
 800782e:	f803 0b01 	strb.w	r0, [r3], #1
 8007832:	3a01      	subs	r2, #1
 8007834:	e7e6      	b.n	8007804 <_gcvt+0x12c>
 8007836:	f801 5b01 	strb.w	r5, [r1], #1
 800783a:	1a60      	subs	r0, r4, r1
 800783c:	2800      	cmp	r0, #0
 800783e:	dcfa      	bgt.n	8007836 <_gcvt+0x15e>
 8007840:	2a00      	cmp	r2, #0
 8007842:	bfa8      	it	ge
 8007844:	189b      	addge	r3, r3, r2
 8007846:	e7e3      	b.n	8007810 <_gcvt+0x138>
 8007848:	4619      	mov	r1, r3
 800784a:	189c      	adds	r4, r3, r2
 800784c:	2530      	movs	r5, #48	; 0x30
 800784e:	e7f4      	b.n	800783a <_gcvt+0x162>
 8007850:	eb1c432d 	.word	0xeb1c432d
 8007854:	3f1a36e2 	.word	0x3f1a36e2

08007858 <__ssputs_r>:
 8007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800785c:	688e      	ldr	r6, [r1, #8]
 800785e:	461f      	mov	r7, r3
 8007860:	42be      	cmp	r6, r7
 8007862:	680b      	ldr	r3, [r1, #0]
 8007864:	4682      	mov	sl, r0
 8007866:	460c      	mov	r4, r1
 8007868:	4690      	mov	r8, r2
 800786a:	d82c      	bhi.n	80078c6 <__ssputs_r+0x6e>
 800786c:	898a      	ldrh	r2, [r1, #12]
 800786e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007872:	d026      	beq.n	80078c2 <__ssputs_r+0x6a>
 8007874:	6965      	ldr	r5, [r4, #20]
 8007876:	6909      	ldr	r1, [r1, #16]
 8007878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800787c:	eba3 0901 	sub.w	r9, r3, r1
 8007880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007884:	1c7b      	adds	r3, r7, #1
 8007886:	444b      	add	r3, r9
 8007888:	106d      	asrs	r5, r5, #1
 800788a:	429d      	cmp	r5, r3
 800788c:	bf38      	it	cc
 800788e:	461d      	movcc	r5, r3
 8007890:	0553      	lsls	r3, r2, #21
 8007892:	d527      	bpl.n	80078e4 <__ssputs_r+0x8c>
 8007894:	4629      	mov	r1, r5
 8007896:	f7ff fbf9 	bl	800708c <_malloc_r>
 800789a:	4606      	mov	r6, r0
 800789c:	b360      	cbz	r0, 80078f8 <__ssputs_r+0xa0>
 800789e:	6921      	ldr	r1, [r4, #16]
 80078a0:	464a      	mov	r2, r9
 80078a2:	f000 fb91 	bl	8007fc8 <memcpy>
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	6126      	str	r6, [r4, #16]
 80078b4:	6165      	str	r5, [r4, #20]
 80078b6:	444e      	add	r6, r9
 80078b8:	eba5 0509 	sub.w	r5, r5, r9
 80078bc:	6026      	str	r6, [r4, #0]
 80078be:	60a5      	str	r5, [r4, #8]
 80078c0:	463e      	mov	r6, r7
 80078c2:	42be      	cmp	r6, r7
 80078c4:	d900      	bls.n	80078c8 <__ssputs_r+0x70>
 80078c6:	463e      	mov	r6, r7
 80078c8:	6820      	ldr	r0, [r4, #0]
 80078ca:	4632      	mov	r2, r6
 80078cc:	4641      	mov	r1, r8
 80078ce:	f000 fb59 	bl	8007f84 <memmove>
 80078d2:	68a3      	ldr	r3, [r4, #8]
 80078d4:	1b9b      	subs	r3, r3, r6
 80078d6:	60a3      	str	r3, [r4, #8]
 80078d8:	6823      	ldr	r3, [r4, #0]
 80078da:	4433      	add	r3, r6
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	2000      	movs	r0, #0
 80078e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e4:	462a      	mov	r2, r5
 80078e6:	f001 fd93 	bl	8009410 <_realloc_r>
 80078ea:	4606      	mov	r6, r0
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d1e0      	bne.n	80078b2 <__ssputs_r+0x5a>
 80078f0:	6921      	ldr	r1, [r4, #16]
 80078f2:	4650      	mov	r0, sl
 80078f4:	f7ff fe2c 	bl	8007550 <_free_r>
 80078f8:	230c      	movs	r3, #12
 80078fa:	f8ca 3000 	str.w	r3, [sl]
 80078fe:	89a3      	ldrh	r3, [r4, #12]
 8007900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007904:	81a3      	strh	r3, [r4, #12]
 8007906:	f04f 30ff 	mov.w	r0, #4294967295
 800790a:	e7e9      	b.n	80078e0 <__ssputs_r+0x88>

0800790c <_svfiprintf_r>:
 800790c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007910:	4698      	mov	r8, r3
 8007912:	898b      	ldrh	r3, [r1, #12]
 8007914:	061b      	lsls	r3, r3, #24
 8007916:	b09d      	sub	sp, #116	; 0x74
 8007918:	4607      	mov	r7, r0
 800791a:	460d      	mov	r5, r1
 800791c:	4614      	mov	r4, r2
 800791e:	d50e      	bpl.n	800793e <_svfiprintf_r+0x32>
 8007920:	690b      	ldr	r3, [r1, #16]
 8007922:	b963      	cbnz	r3, 800793e <_svfiprintf_r+0x32>
 8007924:	2140      	movs	r1, #64	; 0x40
 8007926:	f7ff fbb1 	bl	800708c <_malloc_r>
 800792a:	6028      	str	r0, [r5, #0]
 800792c:	6128      	str	r0, [r5, #16]
 800792e:	b920      	cbnz	r0, 800793a <_svfiprintf_r+0x2e>
 8007930:	230c      	movs	r3, #12
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	f04f 30ff 	mov.w	r0, #4294967295
 8007938:	e0d0      	b.n	8007adc <_svfiprintf_r+0x1d0>
 800793a:	2340      	movs	r3, #64	; 0x40
 800793c:	616b      	str	r3, [r5, #20]
 800793e:	2300      	movs	r3, #0
 8007940:	9309      	str	r3, [sp, #36]	; 0x24
 8007942:	2320      	movs	r3, #32
 8007944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007948:	f8cd 800c 	str.w	r8, [sp, #12]
 800794c:	2330      	movs	r3, #48	; 0x30
 800794e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007af4 <_svfiprintf_r+0x1e8>
 8007952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007956:	f04f 0901 	mov.w	r9, #1
 800795a:	4623      	mov	r3, r4
 800795c:	469a      	mov	sl, r3
 800795e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007962:	b10a      	cbz	r2, 8007968 <_svfiprintf_r+0x5c>
 8007964:	2a25      	cmp	r2, #37	; 0x25
 8007966:	d1f9      	bne.n	800795c <_svfiprintf_r+0x50>
 8007968:	ebba 0b04 	subs.w	fp, sl, r4
 800796c:	d00b      	beq.n	8007986 <_svfiprintf_r+0x7a>
 800796e:	465b      	mov	r3, fp
 8007970:	4622      	mov	r2, r4
 8007972:	4629      	mov	r1, r5
 8007974:	4638      	mov	r0, r7
 8007976:	f7ff ff6f 	bl	8007858 <__ssputs_r>
 800797a:	3001      	adds	r0, #1
 800797c:	f000 80a9 	beq.w	8007ad2 <_svfiprintf_r+0x1c6>
 8007980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007982:	445a      	add	r2, fp
 8007984:	9209      	str	r2, [sp, #36]	; 0x24
 8007986:	f89a 3000 	ldrb.w	r3, [sl]
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80a1 	beq.w	8007ad2 <_svfiprintf_r+0x1c6>
 8007990:	2300      	movs	r3, #0
 8007992:	f04f 32ff 	mov.w	r2, #4294967295
 8007996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800799a:	f10a 0a01 	add.w	sl, sl, #1
 800799e:	9304      	str	r3, [sp, #16]
 80079a0:	9307      	str	r3, [sp, #28]
 80079a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079a6:	931a      	str	r3, [sp, #104]	; 0x68
 80079a8:	4654      	mov	r4, sl
 80079aa:	2205      	movs	r2, #5
 80079ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b0:	4850      	ldr	r0, [pc, #320]	; (8007af4 <_svfiprintf_r+0x1e8>)
 80079b2:	f7f8 fc35 	bl	8000220 <memchr>
 80079b6:	9a04      	ldr	r2, [sp, #16]
 80079b8:	b9d8      	cbnz	r0, 80079f2 <_svfiprintf_r+0xe6>
 80079ba:	06d0      	lsls	r0, r2, #27
 80079bc:	bf44      	itt	mi
 80079be:	2320      	movmi	r3, #32
 80079c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079c4:	0711      	lsls	r1, r2, #28
 80079c6:	bf44      	itt	mi
 80079c8:	232b      	movmi	r3, #43	; 0x2b
 80079ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079ce:	f89a 3000 	ldrb.w	r3, [sl]
 80079d2:	2b2a      	cmp	r3, #42	; 0x2a
 80079d4:	d015      	beq.n	8007a02 <_svfiprintf_r+0xf6>
 80079d6:	9a07      	ldr	r2, [sp, #28]
 80079d8:	4654      	mov	r4, sl
 80079da:	2000      	movs	r0, #0
 80079dc:	f04f 0c0a 	mov.w	ip, #10
 80079e0:	4621      	mov	r1, r4
 80079e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079e6:	3b30      	subs	r3, #48	; 0x30
 80079e8:	2b09      	cmp	r3, #9
 80079ea:	d94d      	bls.n	8007a88 <_svfiprintf_r+0x17c>
 80079ec:	b1b0      	cbz	r0, 8007a1c <_svfiprintf_r+0x110>
 80079ee:	9207      	str	r2, [sp, #28]
 80079f0:	e014      	b.n	8007a1c <_svfiprintf_r+0x110>
 80079f2:	eba0 0308 	sub.w	r3, r0, r8
 80079f6:	fa09 f303 	lsl.w	r3, r9, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	46a2      	mov	sl, r4
 8007a00:	e7d2      	b.n	80079a8 <_svfiprintf_r+0x9c>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	1d19      	adds	r1, r3, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	9103      	str	r1, [sp, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfbb      	ittet	lt
 8007a0e:	425b      	neglt	r3, r3
 8007a10:	f042 0202 	orrlt.w	r2, r2, #2
 8007a14:	9307      	strge	r3, [sp, #28]
 8007a16:	9307      	strlt	r3, [sp, #28]
 8007a18:	bfb8      	it	lt
 8007a1a:	9204      	strlt	r2, [sp, #16]
 8007a1c:	7823      	ldrb	r3, [r4, #0]
 8007a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a20:	d10c      	bne.n	8007a3c <_svfiprintf_r+0x130>
 8007a22:	7863      	ldrb	r3, [r4, #1]
 8007a24:	2b2a      	cmp	r3, #42	; 0x2a
 8007a26:	d134      	bne.n	8007a92 <_svfiprintf_r+0x186>
 8007a28:	9b03      	ldr	r3, [sp, #12]
 8007a2a:	1d1a      	adds	r2, r3, #4
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	9203      	str	r2, [sp, #12]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfb8      	it	lt
 8007a34:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a38:	3402      	adds	r4, #2
 8007a3a:	9305      	str	r3, [sp, #20]
 8007a3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007b04 <_svfiprintf_r+0x1f8>
 8007a40:	7821      	ldrb	r1, [r4, #0]
 8007a42:	2203      	movs	r2, #3
 8007a44:	4650      	mov	r0, sl
 8007a46:	f7f8 fbeb 	bl	8000220 <memchr>
 8007a4a:	b138      	cbz	r0, 8007a5c <_svfiprintf_r+0x150>
 8007a4c:	9b04      	ldr	r3, [sp, #16]
 8007a4e:	eba0 000a 	sub.w	r0, r0, sl
 8007a52:	2240      	movs	r2, #64	; 0x40
 8007a54:	4082      	lsls	r2, r0
 8007a56:	4313      	orrs	r3, r2
 8007a58:	3401      	adds	r4, #1
 8007a5a:	9304      	str	r3, [sp, #16]
 8007a5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a60:	4825      	ldr	r0, [pc, #148]	; (8007af8 <_svfiprintf_r+0x1ec>)
 8007a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a66:	2206      	movs	r2, #6
 8007a68:	f7f8 fbda 	bl	8000220 <memchr>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	d038      	beq.n	8007ae2 <_svfiprintf_r+0x1d6>
 8007a70:	4b22      	ldr	r3, [pc, #136]	; (8007afc <_svfiprintf_r+0x1f0>)
 8007a72:	bb1b      	cbnz	r3, 8007abc <_svfiprintf_r+0x1b0>
 8007a74:	9b03      	ldr	r3, [sp, #12]
 8007a76:	3307      	adds	r3, #7
 8007a78:	f023 0307 	bic.w	r3, r3, #7
 8007a7c:	3308      	adds	r3, #8
 8007a7e:	9303      	str	r3, [sp, #12]
 8007a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a82:	4433      	add	r3, r6
 8007a84:	9309      	str	r3, [sp, #36]	; 0x24
 8007a86:	e768      	b.n	800795a <_svfiprintf_r+0x4e>
 8007a88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	2001      	movs	r0, #1
 8007a90:	e7a6      	b.n	80079e0 <_svfiprintf_r+0xd4>
 8007a92:	2300      	movs	r3, #0
 8007a94:	3401      	adds	r4, #1
 8007a96:	9305      	str	r3, [sp, #20]
 8007a98:	4619      	mov	r1, r3
 8007a9a:	f04f 0c0a 	mov.w	ip, #10
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aa4:	3a30      	subs	r2, #48	; 0x30
 8007aa6:	2a09      	cmp	r2, #9
 8007aa8:	d903      	bls.n	8007ab2 <_svfiprintf_r+0x1a6>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0c6      	beq.n	8007a3c <_svfiprintf_r+0x130>
 8007aae:	9105      	str	r1, [sp, #20]
 8007ab0:	e7c4      	b.n	8007a3c <_svfiprintf_r+0x130>
 8007ab2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e7f0      	b.n	8007a9e <_svfiprintf_r+0x192>
 8007abc:	ab03      	add	r3, sp, #12
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	462a      	mov	r2, r5
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <_svfiprintf_r+0x1f4>)
 8007ac4:	a904      	add	r1, sp, #16
 8007ac6:	4638      	mov	r0, r7
 8007ac8:	f3af 8000 	nop.w
 8007acc:	1c42      	adds	r2, r0, #1
 8007ace:	4606      	mov	r6, r0
 8007ad0:	d1d6      	bne.n	8007a80 <_svfiprintf_r+0x174>
 8007ad2:	89ab      	ldrh	r3, [r5, #12]
 8007ad4:	065b      	lsls	r3, r3, #25
 8007ad6:	f53f af2d 	bmi.w	8007934 <_svfiprintf_r+0x28>
 8007ada:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007adc:	b01d      	add	sp, #116	; 0x74
 8007ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae2:	ab03      	add	r3, sp, #12
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	462a      	mov	r2, r5
 8007ae8:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <_svfiprintf_r+0x1f4>)
 8007aea:	a904      	add	r1, sp, #16
 8007aec:	4638      	mov	r0, r7
 8007aee:	f000 f879 	bl	8007be4 <_printf_i>
 8007af2:	e7eb      	b.n	8007acc <_svfiprintf_r+0x1c0>
 8007af4:	08009adc 	.word	0x08009adc
 8007af8:	08009ae6 	.word	0x08009ae6
 8007afc:	00000000 	.word	0x00000000
 8007b00:	08007859 	.word	0x08007859
 8007b04:	08009ae2 	.word	0x08009ae2

08007b08 <_printf_common>:
 8007b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	4699      	mov	r9, r3
 8007b10:	688a      	ldr	r2, [r1, #8]
 8007b12:	690b      	ldr	r3, [r1, #16]
 8007b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	bfb8      	it	lt
 8007b1c:	4613      	movlt	r3, r2
 8007b1e:	6033      	str	r3, [r6, #0]
 8007b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b24:	4607      	mov	r7, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	b10a      	cbz	r2, 8007b2e <_printf_common+0x26>
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	6033      	str	r3, [r6, #0]
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	0699      	lsls	r1, r3, #26
 8007b32:	bf42      	ittt	mi
 8007b34:	6833      	ldrmi	r3, [r6, #0]
 8007b36:	3302      	addmi	r3, #2
 8007b38:	6033      	strmi	r3, [r6, #0]
 8007b3a:	6825      	ldr	r5, [r4, #0]
 8007b3c:	f015 0506 	ands.w	r5, r5, #6
 8007b40:	d106      	bne.n	8007b50 <_printf_common+0x48>
 8007b42:	f104 0a19 	add.w	sl, r4, #25
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	6832      	ldr	r2, [r6, #0]
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dc26      	bgt.n	8007b9e <_printf_common+0x96>
 8007b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b54:	1e13      	subs	r3, r2, #0
 8007b56:	6822      	ldr	r2, [r4, #0]
 8007b58:	bf18      	it	ne
 8007b5a:	2301      	movne	r3, #1
 8007b5c:	0692      	lsls	r2, r2, #26
 8007b5e:	d42b      	bmi.n	8007bb8 <_printf_common+0xb0>
 8007b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b64:	4649      	mov	r1, r9
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c0      	blx	r8
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d01e      	beq.n	8007bac <_printf_common+0xa4>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	6922      	ldr	r2, [r4, #16]
 8007b72:	f003 0306 	and.w	r3, r3, #6
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	bf02      	ittt	eq
 8007b7a:	68e5      	ldreq	r5, [r4, #12]
 8007b7c:	6833      	ldreq	r3, [r6, #0]
 8007b7e:	1aed      	subeq	r5, r5, r3
 8007b80:	68a3      	ldr	r3, [r4, #8]
 8007b82:	bf0c      	ite	eq
 8007b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b88:	2500      	movne	r5, #0
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	bfc4      	itt	gt
 8007b8e:	1a9b      	subgt	r3, r3, r2
 8007b90:	18ed      	addgt	r5, r5, r3
 8007b92:	2600      	movs	r6, #0
 8007b94:	341a      	adds	r4, #26
 8007b96:	42b5      	cmp	r5, r6
 8007b98:	d11a      	bne.n	8007bd0 <_printf_common+0xc8>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e008      	b.n	8007bb0 <_printf_common+0xa8>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4652      	mov	r2, sl
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	47c0      	blx	r8
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d103      	bne.n	8007bb4 <_printf_common+0xac>
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	e7c6      	b.n	8007b46 <_printf_common+0x3e>
 8007bb8:	18e1      	adds	r1, r4, r3
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	2030      	movs	r0, #48	; 0x30
 8007bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bc2:	4422      	add	r2, r4
 8007bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bcc:	3302      	adds	r3, #2
 8007bce:	e7c7      	b.n	8007b60 <_printf_common+0x58>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	47c0      	blx	r8
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d0e6      	beq.n	8007bac <_printf_common+0xa4>
 8007bde:	3601      	adds	r6, #1
 8007be0:	e7d9      	b.n	8007b96 <_printf_common+0x8e>
	...

08007be4 <_printf_i>:
 8007be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	7e0f      	ldrb	r7, [r1, #24]
 8007bea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007bec:	2f78      	cmp	r7, #120	; 0x78
 8007bee:	4691      	mov	r9, r2
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	469a      	mov	sl, r3
 8007bf6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007bfa:	d807      	bhi.n	8007c0c <_printf_i+0x28>
 8007bfc:	2f62      	cmp	r7, #98	; 0x62
 8007bfe:	d80a      	bhi.n	8007c16 <_printf_i+0x32>
 8007c00:	2f00      	cmp	r7, #0
 8007c02:	f000 80d4 	beq.w	8007dae <_printf_i+0x1ca>
 8007c06:	2f58      	cmp	r7, #88	; 0x58
 8007c08:	f000 80c0 	beq.w	8007d8c <_printf_i+0x1a8>
 8007c0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c14:	e03a      	b.n	8007c8c <_printf_i+0xa8>
 8007c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c1a:	2b15      	cmp	r3, #21
 8007c1c:	d8f6      	bhi.n	8007c0c <_printf_i+0x28>
 8007c1e:	a101      	add	r1, pc, #4	; (adr r1, 8007c24 <_printf_i+0x40>)
 8007c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c24:	08007c7d 	.word	0x08007c7d
 8007c28:	08007c91 	.word	0x08007c91
 8007c2c:	08007c0d 	.word	0x08007c0d
 8007c30:	08007c0d 	.word	0x08007c0d
 8007c34:	08007c0d 	.word	0x08007c0d
 8007c38:	08007c0d 	.word	0x08007c0d
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007c0d 	.word	0x08007c0d
 8007c44:	08007c0d 	.word	0x08007c0d
 8007c48:	08007c0d 	.word	0x08007c0d
 8007c4c:	08007c0d 	.word	0x08007c0d
 8007c50:	08007d95 	.word	0x08007d95
 8007c54:	08007cbd 	.word	0x08007cbd
 8007c58:	08007d4f 	.word	0x08007d4f
 8007c5c:	08007c0d 	.word	0x08007c0d
 8007c60:	08007c0d 	.word	0x08007c0d
 8007c64:	08007db7 	.word	0x08007db7
 8007c68:	08007c0d 	.word	0x08007c0d
 8007c6c:	08007cbd 	.word	0x08007cbd
 8007c70:	08007c0d 	.word	0x08007c0d
 8007c74:	08007c0d 	.word	0x08007c0d
 8007c78:	08007d57 	.word	0x08007d57
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	1d1a      	adds	r2, r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	602a      	str	r2, [r5, #0]
 8007c84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e09f      	b.n	8007dd0 <_printf_i+0x1ec>
 8007c90:	6820      	ldr	r0, [r4, #0]
 8007c92:	682b      	ldr	r3, [r5, #0]
 8007c94:	0607      	lsls	r7, r0, #24
 8007c96:	f103 0104 	add.w	r1, r3, #4
 8007c9a:	6029      	str	r1, [r5, #0]
 8007c9c:	d501      	bpl.n	8007ca2 <_printf_i+0xbe>
 8007c9e:	681e      	ldr	r6, [r3, #0]
 8007ca0:	e003      	b.n	8007caa <_printf_i+0xc6>
 8007ca2:	0646      	lsls	r6, r0, #25
 8007ca4:	d5fb      	bpl.n	8007c9e <_printf_i+0xba>
 8007ca6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007caa:	2e00      	cmp	r6, #0
 8007cac:	da03      	bge.n	8007cb6 <_printf_i+0xd2>
 8007cae:	232d      	movs	r3, #45	; 0x2d
 8007cb0:	4276      	negs	r6, r6
 8007cb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cb6:	485a      	ldr	r0, [pc, #360]	; (8007e20 <_printf_i+0x23c>)
 8007cb8:	230a      	movs	r3, #10
 8007cba:	e012      	b.n	8007ce2 <_printf_i+0xfe>
 8007cbc:	682b      	ldr	r3, [r5, #0]
 8007cbe:	6820      	ldr	r0, [r4, #0]
 8007cc0:	1d19      	adds	r1, r3, #4
 8007cc2:	6029      	str	r1, [r5, #0]
 8007cc4:	0605      	lsls	r5, r0, #24
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0xe8>
 8007cc8:	681e      	ldr	r6, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <_printf_i+0xee>
 8007ccc:	0641      	lsls	r1, r0, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0xe4>
 8007cd0:	881e      	ldrh	r6, [r3, #0]
 8007cd2:	4853      	ldr	r0, [pc, #332]	; (8007e20 <_printf_i+0x23c>)
 8007cd4:	2f6f      	cmp	r7, #111	; 0x6f
 8007cd6:	bf0c      	ite	eq
 8007cd8:	2308      	moveq	r3, #8
 8007cda:	230a      	movne	r3, #10
 8007cdc:	2100      	movs	r1, #0
 8007cde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ce2:	6865      	ldr	r5, [r4, #4]
 8007ce4:	60a5      	str	r5, [r4, #8]
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	bfa2      	ittt	ge
 8007cea:	6821      	ldrge	r1, [r4, #0]
 8007cec:	f021 0104 	bicge.w	r1, r1, #4
 8007cf0:	6021      	strge	r1, [r4, #0]
 8007cf2:	b90e      	cbnz	r6, 8007cf8 <_printf_i+0x114>
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	d04b      	beq.n	8007d90 <_printf_i+0x1ac>
 8007cf8:	4615      	mov	r5, r2
 8007cfa:	fbb6 f1f3 	udiv	r1, r6, r3
 8007cfe:	fb03 6711 	mls	r7, r3, r1, r6
 8007d02:	5dc7      	ldrb	r7, [r0, r7]
 8007d04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d08:	4637      	mov	r7, r6
 8007d0a:	42bb      	cmp	r3, r7
 8007d0c:	460e      	mov	r6, r1
 8007d0e:	d9f4      	bls.n	8007cfa <_printf_i+0x116>
 8007d10:	2b08      	cmp	r3, #8
 8007d12:	d10b      	bne.n	8007d2c <_printf_i+0x148>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	07de      	lsls	r6, r3, #31
 8007d18:	d508      	bpl.n	8007d2c <_printf_i+0x148>
 8007d1a:	6923      	ldr	r3, [r4, #16]
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	4299      	cmp	r1, r3
 8007d20:	bfde      	ittt	le
 8007d22:	2330      	movle	r3, #48	; 0x30
 8007d24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d2c:	1b52      	subs	r2, r2, r5
 8007d2e:	6122      	str	r2, [r4, #16]
 8007d30:	f8cd a000 	str.w	sl, [sp]
 8007d34:	464b      	mov	r3, r9
 8007d36:	aa03      	add	r2, sp, #12
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f7ff fee4 	bl	8007b08 <_printf_common>
 8007d40:	3001      	adds	r0, #1
 8007d42:	d14a      	bne.n	8007dda <_printf_i+0x1f6>
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	b004      	add	sp, #16
 8007d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	f043 0320 	orr.w	r3, r3, #32
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	4833      	ldr	r0, [pc, #204]	; (8007e24 <_printf_i+0x240>)
 8007d58:	2778      	movs	r7, #120	; 0x78
 8007d5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d5e:	6823      	ldr	r3, [r4, #0]
 8007d60:	6829      	ldr	r1, [r5, #0]
 8007d62:	061f      	lsls	r7, r3, #24
 8007d64:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d68:	d402      	bmi.n	8007d70 <_printf_i+0x18c>
 8007d6a:	065f      	lsls	r7, r3, #25
 8007d6c:	bf48      	it	mi
 8007d6e:	b2b6      	uxthmi	r6, r6
 8007d70:	07df      	lsls	r7, r3, #31
 8007d72:	bf48      	it	mi
 8007d74:	f043 0320 	orrmi.w	r3, r3, #32
 8007d78:	6029      	str	r1, [r5, #0]
 8007d7a:	bf48      	it	mi
 8007d7c:	6023      	strmi	r3, [r4, #0]
 8007d7e:	b91e      	cbnz	r6, 8007d88 <_printf_i+0x1a4>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	f023 0320 	bic.w	r3, r3, #32
 8007d86:	6023      	str	r3, [r4, #0]
 8007d88:	2310      	movs	r3, #16
 8007d8a:	e7a7      	b.n	8007cdc <_printf_i+0xf8>
 8007d8c:	4824      	ldr	r0, [pc, #144]	; (8007e20 <_printf_i+0x23c>)
 8007d8e:	e7e4      	b.n	8007d5a <_printf_i+0x176>
 8007d90:	4615      	mov	r5, r2
 8007d92:	e7bd      	b.n	8007d10 <_printf_i+0x12c>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	6826      	ldr	r6, [r4, #0]
 8007d98:	6961      	ldr	r1, [r4, #20]
 8007d9a:	1d18      	adds	r0, r3, #4
 8007d9c:	6028      	str	r0, [r5, #0]
 8007d9e:	0635      	lsls	r5, r6, #24
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	d501      	bpl.n	8007da8 <_printf_i+0x1c4>
 8007da4:	6019      	str	r1, [r3, #0]
 8007da6:	e002      	b.n	8007dae <_printf_i+0x1ca>
 8007da8:	0670      	lsls	r0, r6, #25
 8007daa:	d5fb      	bpl.n	8007da4 <_printf_i+0x1c0>
 8007dac:	8019      	strh	r1, [r3, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	4615      	mov	r5, r2
 8007db4:	e7bc      	b.n	8007d30 <_printf_i+0x14c>
 8007db6:	682b      	ldr	r3, [r5, #0]
 8007db8:	1d1a      	adds	r2, r3, #4
 8007dba:	602a      	str	r2, [r5, #0]
 8007dbc:	681d      	ldr	r5, [r3, #0]
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4628      	mov	r0, r5
 8007dc4:	f7f8 fa2c 	bl	8000220 <memchr>
 8007dc8:	b108      	cbz	r0, 8007dce <_printf_i+0x1ea>
 8007dca:	1b40      	subs	r0, r0, r5
 8007dcc:	6060      	str	r0, [r4, #4]
 8007dce:	6863      	ldr	r3, [r4, #4]
 8007dd0:	6123      	str	r3, [r4, #16]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd8:	e7aa      	b.n	8007d30 <_printf_i+0x14c>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	462a      	mov	r2, r5
 8007dde:	4649      	mov	r1, r9
 8007de0:	4640      	mov	r0, r8
 8007de2:	47d0      	blx	sl
 8007de4:	3001      	adds	r0, #1
 8007de6:	d0ad      	beq.n	8007d44 <_printf_i+0x160>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	079b      	lsls	r3, r3, #30
 8007dec:	d413      	bmi.n	8007e16 <_printf_i+0x232>
 8007dee:	68e0      	ldr	r0, [r4, #12]
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	4298      	cmp	r0, r3
 8007df4:	bfb8      	it	lt
 8007df6:	4618      	movlt	r0, r3
 8007df8:	e7a6      	b.n	8007d48 <_printf_i+0x164>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4649      	mov	r1, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	47d0      	blx	sl
 8007e04:	3001      	adds	r0, #1
 8007e06:	d09d      	beq.n	8007d44 <_printf_i+0x160>
 8007e08:	3501      	adds	r5, #1
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	9903      	ldr	r1, [sp, #12]
 8007e0e:	1a5b      	subs	r3, r3, r1
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dcf2      	bgt.n	8007dfa <_printf_i+0x216>
 8007e14:	e7eb      	b.n	8007dee <_printf_i+0x20a>
 8007e16:	2500      	movs	r5, #0
 8007e18:	f104 0619 	add.w	r6, r4, #25
 8007e1c:	e7f5      	b.n	8007e0a <_printf_i+0x226>
 8007e1e:	bf00      	nop
 8007e20:	08009aed 	.word	0x08009aed
 8007e24:	08009afe 	.word	0x08009afe

08007e28 <__sflush_r>:
 8007e28:	898a      	ldrh	r2, [r1, #12]
 8007e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e2e:	4605      	mov	r5, r0
 8007e30:	0710      	lsls	r0, r2, #28
 8007e32:	460c      	mov	r4, r1
 8007e34:	d458      	bmi.n	8007ee8 <__sflush_r+0xc0>
 8007e36:	684b      	ldr	r3, [r1, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	dc05      	bgt.n	8007e48 <__sflush_r+0x20>
 8007e3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	dc02      	bgt.n	8007e48 <__sflush_r+0x20>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d0f9      	beq.n	8007e42 <__sflush_r+0x1a>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e54:	682f      	ldr	r7, [r5, #0]
 8007e56:	6a21      	ldr	r1, [r4, #32]
 8007e58:	602b      	str	r3, [r5, #0]
 8007e5a:	d032      	beq.n	8007ec2 <__sflush_r+0x9a>
 8007e5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e5e:	89a3      	ldrh	r3, [r4, #12]
 8007e60:	075a      	lsls	r2, r3, #29
 8007e62:	d505      	bpl.n	8007e70 <__sflush_r+0x48>
 8007e64:	6863      	ldr	r3, [r4, #4]
 8007e66:	1ac0      	subs	r0, r0, r3
 8007e68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e6a:	b10b      	cbz	r3, 8007e70 <__sflush_r+0x48>
 8007e6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e6e:	1ac0      	subs	r0, r0, r3
 8007e70:	2300      	movs	r3, #0
 8007e72:	4602      	mov	r2, r0
 8007e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	4628      	mov	r0, r5
 8007e7a:	47b0      	blx	r6
 8007e7c:	1c43      	adds	r3, r0, #1
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	d106      	bne.n	8007e90 <__sflush_r+0x68>
 8007e82:	6829      	ldr	r1, [r5, #0]
 8007e84:	291d      	cmp	r1, #29
 8007e86:	d82b      	bhi.n	8007ee0 <__sflush_r+0xb8>
 8007e88:	4a29      	ldr	r2, [pc, #164]	; (8007f30 <__sflush_r+0x108>)
 8007e8a:	410a      	asrs	r2, r1
 8007e8c:	07d6      	lsls	r6, r2, #31
 8007e8e:	d427      	bmi.n	8007ee0 <__sflush_r+0xb8>
 8007e90:	2200      	movs	r2, #0
 8007e92:	6062      	str	r2, [r4, #4]
 8007e94:	04d9      	lsls	r1, r3, #19
 8007e96:	6922      	ldr	r2, [r4, #16]
 8007e98:	6022      	str	r2, [r4, #0]
 8007e9a:	d504      	bpl.n	8007ea6 <__sflush_r+0x7e>
 8007e9c:	1c42      	adds	r2, r0, #1
 8007e9e:	d101      	bne.n	8007ea4 <__sflush_r+0x7c>
 8007ea0:	682b      	ldr	r3, [r5, #0]
 8007ea2:	b903      	cbnz	r3, 8007ea6 <__sflush_r+0x7e>
 8007ea4:	6560      	str	r0, [r4, #84]	; 0x54
 8007ea6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	2900      	cmp	r1, #0
 8007eac:	d0c9      	beq.n	8007e42 <__sflush_r+0x1a>
 8007eae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007eb2:	4299      	cmp	r1, r3
 8007eb4:	d002      	beq.n	8007ebc <__sflush_r+0x94>
 8007eb6:	4628      	mov	r0, r5
 8007eb8:	f7ff fb4a 	bl	8007550 <_free_r>
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	6360      	str	r0, [r4, #52]	; 0x34
 8007ec0:	e7c0      	b.n	8007e44 <__sflush_r+0x1c>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	47b0      	blx	r6
 8007ec8:	1c41      	adds	r1, r0, #1
 8007eca:	d1c8      	bne.n	8007e5e <__sflush_r+0x36>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0c5      	beq.n	8007e5e <__sflush_r+0x36>
 8007ed2:	2b1d      	cmp	r3, #29
 8007ed4:	d001      	beq.n	8007eda <__sflush_r+0xb2>
 8007ed6:	2b16      	cmp	r3, #22
 8007ed8:	d101      	bne.n	8007ede <__sflush_r+0xb6>
 8007eda:	602f      	str	r7, [r5, #0]
 8007edc:	e7b1      	b.n	8007e42 <__sflush_r+0x1a>
 8007ede:	89a3      	ldrh	r3, [r4, #12]
 8007ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ee4:	81a3      	strh	r3, [r4, #12]
 8007ee6:	e7ad      	b.n	8007e44 <__sflush_r+0x1c>
 8007ee8:	690f      	ldr	r7, [r1, #16]
 8007eea:	2f00      	cmp	r7, #0
 8007eec:	d0a9      	beq.n	8007e42 <__sflush_r+0x1a>
 8007eee:	0793      	lsls	r3, r2, #30
 8007ef0:	680e      	ldr	r6, [r1, #0]
 8007ef2:	bf08      	it	eq
 8007ef4:	694b      	ldreq	r3, [r1, #20]
 8007ef6:	600f      	str	r7, [r1, #0]
 8007ef8:	bf18      	it	ne
 8007efa:	2300      	movne	r3, #0
 8007efc:	eba6 0807 	sub.w	r8, r6, r7
 8007f00:	608b      	str	r3, [r1, #8]
 8007f02:	f1b8 0f00 	cmp.w	r8, #0
 8007f06:	dd9c      	ble.n	8007e42 <__sflush_r+0x1a>
 8007f08:	6a21      	ldr	r1, [r4, #32]
 8007f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f0c:	4643      	mov	r3, r8
 8007f0e:	463a      	mov	r2, r7
 8007f10:	4628      	mov	r0, r5
 8007f12:	47b0      	blx	r6
 8007f14:	2800      	cmp	r0, #0
 8007f16:	dc06      	bgt.n	8007f26 <__sflush_r+0xfe>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295
 8007f24:	e78e      	b.n	8007e44 <__sflush_r+0x1c>
 8007f26:	4407      	add	r7, r0
 8007f28:	eba8 0800 	sub.w	r8, r8, r0
 8007f2c:	e7e9      	b.n	8007f02 <__sflush_r+0xda>
 8007f2e:	bf00      	nop
 8007f30:	dfbffffe 	.word	0xdfbffffe

08007f34 <_fflush_r>:
 8007f34:	b538      	push	{r3, r4, r5, lr}
 8007f36:	690b      	ldr	r3, [r1, #16]
 8007f38:	4605      	mov	r5, r0
 8007f3a:	460c      	mov	r4, r1
 8007f3c:	b913      	cbnz	r3, 8007f44 <_fflush_r+0x10>
 8007f3e:	2500      	movs	r5, #0
 8007f40:	4628      	mov	r0, r5
 8007f42:	bd38      	pop	{r3, r4, r5, pc}
 8007f44:	b118      	cbz	r0, 8007f4e <_fflush_r+0x1a>
 8007f46:	6a03      	ldr	r3, [r0, #32]
 8007f48:	b90b      	cbnz	r3, 8007f4e <_fflush_r+0x1a>
 8007f4a:	f7ff f9db 	bl	8007304 <__sinit>
 8007f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0f3      	beq.n	8007f3e <_fflush_r+0xa>
 8007f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f58:	07d0      	lsls	r0, r2, #31
 8007f5a:	d404      	bmi.n	8007f66 <_fflush_r+0x32>
 8007f5c:	0599      	lsls	r1, r3, #22
 8007f5e:	d402      	bmi.n	8007f66 <_fflush_r+0x32>
 8007f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f62:	f7ff faf2 	bl	800754a <__retarget_lock_acquire_recursive>
 8007f66:	4628      	mov	r0, r5
 8007f68:	4621      	mov	r1, r4
 8007f6a:	f7ff ff5d 	bl	8007e28 <__sflush_r>
 8007f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f70:	07da      	lsls	r2, r3, #31
 8007f72:	4605      	mov	r5, r0
 8007f74:	d4e4      	bmi.n	8007f40 <_fflush_r+0xc>
 8007f76:	89a3      	ldrh	r3, [r4, #12]
 8007f78:	059b      	lsls	r3, r3, #22
 8007f7a:	d4e1      	bmi.n	8007f40 <_fflush_r+0xc>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7e:	f7ff fae5 	bl	800754c <__retarget_lock_release_recursive>
 8007f82:	e7dd      	b.n	8007f40 <_fflush_r+0xc>

08007f84 <memmove>:
 8007f84:	4288      	cmp	r0, r1
 8007f86:	b510      	push	{r4, lr}
 8007f88:	eb01 0402 	add.w	r4, r1, r2
 8007f8c:	d902      	bls.n	8007f94 <memmove+0x10>
 8007f8e:	4284      	cmp	r4, r0
 8007f90:	4623      	mov	r3, r4
 8007f92:	d807      	bhi.n	8007fa4 <memmove+0x20>
 8007f94:	1e43      	subs	r3, r0, #1
 8007f96:	42a1      	cmp	r1, r4
 8007f98:	d008      	beq.n	8007fac <memmove+0x28>
 8007f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fa2:	e7f8      	b.n	8007f96 <memmove+0x12>
 8007fa4:	4402      	add	r2, r0
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	428a      	cmp	r2, r1
 8007faa:	d100      	bne.n	8007fae <memmove+0x2a>
 8007fac:	bd10      	pop	{r4, pc}
 8007fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fb6:	e7f7      	b.n	8007fa8 <memmove+0x24>

08007fb8 <strcpy>:
 8007fb8:	4603      	mov	r3, r0
 8007fba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fbe:	f803 2b01 	strb.w	r2, [r3], #1
 8007fc2:	2a00      	cmp	r2, #0
 8007fc4:	d1f9      	bne.n	8007fba <strcpy+0x2>
 8007fc6:	4770      	bx	lr

08007fc8 <memcpy>:
 8007fc8:	440a      	add	r2, r1
 8007fca:	4291      	cmp	r1, r2
 8007fcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fd0:	d100      	bne.n	8007fd4 <memcpy+0xc>
 8007fd2:	4770      	bx	lr
 8007fd4:	b510      	push	{r4, lr}
 8007fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fde:	4291      	cmp	r1, r2
 8007fe0:	d1f9      	bne.n	8007fd6 <memcpy+0xe>
 8007fe2:	bd10      	pop	{r4, pc}

08007fe4 <quorem>:
 8007fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	6903      	ldr	r3, [r0, #16]
 8007fea:	690c      	ldr	r4, [r1, #16]
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	4607      	mov	r7, r0
 8007ff0:	db7e      	blt.n	80080f0 <quorem+0x10c>
 8007ff2:	3c01      	subs	r4, #1
 8007ff4:	f101 0814 	add.w	r8, r1, #20
 8007ff8:	f100 0514 	add.w	r5, r0, #20
 8007ffc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008000:	9301      	str	r3, [sp, #4]
 8008002:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008006:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800800a:	3301      	adds	r3, #1
 800800c:	429a      	cmp	r2, r3
 800800e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008012:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008016:	fbb2 f6f3 	udiv	r6, r2, r3
 800801a:	d331      	bcc.n	8008080 <quorem+0x9c>
 800801c:	f04f 0e00 	mov.w	lr, #0
 8008020:	4640      	mov	r0, r8
 8008022:	46ac      	mov	ip, r5
 8008024:	46f2      	mov	sl, lr
 8008026:	f850 2b04 	ldr.w	r2, [r0], #4
 800802a:	b293      	uxth	r3, r2
 800802c:	fb06 e303 	mla	r3, r6, r3, lr
 8008030:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008034:	0c1a      	lsrs	r2, r3, #16
 8008036:	b29b      	uxth	r3, r3
 8008038:	ebaa 0303 	sub.w	r3, sl, r3
 800803c:	f8dc a000 	ldr.w	sl, [ip]
 8008040:	fa13 f38a 	uxtah	r3, r3, sl
 8008044:	fb06 220e 	mla	r2, r6, lr, r2
 8008048:	9300      	str	r3, [sp, #0]
 800804a:	9b00      	ldr	r3, [sp, #0]
 800804c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008050:	b292      	uxth	r2, r2
 8008052:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008056:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800805a:	f8bd 3000 	ldrh.w	r3, [sp]
 800805e:	4581      	cmp	r9, r0
 8008060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008064:	f84c 3b04 	str.w	r3, [ip], #4
 8008068:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800806c:	d2db      	bcs.n	8008026 <quorem+0x42>
 800806e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008072:	b92b      	cbnz	r3, 8008080 <quorem+0x9c>
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	3b04      	subs	r3, #4
 8008078:	429d      	cmp	r5, r3
 800807a:	461a      	mov	r2, r3
 800807c:	d32c      	bcc.n	80080d8 <quorem+0xf4>
 800807e:	613c      	str	r4, [r7, #16]
 8008080:	4638      	mov	r0, r7
 8008082:	f001 f8a7 	bl	80091d4 <__mcmp>
 8008086:	2800      	cmp	r0, #0
 8008088:	db22      	blt.n	80080d0 <quorem+0xec>
 800808a:	3601      	adds	r6, #1
 800808c:	4629      	mov	r1, r5
 800808e:	2000      	movs	r0, #0
 8008090:	f858 2b04 	ldr.w	r2, [r8], #4
 8008094:	f8d1 c000 	ldr.w	ip, [r1]
 8008098:	b293      	uxth	r3, r2
 800809a:	1ac3      	subs	r3, r0, r3
 800809c:	0c12      	lsrs	r2, r2, #16
 800809e:	fa13 f38c 	uxtah	r3, r3, ip
 80080a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80080a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080aa:	b29b      	uxth	r3, r3
 80080ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080b0:	45c1      	cmp	r9, r8
 80080b2:	f841 3b04 	str.w	r3, [r1], #4
 80080b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080ba:	d2e9      	bcs.n	8008090 <quorem+0xac>
 80080bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c4:	b922      	cbnz	r2, 80080d0 <quorem+0xec>
 80080c6:	3b04      	subs	r3, #4
 80080c8:	429d      	cmp	r5, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	d30a      	bcc.n	80080e4 <quorem+0x100>
 80080ce:	613c      	str	r4, [r7, #16]
 80080d0:	4630      	mov	r0, r6
 80080d2:	b003      	add	sp, #12
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	6812      	ldr	r2, [r2, #0]
 80080da:	3b04      	subs	r3, #4
 80080dc:	2a00      	cmp	r2, #0
 80080de:	d1ce      	bne.n	800807e <quorem+0x9a>
 80080e0:	3c01      	subs	r4, #1
 80080e2:	e7c9      	b.n	8008078 <quorem+0x94>
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	3b04      	subs	r3, #4
 80080e8:	2a00      	cmp	r2, #0
 80080ea:	d1f0      	bne.n	80080ce <quorem+0xea>
 80080ec:	3c01      	subs	r4, #1
 80080ee:	e7eb      	b.n	80080c8 <quorem+0xe4>
 80080f0:	2000      	movs	r0, #0
 80080f2:	e7ee      	b.n	80080d2 <quorem+0xee>
 80080f4:	0000      	movs	r0, r0
	...

080080f8 <_dtoa_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	ed2d 8b04 	vpush	{d8-d9}
 8008100:	69c5      	ldr	r5, [r0, #28]
 8008102:	b093      	sub	sp, #76	; 0x4c
 8008104:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008108:	ec57 6b10 	vmov	r6, r7, d0
 800810c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008110:	9107      	str	r1, [sp, #28]
 8008112:	4604      	mov	r4, r0
 8008114:	920a      	str	r2, [sp, #40]	; 0x28
 8008116:	930d      	str	r3, [sp, #52]	; 0x34
 8008118:	b975      	cbnz	r5, 8008138 <_dtoa_r+0x40>
 800811a:	2010      	movs	r0, #16
 800811c:	f7fe ff86 	bl	800702c <malloc>
 8008120:	4602      	mov	r2, r0
 8008122:	61e0      	str	r0, [r4, #28]
 8008124:	b920      	cbnz	r0, 8008130 <_dtoa_r+0x38>
 8008126:	4bae      	ldr	r3, [pc, #696]	; (80083e0 <_dtoa_r+0x2e8>)
 8008128:	21ef      	movs	r1, #239	; 0xef
 800812a:	48ae      	ldr	r0, [pc, #696]	; (80083e4 <_dtoa_r+0x2ec>)
 800812c:	f001 f9a0 	bl	8009470 <__assert_func>
 8008130:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008134:	6005      	str	r5, [r0, #0]
 8008136:	60c5      	str	r5, [r0, #12]
 8008138:	69e3      	ldr	r3, [r4, #28]
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	b151      	cbz	r1, 8008154 <_dtoa_r+0x5c>
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	604a      	str	r2, [r1, #4]
 8008142:	2301      	movs	r3, #1
 8008144:	4093      	lsls	r3, r2
 8008146:	608b      	str	r3, [r1, #8]
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fe07 	bl	8008d5c <_Bfree>
 800814e:	69e3      	ldr	r3, [r4, #28]
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	1e3b      	subs	r3, r7, #0
 8008156:	bfbb      	ittet	lt
 8008158:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800815c:	9303      	strlt	r3, [sp, #12]
 800815e:	2300      	movge	r3, #0
 8008160:	2201      	movlt	r2, #1
 8008162:	bfac      	ite	ge
 8008164:	f8c8 3000 	strge.w	r3, [r8]
 8008168:	f8c8 2000 	strlt.w	r2, [r8]
 800816c:	4b9e      	ldr	r3, [pc, #632]	; (80083e8 <_dtoa_r+0x2f0>)
 800816e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008172:	ea33 0308 	bics.w	r3, r3, r8
 8008176:	d11b      	bne.n	80081b0 <_dtoa_r+0xb8>
 8008178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800817a:	f242 730f 	movw	r3, #9999	; 0x270f
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008184:	4333      	orrs	r3, r6
 8008186:	f000 8593 	beq.w	8008cb0 <_dtoa_r+0xbb8>
 800818a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800818c:	b963      	cbnz	r3, 80081a8 <_dtoa_r+0xb0>
 800818e:	4b97      	ldr	r3, [pc, #604]	; (80083ec <_dtoa_r+0x2f4>)
 8008190:	e027      	b.n	80081e2 <_dtoa_r+0xea>
 8008192:	4b97      	ldr	r3, [pc, #604]	; (80083f0 <_dtoa_r+0x2f8>)
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	3308      	adds	r3, #8
 8008198:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800819a:	6013      	str	r3, [r2, #0]
 800819c:	9800      	ldr	r0, [sp, #0]
 800819e:	b013      	add	sp, #76	; 0x4c
 80081a0:	ecbd 8b04 	vpop	{d8-d9}
 80081a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a8:	4b90      	ldr	r3, [pc, #576]	; (80083ec <_dtoa_r+0x2f4>)
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	3303      	adds	r3, #3
 80081ae:	e7f3      	b.n	8008198 <_dtoa_r+0xa0>
 80081b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081b4:	2200      	movs	r2, #0
 80081b6:	ec51 0b17 	vmov	r0, r1, d7
 80081ba:	eeb0 8a47 	vmov.f32	s16, s14
 80081be:	eef0 8a67 	vmov.f32	s17, s15
 80081c2:	2300      	movs	r3, #0
 80081c4:	f7f8 fca0 	bl	8000b08 <__aeabi_dcmpeq>
 80081c8:	4681      	mov	r9, r0
 80081ca:	b160      	cbz	r0, 80081e6 <_dtoa_r+0xee>
 80081cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081ce:	2301      	movs	r3, #1
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8568 	beq.w	8008caa <_dtoa_r+0xbb2>
 80081da:	4b86      	ldr	r3, [pc, #536]	; (80083f4 <_dtoa_r+0x2fc>)
 80081dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081de:	6013      	str	r3, [r2, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	e7da      	b.n	800819c <_dtoa_r+0xa4>
 80081e6:	aa10      	add	r2, sp, #64	; 0x40
 80081e8:	a911      	add	r1, sp, #68	; 0x44
 80081ea:	4620      	mov	r0, r4
 80081ec:	eeb0 0a48 	vmov.f32	s0, s16
 80081f0:	eef0 0a68 	vmov.f32	s1, s17
 80081f4:	f001 f894 	bl	8009320 <__d2b>
 80081f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80081fc:	4682      	mov	sl, r0
 80081fe:	2d00      	cmp	r5, #0
 8008200:	d07f      	beq.n	8008302 <_dtoa_r+0x20a>
 8008202:	ee18 3a90 	vmov	r3, s17
 8008206:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800820a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800820e:	ec51 0b18 	vmov	r0, r1, d8
 8008212:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008216:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800821a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800821e:	4619      	mov	r1, r3
 8008220:	2200      	movs	r2, #0
 8008222:	4b75      	ldr	r3, [pc, #468]	; (80083f8 <_dtoa_r+0x300>)
 8008224:	f7f8 f850 	bl	80002c8 <__aeabi_dsub>
 8008228:	a367      	add	r3, pc, #412	; (adr r3, 80083c8 <_dtoa_r+0x2d0>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 fa03 	bl	8000638 <__aeabi_dmul>
 8008232:	a367      	add	r3, pc, #412	; (adr r3, 80083d0 <_dtoa_r+0x2d8>)
 8008234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008238:	f7f8 f848 	bl	80002cc <__adddf3>
 800823c:	4606      	mov	r6, r0
 800823e:	4628      	mov	r0, r5
 8008240:	460f      	mov	r7, r1
 8008242:	f7f8 f98f 	bl	8000564 <__aeabi_i2d>
 8008246:	a364      	add	r3, pc, #400	; (adr r3, 80083d8 <_dtoa_r+0x2e0>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f9f4 	bl	8000638 <__aeabi_dmul>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4630      	mov	r0, r6
 8008256:	4639      	mov	r1, r7
 8008258:	f7f8 f838 	bl	80002cc <__adddf3>
 800825c:	4606      	mov	r6, r0
 800825e:	460f      	mov	r7, r1
 8008260:	f7f8 fc84 	bl	8000b6c <__aeabi_d2iz>
 8008264:	2200      	movs	r2, #0
 8008266:	4683      	mov	fp, r0
 8008268:	2300      	movs	r3, #0
 800826a:	4630      	mov	r0, r6
 800826c:	4639      	mov	r1, r7
 800826e:	f7f8 fc55 	bl	8000b1c <__aeabi_dcmplt>
 8008272:	b148      	cbz	r0, 8008288 <_dtoa_r+0x190>
 8008274:	4658      	mov	r0, fp
 8008276:	f7f8 f975 	bl	8000564 <__aeabi_i2d>
 800827a:	4632      	mov	r2, r6
 800827c:	463b      	mov	r3, r7
 800827e:	f7f8 fc43 	bl	8000b08 <__aeabi_dcmpeq>
 8008282:	b908      	cbnz	r0, 8008288 <_dtoa_r+0x190>
 8008284:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008288:	f1bb 0f16 	cmp.w	fp, #22
 800828c:	d857      	bhi.n	800833e <_dtoa_r+0x246>
 800828e:	4b5b      	ldr	r3, [pc, #364]	; (80083fc <_dtoa_r+0x304>)
 8008290:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	ec51 0b18 	vmov	r0, r1, d8
 800829c:	f7f8 fc3e 	bl	8000b1c <__aeabi_dcmplt>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d04e      	beq.n	8008342 <_dtoa_r+0x24a>
 80082a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80082a8:	2300      	movs	r3, #0
 80082aa:	930c      	str	r3, [sp, #48]	; 0x30
 80082ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082ae:	1b5b      	subs	r3, r3, r5
 80082b0:	1e5a      	subs	r2, r3, #1
 80082b2:	bf45      	ittet	mi
 80082b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80082b8:	9305      	strmi	r3, [sp, #20]
 80082ba:	2300      	movpl	r3, #0
 80082bc:	2300      	movmi	r3, #0
 80082be:	9206      	str	r2, [sp, #24]
 80082c0:	bf54      	ite	pl
 80082c2:	9305      	strpl	r3, [sp, #20]
 80082c4:	9306      	strmi	r3, [sp, #24]
 80082c6:	f1bb 0f00 	cmp.w	fp, #0
 80082ca:	db3c      	blt.n	8008346 <_dtoa_r+0x24e>
 80082cc:	9b06      	ldr	r3, [sp, #24]
 80082ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80082d2:	445b      	add	r3, fp
 80082d4:	9306      	str	r3, [sp, #24]
 80082d6:	2300      	movs	r3, #0
 80082d8:	9308      	str	r3, [sp, #32]
 80082da:	9b07      	ldr	r3, [sp, #28]
 80082dc:	2b09      	cmp	r3, #9
 80082de:	d868      	bhi.n	80083b2 <_dtoa_r+0x2ba>
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	bfc4      	itt	gt
 80082e4:	3b04      	subgt	r3, #4
 80082e6:	9307      	strgt	r3, [sp, #28]
 80082e8:	9b07      	ldr	r3, [sp, #28]
 80082ea:	f1a3 0302 	sub.w	r3, r3, #2
 80082ee:	bfcc      	ite	gt
 80082f0:	2500      	movgt	r5, #0
 80082f2:	2501      	movle	r5, #1
 80082f4:	2b03      	cmp	r3, #3
 80082f6:	f200 8085 	bhi.w	8008404 <_dtoa_r+0x30c>
 80082fa:	e8df f003 	tbb	[pc, r3]
 80082fe:	3b2e      	.short	0x3b2e
 8008300:	5839      	.short	0x5839
 8008302:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008306:	441d      	add	r5, r3
 8008308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800830c:	2b20      	cmp	r3, #32
 800830e:	bfc1      	itttt	gt
 8008310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008314:	fa08 f803 	lslgt.w	r8, r8, r3
 8008318:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800831c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008320:	bfd6      	itet	le
 8008322:	f1c3 0320 	rsble	r3, r3, #32
 8008326:	ea48 0003 	orrgt.w	r0, r8, r3
 800832a:	fa06 f003 	lslle.w	r0, r6, r3
 800832e:	f7f8 f909 	bl	8000544 <__aeabi_ui2d>
 8008332:	2201      	movs	r2, #1
 8008334:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008338:	3d01      	subs	r5, #1
 800833a:	920e      	str	r2, [sp, #56]	; 0x38
 800833c:	e76f      	b.n	800821e <_dtoa_r+0x126>
 800833e:	2301      	movs	r3, #1
 8008340:	e7b3      	b.n	80082aa <_dtoa_r+0x1b2>
 8008342:	900c      	str	r0, [sp, #48]	; 0x30
 8008344:	e7b2      	b.n	80082ac <_dtoa_r+0x1b4>
 8008346:	9b05      	ldr	r3, [sp, #20]
 8008348:	eba3 030b 	sub.w	r3, r3, fp
 800834c:	9305      	str	r3, [sp, #20]
 800834e:	f1cb 0300 	rsb	r3, fp, #0
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	2300      	movs	r3, #0
 8008356:	930b      	str	r3, [sp, #44]	; 0x2c
 8008358:	e7bf      	b.n	80082da <_dtoa_r+0x1e2>
 800835a:	2300      	movs	r3, #0
 800835c:	9309      	str	r3, [sp, #36]	; 0x24
 800835e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008360:	2b00      	cmp	r3, #0
 8008362:	dc52      	bgt.n	800840a <_dtoa_r+0x312>
 8008364:	2301      	movs	r3, #1
 8008366:	9301      	str	r3, [sp, #4]
 8008368:	9304      	str	r3, [sp, #16]
 800836a:	461a      	mov	r2, r3
 800836c:	920a      	str	r2, [sp, #40]	; 0x28
 800836e:	e00b      	b.n	8008388 <_dtoa_r+0x290>
 8008370:	2301      	movs	r3, #1
 8008372:	e7f3      	b.n	800835c <_dtoa_r+0x264>
 8008374:	2300      	movs	r3, #0
 8008376:	9309      	str	r3, [sp, #36]	; 0x24
 8008378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837a:	445b      	add	r3, fp
 800837c:	9301      	str	r3, [sp, #4]
 800837e:	3301      	adds	r3, #1
 8008380:	2b01      	cmp	r3, #1
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	bfb8      	it	lt
 8008386:	2301      	movlt	r3, #1
 8008388:	69e0      	ldr	r0, [r4, #28]
 800838a:	2100      	movs	r1, #0
 800838c:	2204      	movs	r2, #4
 800838e:	f102 0614 	add.w	r6, r2, #20
 8008392:	429e      	cmp	r6, r3
 8008394:	d93d      	bls.n	8008412 <_dtoa_r+0x31a>
 8008396:	6041      	str	r1, [r0, #4]
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fc9f 	bl	8008cdc <_Balloc>
 800839e:	9000      	str	r0, [sp, #0]
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d139      	bne.n	8008418 <_dtoa_r+0x320>
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <_dtoa_r+0x308>)
 80083a6:	4602      	mov	r2, r0
 80083a8:	f240 11af 	movw	r1, #431	; 0x1af
 80083ac:	e6bd      	b.n	800812a <_dtoa_r+0x32>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7e1      	b.n	8008376 <_dtoa_r+0x27e>
 80083b2:	2501      	movs	r5, #1
 80083b4:	2300      	movs	r3, #0
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	9509      	str	r5, [sp, #36]	; 0x24
 80083ba:	f04f 33ff 	mov.w	r3, #4294967295
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	9304      	str	r3, [sp, #16]
 80083c2:	2200      	movs	r2, #0
 80083c4:	2312      	movs	r3, #18
 80083c6:	e7d1      	b.n	800836c <_dtoa_r+0x274>
 80083c8:	636f4361 	.word	0x636f4361
 80083cc:	3fd287a7 	.word	0x3fd287a7
 80083d0:	8b60c8b3 	.word	0x8b60c8b3
 80083d4:	3fc68a28 	.word	0x3fc68a28
 80083d8:	509f79fb 	.word	0x509f79fb
 80083dc:	3fd34413 	.word	0x3fd34413
 80083e0:	08009b1e 	.word	0x08009b1e
 80083e4:	08009b35 	.word	0x08009b35
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	08009b18 	.word	0x08009b18
 80083f0:	08009b0f 	.word	0x08009b0f
 80083f4:	08009b1d 	.word	0x08009b1d
 80083f8:	3ff80000 	.word	0x3ff80000
 80083fc:	08009c20 	.word	0x08009c20
 8008400:	08009b8d 	.word	0x08009b8d
 8008404:	2301      	movs	r3, #1
 8008406:	9309      	str	r3, [sp, #36]	; 0x24
 8008408:	e7d7      	b.n	80083ba <_dtoa_r+0x2c2>
 800840a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800840c:	9301      	str	r3, [sp, #4]
 800840e:	9304      	str	r3, [sp, #16]
 8008410:	e7ba      	b.n	8008388 <_dtoa_r+0x290>
 8008412:	3101      	adds	r1, #1
 8008414:	0052      	lsls	r2, r2, #1
 8008416:	e7ba      	b.n	800838e <_dtoa_r+0x296>
 8008418:	69e3      	ldr	r3, [r4, #28]
 800841a:	9a00      	ldr	r2, [sp, #0]
 800841c:	601a      	str	r2, [r3, #0]
 800841e:	9b04      	ldr	r3, [sp, #16]
 8008420:	2b0e      	cmp	r3, #14
 8008422:	f200 80a8 	bhi.w	8008576 <_dtoa_r+0x47e>
 8008426:	2d00      	cmp	r5, #0
 8008428:	f000 80a5 	beq.w	8008576 <_dtoa_r+0x47e>
 800842c:	f1bb 0f00 	cmp.w	fp, #0
 8008430:	dd38      	ble.n	80084a4 <_dtoa_r+0x3ac>
 8008432:	4bc0      	ldr	r3, [pc, #768]	; (8008734 <_dtoa_r+0x63c>)
 8008434:	f00b 020f 	and.w	r2, fp, #15
 8008438:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800843c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008440:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008444:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008448:	d019      	beq.n	800847e <_dtoa_r+0x386>
 800844a:	4bbb      	ldr	r3, [pc, #748]	; (8008738 <_dtoa_r+0x640>)
 800844c:	ec51 0b18 	vmov	r0, r1, d8
 8008450:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008454:	f7f8 fa1a 	bl	800088c <__aeabi_ddiv>
 8008458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800845c:	f008 080f 	and.w	r8, r8, #15
 8008460:	2503      	movs	r5, #3
 8008462:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008738 <_dtoa_r+0x640>
 8008466:	f1b8 0f00 	cmp.w	r8, #0
 800846a:	d10a      	bne.n	8008482 <_dtoa_r+0x38a>
 800846c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008470:	4632      	mov	r2, r6
 8008472:	463b      	mov	r3, r7
 8008474:	f7f8 fa0a 	bl	800088c <__aeabi_ddiv>
 8008478:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800847c:	e02b      	b.n	80084d6 <_dtoa_r+0x3de>
 800847e:	2502      	movs	r5, #2
 8008480:	e7ef      	b.n	8008462 <_dtoa_r+0x36a>
 8008482:	f018 0f01 	tst.w	r8, #1
 8008486:	d008      	beq.n	800849a <_dtoa_r+0x3a2>
 8008488:	4630      	mov	r0, r6
 800848a:	4639      	mov	r1, r7
 800848c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008490:	f7f8 f8d2 	bl	8000638 <__aeabi_dmul>
 8008494:	3501      	adds	r5, #1
 8008496:	4606      	mov	r6, r0
 8008498:	460f      	mov	r7, r1
 800849a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800849e:	f109 0908 	add.w	r9, r9, #8
 80084a2:	e7e0      	b.n	8008466 <_dtoa_r+0x36e>
 80084a4:	f000 809f 	beq.w	80085e6 <_dtoa_r+0x4ee>
 80084a8:	f1cb 0600 	rsb	r6, fp, #0
 80084ac:	4ba1      	ldr	r3, [pc, #644]	; (8008734 <_dtoa_r+0x63c>)
 80084ae:	4fa2      	ldr	r7, [pc, #648]	; (8008738 <_dtoa_r+0x640>)
 80084b0:	f006 020f 	and.w	r2, r6, #15
 80084b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	ec51 0b18 	vmov	r0, r1, d8
 80084c0:	f7f8 f8ba 	bl	8000638 <__aeabi_dmul>
 80084c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084c8:	1136      	asrs	r6, r6, #4
 80084ca:	2300      	movs	r3, #0
 80084cc:	2502      	movs	r5, #2
 80084ce:	2e00      	cmp	r6, #0
 80084d0:	d17e      	bne.n	80085d0 <_dtoa_r+0x4d8>
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1d0      	bne.n	8008478 <_dtoa_r+0x380>
 80084d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 8084 	beq.w	80085ea <_dtoa_r+0x4f2>
 80084e2:	4b96      	ldr	r3, [pc, #600]	; (800873c <_dtoa_r+0x644>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 fb17 	bl	8000b1c <__aeabi_dcmplt>
 80084ee:	2800      	cmp	r0, #0
 80084f0:	d07b      	beq.n	80085ea <_dtoa_r+0x4f2>
 80084f2:	9b04      	ldr	r3, [sp, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d078      	beq.n	80085ea <_dtoa_r+0x4f2>
 80084f8:	9b01      	ldr	r3, [sp, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dd39      	ble.n	8008572 <_dtoa_r+0x47a>
 80084fe:	4b90      	ldr	r3, [pc, #576]	; (8008740 <_dtoa_r+0x648>)
 8008500:	2200      	movs	r2, #0
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f8 f897 	bl	8000638 <__aeabi_dmul>
 800850a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800850e:	9e01      	ldr	r6, [sp, #4]
 8008510:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008514:	3501      	adds	r5, #1
 8008516:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800851a:	4628      	mov	r0, r5
 800851c:	f7f8 f822 	bl	8000564 <__aeabi_i2d>
 8008520:	4642      	mov	r2, r8
 8008522:	464b      	mov	r3, r9
 8008524:	f7f8 f888 	bl	8000638 <__aeabi_dmul>
 8008528:	4b86      	ldr	r3, [pc, #536]	; (8008744 <_dtoa_r+0x64c>)
 800852a:	2200      	movs	r2, #0
 800852c:	f7f7 fece 	bl	80002cc <__adddf3>
 8008530:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008538:	9303      	str	r3, [sp, #12]
 800853a:	2e00      	cmp	r6, #0
 800853c:	d158      	bne.n	80085f0 <_dtoa_r+0x4f8>
 800853e:	4b82      	ldr	r3, [pc, #520]	; (8008748 <_dtoa_r+0x650>)
 8008540:	2200      	movs	r2, #0
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f7 febf 	bl	80002c8 <__aeabi_dsub>
 800854a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800854e:	4680      	mov	r8, r0
 8008550:	4689      	mov	r9, r1
 8008552:	f7f8 fb01 	bl	8000b58 <__aeabi_dcmpgt>
 8008556:	2800      	cmp	r0, #0
 8008558:	f040 8296 	bne.w	8008a88 <_dtoa_r+0x990>
 800855c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008560:	4640      	mov	r0, r8
 8008562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008566:	4649      	mov	r1, r9
 8008568:	f7f8 fad8 	bl	8000b1c <__aeabi_dcmplt>
 800856c:	2800      	cmp	r0, #0
 800856e:	f040 8289 	bne.w	8008a84 <_dtoa_r+0x98c>
 8008572:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008576:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008578:	2b00      	cmp	r3, #0
 800857a:	f2c0 814e 	blt.w	800881a <_dtoa_r+0x722>
 800857e:	f1bb 0f0e 	cmp.w	fp, #14
 8008582:	f300 814a 	bgt.w	800881a <_dtoa_r+0x722>
 8008586:	4b6b      	ldr	r3, [pc, #428]	; (8008734 <_dtoa_r+0x63c>)
 8008588:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800858c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008592:	2b00      	cmp	r3, #0
 8008594:	f280 80dc 	bge.w	8008750 <_dtoa_r+0x658>
 8008598:	9b04      	ldr	r3, [sp, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	f300 80d8 	bgt.w	8008750 <_dtoa_r+0x658>
 80085a0:	f040 826f 	bne.w	8008a82 <_dtoa_r+0x98a>
 80085a4:	4b68      	ldr	r3, [pc, #416]	; (8008748 <_dtoa_r+0x650>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	4640      	mov	r0, r8
 80085aa:	4649      	mov	r1, r9
 80085ac:	f7f8 f844 	bl	8000638 <__aeabi_dmul>
 80085b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085b4:	f7f8 fac6 	bl	8000b44 <__aeabi_dcmpge>
 80085b8:	9e04      	ldr	r6, [sp, #16]
 80085ba:	4637      	mov	r7, r6
 80085bc:	2800      	cmp	r0, #0
 80085be:	f040 8245 	bne.w	8008a4c <_dtoa_r+0x954>
 80085c2:	9d00      	ldr	r5, [sp, #0]
 80085c4:	2331      	movs	r3, #49	; 0x31
 80085c6:	f805 3b01 	strb.w	r3, [r5], #1
 80085ca:	f10b 0b01 	add.w	fp, fp, #1
 80085ce:	e241      	b.n	8008a54 <_dtoa_r+0x95c>
 80085d0:	07f2      	lsls	r2, r6, #31
 80085d2:	d505      	bpl.n	80085e0 <_dtoa_r+0x4e8>
 80085d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d8:	f7f8 f82e 	bl	8000638 <__aeabi_dmul>
 80085dc:	3501      	adds	r5, #1
 80085de:	2301      	movs	r3, #1
 80085e0:	1076      	asrs	r6, r6, #1
 80085e2:	3708      	adds	r7, #8
 80085e4:	e773      	b.n	80084ce <_dtoa_r+0x3d6>
 80085e6:	2502      	movs	r5, #2
 80085e8:	e775      	b.n	80084d6 <_dtoa_r+0x3de>
 80085ea:	9e04      	ldr	r6, [sp, #16]
 80085ec:	465f      	mov	r7, fp
 80085ee:	e792      	b.n	8008516 <_dtoa_r+0x41e>
 80085f0:	9900      	ldr	r1, [sp, #0]
 80085f2:	4b50      	ldr	r3, [pc, #320]	; (8008734 <_dtoa_r+0x63c>)
 80085f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085f8:	4431      	add	r1, r6
 80085fa:	9102      	str	r1, [sp, #8]
 80085fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085fe:	eeb0 9a47 	vmov.f32	s18, s14
 8008602:	eef0 9a67 	vmov.f32	s19, s15
 8008606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800860a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800860e:	2900      	cmp	r1, #0
 8008610:	d044      	beq.n	800869c <_dtoa_r+0x5a4>
 8008612:	494e      	ldr	r1, [pc, #312]	; (800874c <_dtoa_r+0x654>)
 8008614:	2000      	movs	r0, #0
 8008616:	f7f8 f939 	bl	800088c <__aeabi_ddiv>
 800861a:	ec53 2b19 	vmov	r2, r3, d9
 800861e:	f7f7 fe53 	bl	80002c8 <__aeabi_dsub>
 8008622:	9d00      	ldr	r5, [sp, #0]
 8008624:	ec41 0b19 	vmov	d9, r0, r1
 8008628:	4649      	mov	r1, r9
 800862a:	4640      	mov	r0, r8
 800862c:	f7f8 fa9e 	bl	8000b6c <__aeabi_d2iz>
 8008630:	4606      	mov	r6, r0
 8008632:	f7f7 ff97 	bl	8000564 <__aeabi_i2d>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4640      	mov	r0, r8
 800863c:	4649      	mov	r1, r9
 800863e:	f7f7 fe43 	bl	80002c8 <__aeabi_dsub>
 8008642:	3630      	adds	r6, #48	; 0x30
 8008644:	f805 6b01 	strb.w	r6, [r5], #1
 8008648:	ec53 2b19 	vmov	r2, r3, d9
 800864c:	4680      	mov	r8, r0
 800864e:	4689      	mov	r9, r1
 8008650:	f7f8 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	d164      	bne.n	8008722 <_dtoa_r+0x62a>
 8008658:	4642      	mov	r2, r8
 800865a:	464b      	mov	r3, r9
 800865c:	4937      	ldr	r1, [pc, #220]	; (800873c <_dtoa_r+0x644>)
 800865e:	2000      	movs	r0, #0
 8008660:	f7f7 fe32 	bl	80002c8 <__aeabi_dsub>
 8008664:	ec53 2b19 	vmov	r2, r3, d9
 8008668:	f7f8 fa58 	bl	8000b1c <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 80b6 	bne.w	80087de <_dtoa_r+0x6e6>
 8008672:	9b02      	ldr	r3, [sp, #8]
 8008674:	429d      	cmp	r5, r3
 8008676:	f43f af7c 	beq.w	8008572 <_dtoa_r+0x47a>
 800867a:	4b31      	ldr	r3, [pc, #196]	; (8008740 <_dtoa_r+0x648>)
 800867c:	ec51 0b19 	vmov	r0, r1, d9
 8008680:	2200      	movs	r2, #0
 8008682:	f7f7 ffd9 	bl	8000638 <__aeabi_dmul>
 8008686:	4b2e      	ldr	r3, [pc, #184]	; (8008740 <_dtoa_r+0x648>)
 8008688:	ec41 0b19 	vmov	d9, r0, r1
 800868c:	2200      	movs	r2, #0
 800868e:	4640      	mov	r0, r8
 8008690:	4649      	mov	r1, r9
 8008692:	f7f7 ffd1 	bl	8000638 <__aeabi_dmul>
 8008696:	4680      	mov	r8, r0
 8008698:	4689      	mov	r9, r1
 800869a:	e7c5      	b.n	8008628 <_dtoa_r+0x530>
 800869c:	ec51 0b17 	vmov	r0, r1, d7
 80086a0:	f7f7 ffca 	bl	8000638 <__aeabi_dmul>
 80086a4:	9b02      	ldr	r3, [sp, #8]
 80086a6:	9d00      	ldr	r5, [sp, #0]
 80086a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80086aa:	ec41 0b19 	vmov	d9, r0, r1
 80086ae:	4649      	mov	r1, r9
 80086b0:	4640      	mov	r0, r8
 80086b2:	f7f8 fa5b 	bl	8000b6c <__aeabi_d2iz>
 80086b6:	4606      	mov	r6, r0
 80086b8:	f7f7 ff54 	bl	8000564 <__aeabi_i2d>
 80086bc:	3630      	adds	r6, #48	; 0x30
 80086be:	4602      	mov	r2, r0
 80086c0:	460b      	mov	r3, r1
 80086c2:	4640      	mov	r0, r8
 80086c4:	4649      	mov	r1, r9
 80086c6:	f7f7 fdff 	bl	80002c8 <__aeabi_dsub>
 80086ca:	f805 6b01 	strb.w	r6, [r5], #1
 80086ce:	9b02      	ldr	r3, [sp, #8]
 80086d0:	429d      	cmp	r5, r3
 80086d2:	4680      	mov	r8, r0
 80086d4:	4689      	mov	r9, r1
 80086d6:	f04f 0200 	mov.w	r2, #0
 80086da:	d124      	bne.n	8008726 <_dtoa_r+0x62e>
 80086dc:	4b1b      	ldr	r3, [pc, #108]	; (800874c <_dtoa_r+0x654>)
 80086de:	ec51 0b19 	vmov	r0, r1, d9
 80086e2:	f7f7 fdf3 	bl	80002cc <__adddf3>
 80086e6:	4602      	mov	r2, r0
 80086e8:	460b      	mov	r3, r1
 80086ea:	4640      	mov	r0, r8
 80086ec:	4649      	mov	r1, r9
 80086ee:	f7f8 fa33 	bl	8000b58 <__aeabi_dcmpgt>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d173      	bne.n	80087de <_dtoa_r+0x6e6>
 80086f6:	ec53 2b19 	vmov	r2, r3, d9
 80086fa:	4914      	ldr	r1, [pc, #80]	; (800874c <_dtoa_r+0x654>)
 80086fc:	2000      	movs	r0, #0
 80086fe:	f7f7 fde3 	bl	80002c8 <__aeabi_dsub>
 8008702:	4602      	mov	r2, r0
 8008704:	460b      	mov	r3, r1
 8008706:	4640      	mov	r0, r8
 8008708:	4649      	mov	r1, r9
 800870a:	f7f8 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800870e:	2800      	cmp	r0, #0
 8008710:	f43f af2f 	beq.w	8008572 <_dtoa_r+0x47a>
 8008714:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008716:	1e6b      	subs	r3, r5, #1
 8008718:	930f      	str	r3, [sp, #60]	; 0x3c
 800871a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800871e:	2b30      	cmp	r3, #48	; 0x30
 8008720:	d0f8      	beq.n	8008714 <_dtoa_r+0x61c>
 8008722:	46bb      	mov	fp, r7
 8008724:	e04a      	b.n	80087bc <_dtoa_r+0x6c4>
 8008726:	4b06      	ldr	r3, [pc, #24]	; (8008740 <_dtoa_r+0x648>)
 8008728:	f7f7 ff86 	bl	8000638 <__aeabi_dmul>
 800872c:	4680      	mov	r8, r0
 800872e:	4689      	mov	r9, r1
 8008730:	e7bd      	b.n	80086ae <_dtoa_r+0x5b6>
 8008732:	bf00      	nop
 8008734:	08009c20 	.word	0x08009c20
 8008738:	08009bf8 	.word	0x08009bf8
 800873c:	3ff00000 	.word	0x3ff00000
 8008740:	40240000 	.word	0x40240000
 8008744:	401c0000 	.word	0x401c0000
 8008748:	40140000 	.word	0x40140000
 800874c:	3fe00000 	.word	0x3fe00000
 8008750:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008754:	9d00      	ldr	r5, [sp, #0]
 8008756:	4642      	mov	r2, r8
 8008758:	464b      	mov	r3, r9
 800875a:	4630      	mov	r0, r6
 800875c:	4639      	mov	r1, r7
 800875e:	f7f8 f895 	bl	800088c <__aeabi_ddiv>
 8008762:	f7f8 fa03 	bl	8000b6c <__aeabi_d2iz>
 8008766:	9001      	str	r0, [sp, #4]
 8008768:	f7f7 fefc 	bl	8000564 <__aeabi_i2d>
 800876c:	4642      	mov	r2, r8
 800876e:	464b      	mov	r3, r9
 8008770:	f7f7 ff62 	bl	8000638 <__aeabi_dmul>
 8008774:	4602      	mov	r2, r0
 8008776:	460b      	mov	r3, r1
 8008778:	4630      	mov	r0, r6
 800877a:	4639      	mov	r1, r7
 800877c:	f7f7 fda4 	bl	80002c8 <__aeabi_dsub>
 8008780:	9e01      	ldr	r6, [sp, #4]
 8008782:	9f04      	ldr	r7, [sp, #16]
 8008784:	3630      	adds	r6, #48	; 0x30
 8008786:	f805 6b01 	strb.w	r6, [r5], #1
 800878a:	9e00      	ldr	r6, [sp, #0]
 800878c:	1bae      	subs	r6, r5, r6
 800878e:	42b7      	cmp	r7, r6
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	d134      	bne.n	8008800 <_dtoa_r+0x708>
 8008796:	f7f7 fd99 	bl	80002cc <__adddf3>
 800879a:	4642      	mov	r2, r8
 800879c:	464b      	mov	r3, r9
 800879e:	4606      	mov	r6, r0
 80087a0:	460f      	mov	r7, r1
 80087a2:	f7f8 f9d9 	bl	8000b58 <__aeabi_dcmpgt>
 80087a6:	b9c8      	cbnz	r0, 80087dc <_dtoa_r+0x6e4>
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	4630      	mov	r0, r6
 80087ae:	4639      	mov	r1, r7
 80087b0:	f7f8 f9aa 	bl	8000b08 <__aeabi_dcmpeq>
 80087b4:	b110      	cbz	r0, 80087bc <_dtoa_r+0x6c4>
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	07db      	lsls	r3, r3, #31
 80087ba:	d40f      	bmi.n	80087dc <_dtoa_r+0x6e4>
 80087bc:	4651      	mov	r1, sl
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 facc 	bl	8008d5c <_Bfree>
 80087c4:	2300      	movs	r3, #0
 80087c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80087c8:	702b      	strb	r3, [r5, #0]
 80087ca:	f10b 0301 	add.w	r3, fp, #1
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f43f ace2 	beq.w	800819c <_dtoa_r+0xa4>
 80087d8:	601d      	str	r5, [r3, #0]
 80087da:	e4df      	b.n	800819c <_dtoa_r+0xa4>
 80087dc:	465f      	mov	r7, fp
 80087de:	462b      	mov	r3, r5
 80087e0:	461d      	mov	r5, r3
 80087e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e6:	2a39      	cmp	r2, #57	; 0x39
 80087e8:	d106      	bne.n	80087f8 <_dtoa_r+0x700>
 80087ea:	9a00      	ldr	r2, [sp, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d1f7      	bne.n	80087e0 <_dtoa_r+0x6e8>
 80087f0:	9900      	ldr	r1, [sp, #0]
 80087f2:	2230      	movs	r2, #48	; 0x30
 80087f4:	3701      	adds	r7, #1
 80087f6:	700a      	strb	r2, [r1, #0]
 80087f8:	781a      	ldrb	r2, [r3, #0]
 80087fa:	3201      	adds	r2, #1
 80087fc:	701a      	strb	r2, [r3, #0]
 80087fe:	e790      	b.n	8008722 <_dtoa_r+0x62a>
 8008800:	4ba3      	ldr	r3, [pc, #652]	; (8008a90 <_dtoa_r+0x998>)
 8008802:	2200      	movs	r2, #0
 8008804:	f7f7 ff18 	bl	8000638 <__aeabi_dmul>
 8008808:	2200      	movs	r2, #0
 800880a:	2300      	movs	r3, #0
 800880c:	4606      	mov	r6, r0
 800880e:	460f      	mov	r7, r1
 8008810:	f7f8 f97a 	bl	8000b08 <__aeabi_dcmpeq>
 8008814:	2800      	cmp	r0, #0
 8008816:	d09e      	beq.n	8008756 <_dtoa_r+0x65e>
 8008818:	e7d0      	b.n	80087bc <_dtoa_r+0x6c4>
 800881a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800881c:	2a00      	cmp	r2, #0
 800881e:	f000 80ca 	beq.w	80089b6 <_dtoa_r+0x8be>
 8008822:	9a07      	ldr	r2, [sp, #28]
 8008824:	2a01      	cmp	r2, #1
 8008826:	f300 80ad 	bgt.w	8008984 <_dtoa_r+0x88c>
 800882a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800882c:	2a00      	cmp	r2, #0
 800882e:	f000 80a5 	beq.w	800897c <_dtoa_r+0x884>
 8008832:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008836:	9e08      	ldr	r6, [sp, #32]
 8008838:	9d05      	ldr	r5, [sp, #20]
 800883a:	9a05      	ldr	r2, [sp, #20]
 800883c:	441a      	add	r2, r3
 800883e:	9205      	str	r2, [sp, #20]
 8008840:	9a06      	ldr	r2, [sp, #24]
 8008842:	2101      	movs	r1, #1
 8008844:	441a      	add	r2, r3
 8008846:	4620      	mov	r0, r4
 8008848:	9206      	str	r2, [sp, #24]
 800884a:	f000 fb3d 	bl	8008ec8 <__i2b>
 800884e:	4607      	mov	r7, r0
 8008850:	b165      	cbz	r5, 800886c <_dtoa_r+0x774>
 8008852:	9b06      	ldr	r3, [sp, #24]
 8008854:	2b00      	cmp	r3, #0
 8008856:	dd09      	ble.n	800886c <_dtoa_r+0x774>
 8008858:	42ab      	cmp	r3, r5
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	bfa8      	it	ge
 800885e:	462b      	movge	r3, r5
 8008860:	1ad2      	subs	r2, r2, r3
 8008862:	9205      	str	r2, [sp, #20]
 8008864:	9a06      	ldr	r2, [sp, #24]
 8008866:	1aed      	subs	r5, r5, r3
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	9306      	str	r3, [sp, #24]
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	b1f3      	cbz	r3, 80088ae <_dtoa_r+0x7b6>
 8008870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	f000 80a3 	beq.w	80089be <_dtoa_r+0x8c6>
 8008878:	2e00      	cmp	r6, #0
 800887a:	dd10      	ble.n	800889e <_dtoa_r+0x7a6>
 800887c:	4639      	mov	r1, r7
 800887e:	4632      	mov	r2, r6
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fbe1 	bl	8009048 <__pow5mult>
 8008886:	4652      	mov	r2, sl
 8008888:	4601      	mov	r1, r0
 800888a:	4607      	mov	r7, r0
 800888c:	4620      	mov	r0, r4
 800888e:	f000 fb31 	bl	8008ef4 <__multiply>
 8008892:	4651      	mov	r1, sl
 8008894:	4680      	mov	r8, r0
 8008896:	4620      	mov	r0, r4
 8008898:	f000 fa60 	bl	8008d5c <_Bfree>
 800889c:	46c2      	mov	sl, r8
 800889e:	9b08      	ldr	r3, [sp, #32]
 80088a0:	1b9a      	subs	r2, r3, r6
 80088a2:	d004      	beq.n	80088ae <_dtoa_r+0x7b6>
 80088a4:	4651      	mov	r1, sl
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 fbce 	bl	8009048 <__pow5mult>
 80088ac:	4682      	mov	sl, r0
 80088ae:	2101      	movs	r1, #1
 80088b0:	4620      	mov	r0, r4
 80088b2:	f000 fb09 	bl	8008ec8 <__i2b>
 80088b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	4606      	mov	r6, r0
 80088bc:	f340 8081 	ble.w	80089c2 <_dtoa_r+0x8ca>
 80088c0:	461a      	mov	r2, r3
 80088c2:	4601      	mov	r1, r0
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 fbbf 	bl	8009048 <__pow5mult>
 80088ca:	9b07      	ldr	r3, [sp, #28]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	4606      	mov	r6, r0
 80088d0:	dd7a      	ble.n	80089c8 <_dtoa_r+0x8d0>
 80088d2:	f04f 0800 	mov.w	r8, #0
 80088d6:	6933      	ldr	r3, [r6, #16]
 80088d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088dc:	6918      	ldr	r0, [r3, #16]
 80088de:	f000 faa5 	bl	8008e2c <__hi0bits>
 80088e2:	f1c0 0020 	rsb	r0, r0, #32
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	4418      	add	r0, r3
 80088ea:	f010 001f 	ands.w	r0, r0, #31
 80088ee:	f000 8094 	beq.w	8008a1a <_dtoa_r+0x922>
 80088f2:	f1c0 0320 	rsb	r3, r0, #32
 80088f6:	2b04      	cmp	r3, #4
 80088f8:	f340 8085 	ble.w	8008a06 <_dtoa_r+0x90e>
 80088fc:	9b05      	ldr	r3, [sp, #20]
 80088fe:	f1c0 001c 	rsb	r0, r0, #28
 8008902:	4403      	add	r3, r0
 8008904:	9305      	str	r3, [sp, #20]
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	4403      	add	r3, r0
 800890a:	4405      	add	r5, r0
 800890c:	9306      	str	r3, [sp, #24]
 800890e:	9b05      	ldr	r3, [sp, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	dd05      	ble.n	8008920 <_dtoa_r+0x828>
 8008914:	4651      	mov	r1, sl
 8008916:	461a      	mov	r2, r3
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fbef 	bl	80090fc <__lshift>
 800891e:	4682      	mov	sl, r0
 8008920:	9b06      	ldr	r3, [sp, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x83a>
 8008926:	4631      	mov	r1, r6
 8008928:	461a      	mov	r2, r3
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fbe6 	bl	80090fc <__lshift>
 8008930:	4606      	mov	r6, r0
 8008932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008934:	2b00      	cmp	r3, #0
 8008936:	d072      	beq.n	8008a1e <_dtoa_r+0x926>
 8008938:	4631      	mov	r1, r6
 800893a:	4650      	mov	r0, sl
 800893c:	f000 fc4a 	bl	80091d4 <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	da6c      	bge.n	8008a1e <_dtoa_r+0x926>
 8008944:	2300      	movs	r3, #0
 8008946:	4651      	mov	r1, sl
 8008948:	220a      	movs	r2, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fa28 	bl	8008da0 <__multadd>
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008956:	4682      	mov	sl, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 81b0 	beq.w	8008cbe <_dtoa_r+0xbc6>
 800895e:	2300      	movs	r3, #0
 8008960:	4639      	mov	r1, r7
 8008962:	220a      	movs	r2, #10
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fa1b 	bl	8008da0 <__multadd>
 800896a:	9b01      	ldr	r3, [sp, #4]
 800896c:	2b00      	cmp	r3, #0
 800896e:	4607      	mov	r7, r0
 8008970:	f300 8096 	bgt.w	8008aa0 <_dtoa_r+0x9a8>
 8008974:	9b07      	ldr	r3, [sp, #28]
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc59      	bgt.n	8008a2e <_dtoa_r+0x936>
 800897a:	e091      	b.n	8008aa0 <_dtoa_r+0x9a8>
 800897c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800897e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008982:	e758      	b.n	8008836 <_dtoa_r+0x73e>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	1e5e      	subs	r6, r3, #1
 8008988:	9b08      	ldr	r3, [sp, #32]
 800898a:	42b3      	cmp	r3, r6
 800898c:	bfbf      	itttt	lt
 800898e:	9b08      	ldrlt	r3, [sp, #32]
 8008990:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008992:	9608      	strlt	r6, [sp, #32]
 8008994:	1af3      	sublt	r3, r6, r3
 8008996:	bfb4      	ite	lt
 8008998:	18d2      	addlt	r2, r2, r3
 800899a:	1b9e      	subge	r6, r3, r6
 800899c:	9b04      	ldr	r3, [sp, #16]
 800899e:	bfbc      	itt	lt
 80089a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80089a2:	2600      	movlt	r6, #0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfb7      	itett	lt
 80089a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80089ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80089b0:	1a9d      	sublt	r5, r3, r2
 80089b2:	2300      	movlt	r3, #0
 80089b4:	e741      	b.n	800883a <_dtoa_r+0x742>
 80089b6:	9e08      	ldr	r6, [sp, #32]
 80089b8:	9d05      	ldr	r5, [sp, #20]
 80089ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80089bc:	e748      	b.n	8008850 <_dtoa_r+0x758>
 80089be:	9a08      	ldr	r2, [sp, #32]
 80089c0:	e770      	b.n	80088a4 <_dtoa_r+0x7ac>
 80089c2:	9b07      	ldr	r3, [sp, #28]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	dc19      	bgt.n	80089fc <_dtoa_r+0x904>
 80089c8:	9b02      	ldr	r3, [sp, #8]
 80089ca:	b9bb      	cbnz	r3, 80089fc <_dtoa_r+0x904>
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d2:	b99b      	cbnz	r3, 80089fc <_dtoa_r+0x904>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089da:	0d1b      	lsrs	r3, r3, #20
 80089dc:	051b      	lsls	r3, r3, #20
 80089de:	b183      	cbz	r3, 8008a02 <_dtoa_r+0x90a>
 80089e0:	9b05      	ldr	r3, [sp, #20]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9305      	str	r3, [sp, #20]
 80089e6:	9b06      	ldr	r3, [sp, #24]
 80089e8:	3301      	adds	r3, #1
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	f04f 0801 	mov.w	r8, #1
 80089f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f47f af6f 	bne.w	80088d6 <_dtoa_r+0x7de>
 80089f8:	2001      	movs	r0, #1
 80089fa:	e774      	b.n	80088e6 <_dtoa_r+0x7ee>
 80089fc:	f04f 0800 	mov.w	r8, #0
 8008a00:	e7f6      	b.n	80089f0 <_dtoa_r+0x8f8>
 8008a02:	4698      	mov	r8, r3
 8008a04:	e7f4      	b.n	80089f0 <_dtoa_r+0x8f8>
 8008a06:	d082      	beq.n	800890e <_dtoa_r+0x816>
 8008a08:	9a05      	ldr	r2, [sp, #20]
 8008a0a:	331c      	adds	r3, #28
 8008a0c:	441a      	add	r2, r3
 8008a0e:	9205      	str	r2, [sp, #20]
 8008a10:	9a06      	ldr	r2, [sp, #24]
 8008a12:	441a      	add	r2, r3
 8008a14:	441d      	add	r5, r3
 8008a16:	9206      	str	r2, [sp, #24]
 8008a18:	e779      	b.n	800890e <_dtoa_r+0x816>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	e7f4      	b.n	8008a08 <_dtoa_r+0x910>
 8008a1e:	9b04      	ldr	r3, [sp, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	dc37      	bgt.n	8008a94 <_dtoa_r+0x99c>
 8008a24:	9b07      	ldr	r3, [sp, #28]
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	dd34      	ble.n	8008a94 <_dtoa_r+0x99c>
 8008a2a:	9b04      	ldr	r3, [sp, #16]
 8008a2c:	9301      	str	r3, [sp, #4]
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	b963      	cbnz	r3, 8008a4c <_dtoa_r+0x954>
 8008a32:	4631      	mov	r1, r6
 8008a34:	2205      	movs	r2, #5
 8008a36:	4620      	mov	r0, r4
 8008a38:	f000 f9b2 	bl	8008da0 <__multadd>
 8008a3c:	4601      	mov	r1, r0
 8008a3e:	4606      	mov	r6, r0
 8008a40:	4650      	mov	r0, sl
 8008a42:	f000 fbc7 	bl	80091d4 <__mcmp>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f73f adbb 	bgt.w	80085c2 <_dtoa_r+0x4ca>
 8008a4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a4e:	9d00      	ldr	r5, [sp, #0]
 8008a50:	ea6f 0b03 	mvn.w	fp, r3
 8008a54:	f04f 0800 	mov.w	r8, #0
 8008a58:	4631      	mov	r1, r6
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f000 f97e 	bl	8008d5c <_Bfree>
 8008a60:	2f00      	cmp	r7, #0
 8008a62:	f43f aeab 	beq.w	80087bc <_dtoa_r+0x6c4>
 8008a66:	f1b8 0f00 	cmp.w	r8, #0
 8008a6a:	d005      	beq.n	8008a78 <_dtoa_r+0x980>
 8008a6c:	45b8      	cmp	r8, r7
 8008a6e:	d003      	beq.n	8008a78 <_dtoa_r+0x980>
 8008a70:	4641      	mov	r1, r8
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f972 	bl	8008d5c <_Bfree>
 8008a78:	4639      	mov	r1, r7
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 f96e 	bl	8008d5c <_Bfree>
 8008a80:	e69c      	b.n	80087bc <_dtoa_r+0x6c4>
 8008a82:	2600      	movs	r6, #0
 8008a84:	4637      	mov	r7, r6
 8008a86:	e7e1      	b.n	8008a4c <_dtoa_r+0x954>
 8008a88:	46bb      	mov	fp, r7
 8008a8a:	4637      	mov	r7, r6
 8008a8c:	e599      	b.n	80085c2 <_dtoa_r+0x4ca>
 8008a8e:	bf00      	nop
 8008a90:	40240000 	.word	0x40240000
 8008a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80c8 	beq.w	8008c2c <_dtoa_r+0xb34>
 8008a9c:	9b04      	ldr	r3, [sp, #16]
 8008a9e:	9301      	str	r3, [sp, #4]
 8008aa0:	2d00      	cmp	r5, #0
 8008aa2:	dd05      	ble.n	8008ab0 <_dtoa_r+0x9b8>
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fb27 	bl	80090fc <__lshift>
 8008aae:	4607      	mov	r7, r0
 8008ab0:	f1b8 0f00 	cmp.w	r8, #0
 8008ab4:	d05b      	beq.n	8008b6e <_dtoa_r+0xa76>
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f000 f90f 	bl	8008cdc <_Balloc>
 8008abe:	4605      	mov	r5, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <_dtoa_r+0x9d6>
 8008ac2:	4b83      	ldr	r3, [pc, #524]	; (8008cd0 <_dtoa_r+0xbd8>)
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008aca:	f7ff bb2e 	b.w	800812a <_dtoa_r+0x32>
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	f107 010c 	add.w	r1, r7, #12
 8008ad8:	300c      	adds	r0, #12
 8008ada:	f7ff fa75 	bl	8007fc8 <memcpy>
 8008ade:	2201      	movs	r2, #1
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 fb0a 	bl	80090fc <__lshift>
 8008ae8:	9b00      	ldr	r3, [sp, #0]
 8008aea:	3301      	adds	r3, #1
 8008aec:	9304      	str	r3, [sp, #16]
 8008aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008af2:	4413      	add	r3, r2
 8008af4:	9308      	str	r3, [sp, #32]
 8008af6:	9b02      	ldr	r3, [sp, #8]
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	46b8      	mov	r8, r7
 8008afe:	9306      	str	r3, [sp, #24]
 8008b00:	4607      	mov	r7, r0
 8008b02:	9b04      	ldr	r3, [sp, #16]
 8008b04:	4631      	mov	r1, r6
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4650      	mov	r0, sl
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	f7ff fa6a 	bl	8007fe4 <quorem>
 8008b10:	4641      	mov	r1, r8
 8008b12:	9002      	str	r0, [sp, #8]
 8008b14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008b18:	4650      	mov	r0, sl
 8008b1a:	f000 fb5b 	bl	80091d4 <__mcmp>
 8008b1e:	463a      	mov	r2, r7
 8008b20:	9005      	str	r0, [sp, #20]
 8008b22:	4631      	mov	r1, r6
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fb71 	bl	800920c <__mdiff>
 8008b2a:	68c2      	ldr	r2, [r0, #12]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	bb02      	cbnz	r2, 8008b72 <_dtoa_r+0xa7a>
 8008b30:	4601      	mov	r1, r0
 8008b32:	4650      	mov	r0, sl
 8008b34:	f000 fb4e 	bl	80091d4 <__mcmp>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	4629      	mov	r1, r5
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b40:	f000 f90c 	bl	8008d5c <_Bfree>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b48:	9d04      	ldr	r5, [sp, #16]
 8008b4a:	ea43 0102 	orr.w	r1, r3, r2
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	4319      	orrs	r1, r3
 8008b52:	d110      	bne.n	8008b76 <_dtoa_r+0xa7e>
 8008b54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008b58:	d029      	beq.n	8008bae <_dtoa_r+0xab6>
 8008b5a:	9b05      	ldr	r3, [sp, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	dd02      	ble.n	8008b66 <_dtoa_r+0xa6e>
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008b66:	9b01      	ldr	r3, [sp, #4]
 8008b68:	f883 9000 	strb.w	r9, [r3]
 8008b6c:	e774      	b.n	8008a58 <_dtoa_r+0x960>
 8008b6e:	4638      	mov	r0, r7
 8008b70:	e7ba      	b.n	8008ae8 <_dtoa_r+0x9f0>
 8008b72:	2201      	movs	r2, #1
 8008b74:	e7e1      	b.n	8008b3a <_dtoa_r+0xa42>
 8008b76:	9b05      	ldr	r3, [sp, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	db04      	blt.n	8008b86 <_dtoa_r+0xa8e>
 8008b7c:	9907      	ldr	r1, [sp, #28]
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	9906      	ldr	r1, [sp, #24]
 8008b82:	430b      	orrs	r3, r1
 8008b84:	d120      	bne.n	8008bc8 <_dtoa_r+0xad0>
 8008b86:	2a00      	cmp	r2, #0
 8008b88:	dded      	ble.n	8008b66 <_dtoa_r+0xa6e>
 8008b8a:	4651      	mov	r1, sl
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	4620      	mov	r0, r4
 8008b90:	f000 fab4 	bl	80090fc <__lshift>
 8008b94:	4631      	mov	r1, r6
 8008b96:	4682      	mov	sl, r0
 8008b98:	f000 fb1c 	bl	80091d4 <__mcmp>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	dc03      	bgt.n	8008ba8 <_dtoa_r+0xab0>
 8008ba0:	d1e1      	bne.n	8008b66 <_dtoa_r+0xa6e>
 8008ba2:	f019 0f01 	tst.w	r9, #1
 8008ba6:	d0de      	beq.n	8008b66 <_dtoa_r+0xa6e>
 8008ba8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bac:	d1d8      	bne.n	8008b60 <_dtoa_r+0xa68>
 8008bae:	9a01      	ldr	r2, [sp, #4]
 8008bb0:	2339      	movs	r3, #57	; 0x39
 8008bb2:	7013      	strb	r3, [r2, #0]
 8008bb4:	462b      	mov	r3, r5
 8008bb6:	461d      	mov	r5, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bbe:	2a39      	cmp	r2, #57	; 0x39
 8008bc0:	d06c      	beq.n	8008c9c <_dtoa_r+0xba4>
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	701a      	strb	r2, [r3, #0]
 8008bc6:	e747      	b.n	8008a58 <_dtoa_r+0x960>
 8008bc8:	2a00      	cmp	r2, #0
 8008bca:	dd07      	ble.n	8008bdc <_dtoa_r+0xae4>
 8008bcc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008bd0:	d0ed      	beq.n	8008bae <_dtoa_r+0xab6>
 8008bd2:	9a01      	ldr	r2, [sp, #4]
 8008bd4:	f109 0301 	add.w	r3, r9, #1
 8008bd8:	7013      	strb	r3, [r2, #0]
 8008bda:	e73d      	b.n	8008a58 <_dtoa_r+0x960>
 8008bdc:	9b04      	ldr	r3, [sp, #16]
 8008bde:	9a08      	ldr	r2, [sp, #32]
 8008be0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d043      	beq.n	8008c70 <_dtoa_r+0xb78>
 8008be8:	4651      	mov	r1, sl
 8008bea:	2300      	movs	r3, #0
 8008bec:	220a      	movs	r2, #10
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f000 f8d6 	bl	8008da0 <__multadd>
 8008bf4:	45b8      	cmp	r8, r7
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	f04f 0300 	mov.w	r3, #0
 8008bfc:	f04f 020a 	mov.w	r2, #10
 8008c00:	4641      	mov	r1, r8
 8008c02:	4620      	mov	r0, r4
 8008c04:	d107      	bne.n	8008c16 <_dtoa_r+0xb1e>
 8008c06:	f000 f8cb 	bl	8008da0 <__multadd>
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	9b04      	ldr	r3, [sp, #16]
 8008c10:	3301      	adds	r3, #1
 8008c12:	9304      	str	r3, [sp, #16]
 8008c14:	e775      	b.n	8008b02 <_dtoa_r+0xa0a>
 8008c16:	f000 f8c3 	bl	8008da0 <__multadd>
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	2300      	movs	r3, #0
 8008c20:	220a      	movs	r2, #10
 8008c22:	4620      	mov	r0, r4
 8008c24:	f000 f8bc 	bl	8008da0 <__multadd>
 8008c28:	4607      	mov	r7, r0
 8008c2a:	e7f0      	b.n	8008c0e <_dtoa_r+0xb16>
 8008c2c:	9b04      	ldr	r3, [sp, #16]
 8008c2e:	9301      	str	r3, [sp, #4]
 8008c30:	9d00      	ldr	r5, [sp, #0]
 8008c32:	4631      	mov	r1, r6
 8008c34:	4650      	mov	r0, sl
 8008c36:	f7ff f9d5 	bl	8007fe4 <quorem>
 8008c3a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008c3e:	9b00      	ldr	r3, [sp, #0]
 8008c40:	f805 9b01 	strb.w	r9, [r5], #1
 8008c44:	1aea      	subs	r2, r5, r3
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	dd07      	ble.n	8008c5c <_dtoa_r+0xb64>
 8008c4c:	4651      	mov	r1, sl
 8008c4e:	2300      	movs	r3, #0
 8008c50:	220a      	movs	r2, #10
 8008c52:	4620      	mov	r0, r4
 8008c54:	f000 f8a4 	bl	8008da0 <__multadd>
 8008c58:	4682      	mov	sl, r0
 8008c5a:	e7ea      	b.n	8008c32 <_dtoa_r+0xb3a>
 8008c5c:	9b01      	ldr	r3, [sp, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	bfc8      	it	gt
 8008c62:	461d      	movgt	r5, r3
 8008c64:	9b00      	ldr	r3, [sp, #0]
 8008c66:	bfd8      	it	le
 8008c68:	2501      	movle	r5, #1
 8008c6a:	441d      	add	r5, r3
 8008c6c:	f04f 0800 	mov.w	r8, #0
 8008c70:	4651      	mov	r1, sl
 8008c72:	2201      	movs	r2, #1
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fa41 	bl	80090fc <__lshift>
 8008c7a:	4631      	mov	r1, r6
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	f000 faa9 	bl	80091d4 <__mcmp>
 8008c82:	2800      	cmp	r0, #0
 8008c84:	dc96      	bgt.n	8008bb4 <_dtoa_r+0xabc>
 8008c86:	d102      	bne.n	8008c8e <_dtoa_r+0xb96>
 8008c88:	f019 0f01 	tst.w	r9, #1
 8008c8c:	d192      	bne.n	8008bb4 <_dtoa_r+0xabc>
 8008c8e:	462b      	mov	r3, r5
 8008c90:	461d      	mov	r5, r3
 8008c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c96:	2a30      	cmp	r2, #48	; 0x30
 8008c98:	d0fa      	beq.n	8008c90 <_dtoa_r+0xb98>
 8008c9a:	e6dd      	b.n	8008a58 <_dtoa_r+0x960>
 8008c9c:	9a00      	ldr	r2, [sp, #0]
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d189      	bne.n	8008bb6 <_dtoa_r+0xabe>
 8008ca2:	f10b 0b01 	add.w	fp, fp, #1
 8008ca6:	2331      	movs	r3, #49	; 0x31
 8008ca8:	e796      	b.n	8008bd8 <_dtoa_r+0xae0>
 8008caa:	4b0a      	ldr	r3, [pc, #40]	; (8008cd4 <_dtoa_r+0xbdc>)
 8008cac:	f7ff ba99 	b.w	80081e2 <_dtoa_r+0xea>
 8008cb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	f47f aa6d 	bne.w	8008192 <_dtoa_r+0x9a>
 8008cb8:	4b07      	ldr	r3, [pc, #28]	; (8008cd8 <_dtoa_r+0xbe0>)
 8008cba:	f7ff ba92 	b.w	80081e2 <_dtoa_r+0xea>
 8008cbe:	9b01      	ldr	r3, [sp, #4]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	dcb5      	bgt.n	8008c30 <_dtoa_r+0xb38>
 8008cc4:	9b07      	ldr	r3, [sp, #28]
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	f73f aeb1 	bgt.w	8008a2e <_dtoa_r+0x936>
 8008ccc:	e7b0      	b.n	8008c30 <_dtoa_r+0xb38>
 8008cce:	bf00      	nop
 8008cd0:	08009b8d 	.word	0x08009b8d
 8008cd4:	08009b1c 	.word	0x08009b1c
 8008cd8:	08009b0f 	.word	0x08009b0f

08008cdc <_Balloc>:
 8008cdc:	b570      	push	{r4, r5, r6, lr}
 8008cde:	69c6      	ldr	r6, [r0, #28]
 8008ce0:	4604      	mov	r4, r0
 8008ce2:	460d      	mov	r5, r1
 8008ce4:	b976      	cbnz	r6, 8008d04 <_Balloc+0x28>
 8008ce6:	2010      	movs	r0, #16
 8008ce8:	f7fe f9a0 	bl	800702c <malloc>
 8008cec:	4602      	mov	r2, r0
 8008cee:	61e0      	str	r0, [r4, #28]
 8008cf0:	b920      	cbnz	r0, 8008cfc <_Balloc+0x20>
 8008cf2:	4b18      	ldr	r3, [pc, #96]	; (8008d54 <_Balloc+0x78>)
 8008cf4:	4818      	ldr	r0, [pc, #96]	; (8008d58 <_Balloc+0x7c>)
 8008cf6:	216b      	movs	r1, #107	; 0x6b
 8008cf8:	f000 fbba 	bl	8009470 <__assert_func>
 8008cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d00:	6006      	str	r6, [r0, #0]
 8008d02:	60c6      	str	r6, [r0, #12]
 8008d04:	69e6      	ldr	r6, [r4, #28]
 8008d06:	68f3      	ldr	r3, [r6, #12]
 8008d08:	b183      	cbz	r3, 8008d2c <_Balloc+0x50>
 8008d0a:	69e3      	ldr	r3, [r4, #28]
 8008d0c:	68db      	ldr	r3, [r3, #12]
 8008d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d12:	b9b8      	cbnz	r0, 8008d44 <_Balloc+0x68>
 8008d14:	2101      	movs	r1, #1
 8008d16:	fa01 f605 	lsl.w	r6, r1, r5
 8008d1a:	1d72      	adds	r2, r6, #5
 8008d1c:	0092      	lsls	r2, r2, #2
 8008d1e:	4620      	mov	r0, r4
 8008d20:	f000 fbc4 	bl	80094ac <_calloc_r>
 8008d24:	b160      	cbz	r0, 8008d40 <_Balloc+0x64>
 8008d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d2a:	e00e      	b.n	8008d4a <_Balloc+0x6e>
 8008d2c:	2221      	movs	r2, #33	; 0x21
 8008d2e:	2104      	movs	r1, #4
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fbbb 	bl	80094ac <_calloc_r>
 8008d36:	69e3      	ldr	r3, [r4, #28]
 8008d38:	60f0      	str	r0, [r6, #12]
 8008d3a:	68db      	ldr	r3, [r3, #12]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d1e4      	bne.n	8008d0a <_Balloc+0x2e>
 8008d40:	2000      	movs	r0, #0
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	6802      	ldr	r2, [r0, #0]
 8008d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d50:	e7f7      	b.n	8008d42 <_Balloc+0x66>
 8008d52:	bf00      	nop
 8008d54:	08009b1e 	.word	0x08009b1e
 8008d58:	08009b9e 	.word	0x08009b9e

08008d5c <_Bfree>:
 8008d5c:	b570      	push	{r4, r5, r6, lr}
 8008d5e:	69c6      	ldr	r6, [r0, #28]
 8008d60:	4605      	mov	r5, r0
 8008d62:	460c      	mov	r4, r1
 8008d64:	b976      	cbnz	r6, 8008d84 <_Bfree+0x28>
 8008d66:	2010      	movs	r0, #16
 8008d68:	f7fe f960 	bl	800702c <malloc>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	61e8      	str	r0, [r5, #28]
 8008d70:	b920      	cbnz	r0, 8008d7c <_Bfree+0x20>
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <_Bfree+0x3c>)
 8008d74:	4809      	ldr	r0, [pc, #36]	; (8008d9c <_Bfree+0x40>)
 8008d76:	218f      	movs	r1, #143	; 0x8f
 8008d78:	f000 fb7a 	bl	8009470 <__assert_func>
 8008d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d80:	6006      	str	r6, [r0, #0]
 8008d82:	60c6      	str	r6, [r0, #12]
 8008d84:	b13c      	cbz	r4, 8008d96 <_Bfree+0x3a>
 8008d86:	69eb      	ldr	r3, [r5, #28]
 8008d88:	6862      	ldr	r2, [r4, #4]
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d90:	6021      	str	r1, [r4, #0]
 8008d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	08009b1e 	.word	0x08009b1e
 8008d9c:	08009b9e 	.word	0x08009b9e

08008da0 <__multadd>:
 8008da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da4:	690d      	ldr	r5, [r1, #16]
 8008da6:	4607      	mov	r7, r0
 8008da8:	460c      	mov	r4, r1
 8008daa:	461e      	mov	r6, r3
 8008dac:	f101 0c14 	add.w	ip, r1, #20
 8008db0:	2000      	movs	r0, #0
 8008db2:	f8dc 3000 	ldr.w	r3, [ip]
 8008db6:	b299      	uxth	r1, r3
 8008db8:	fb02 6101 	mla	r1, r2, r1, r6
 8008dbc:	0c1e      	lsrs	r6, r3, #16
 8008dbe:	0c0b      	lsrs	r3, r1, #16
 8008dc0:	fb02 3306 	mla	r3, r2, r6, r3
 8008dc4:	b289      	uxth	r1, r1
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008dcc:	4285      	cmp	r5, r0
 8008dce:	f84c 1b04 	str.w	r1, [ip], #4
 8008dd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dd6:	dcec      	bgt.n	8008db2 <__multadd+0x12>
 8008dd8:	b30e      	cbz	r6, 8008e1e <__multadd+0x7e>
 8008dda:	68a3      	ldr	r3, [r4, #8]
 8008ddc:	42ab      	cmp	r3, r5
 8008dde:	dc19      	bgt.n	8008e14 <__multadd+0x74>
 8008de0:	6861      	ldr	r1, [r4, #4]
 8008de2:	4638      	mov	r0, r7
 8008de4:	3101      	adds	r1, #1
 8008de6:	f7ff ff79 	bl	8008cdc <_Balloc>
 8008dea:	4680      	mov	r8, r0
 8008dec:	b928      	cbnz	r0, 8008dfa <__multadd+0x5a>
 8008dee:	4602      	mov	r2, r0
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <__multadd+0x84>)
 8008df2:	480d      	ldr	r0, [pc, #52]	; (8008e28 <__multadd+0x88>)
 8008df4:	21ba      	movs	r1, #186	; 0xba
 8008df6:	f000 fb3b 	bl	8009470 <__assert_func>
 8008dfa:	6922      	ldr	r2, [r4, #16]
 8008dfc:	3202      	adds	r2, #2
 8008dfe:	f104 010c 	add.w	r1, r4, #12
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	300c      	adds	r0, #12
 8008e06:	f7ff f8df 	bl	8007fc8 <memcpy>
 8008e0a:	4621      	mov	r1, r4
 8008e0c:	4638      	mov	r0, r7
 8008e0e:	f7ff ffa5 	bl	8008d5c <_Bfree>
 8008e12:	4644      	mov	r4, r8
 8008e14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e18:	3501      	adds	r5, #1
 8008e1a:	615e      	str	r6, [r3, #20]
 8008e1c:	6125      	str	r5, [r4, #16]
 8008e1e:	4620      	mov	r0, r4
 8008e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e24:	08009b8d 	.word	0x08009b8d
 8008e28:	08009b9e 	.word	0x08009b9e

08008e2c <__hi0bits>:
 8008e2c:	0c03      	lsrs	r3, r0, #16
 8008e2e:	041b      	lsls	r3, r3, #16
 8008e30:	b9d3      	cbnz	r3, 8008e68 <__hi0bits+0x3c>
 8008e32:	0400      	lsls	r0, r0, #16
 8008e34:	2310      	movs	r3, #16
 8008e36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e3a:	bf04      	itt	eq
 8008e3c:	0200      	lsleq	r0, r0, #8
 8008e3e:	3308      	addeq	r3, #8
 8008e40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e44:	bf04      	itt	eq
 8008e46:	0100      	lsleq	r0, r0, #4
 8008e48:	3304      	addeq	r3, #4
 8008e4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e4e:	bf04      	itt	eq
 8008e50:	0080      	lsleq	r0, r0, #2
 8008e52:	3302      	addeq	r3, #2
 8008e54:	2800      	cmp	r0, #0
 8008e56:	db05      	blt.n	8008e64 <__hi0bits+0x38>
 8008e58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008e5c:	f103 0301 	add.w	r3, r3, #1
 8008e60:	bf08      	it	eq
 8008e62:	2320      	moveq	r3, #32
 8008e64:	4618      	mov	r0, r3
 8008e66:	4770      	bx	lr
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e7e4      	b.n	8008e36 <__hi0bits+0xa>

08008e6c <__lo0bits>:
 8008e6c:	6803      	ldr	r3, [r0, #0]
 8008e6e:	f013 0207 	ands.w	r2, r3, #7
 8008e72:	d00c      	beq.n	8008e8e <__lo0bits+0x22>
 8008e74:	07d9      	lsls	r1, r3, #31
 8008e76:	d422      	bmi.n	8008ebe <__lo0bits+0x52>
 8008e78:	079a      	lsls	r2, r3, #30
 8008e7a:	bf49      	itett	mi
 8008e7c:	085b      	lsrmi	r3, r3, #1
 8008e7e:	089b      	lsrpl	r3, r3, #2
 8008e80:	6003      	strmi	r3, [r0, #0]
 8008e82:	2201      	movmi	r2, #1
 8008e84:	bf5c      	itt	pl
 8008e86:	6003      	strpl	r3, [r0, #0]
 8008e88:	2202      	movpl	r2, #2
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4770      	bx	lr
 8008e8e:	b299      	uxth	r1, r3
 8008e90:	b909      	cbnz	r1, 8008e96 <__lo0bits+0x2a>
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	2210      	movs	r2, #16
 8008e96:	b2d9      	uxtb	r1, r3
 8008e98:	b909      	cbnz	r1, 8008e9e <__lo0bits+0x32>
 8008e9a:	3208      	adds	r2, #8
 8008e9c:	0a1b      	lsrs	r3, r3, #8
 8008e9e:	0719      	lsls	r1, r3, #28
 8008ea0:	bf04      	itt	eq
 8008ea2:	091b      	lsreq	r3, r3, #4
 8008ea4:	3204      	addeq	r2, #4
 8008ea6:	0799      	lsls	r1, r3, #30
 8008ea8:	bf04      	itt	eq
 8008eaa:	089b      	lsreq	r3, r3, #2
 8008eac:	3202      	addeq	r2, #2
 8008eae:	07d9      	lsls	r1, r3, #31
 8008eb0:	d403      	bmi.n	8008eba <__lo0bits+0x4e>
 8008eb2:	085b      	lsrs	r3, r3, #1
 8008eb4:	f102 0201 	add.w	r2, r2, #1
 8008eb8:	d003      	beq.n	8008ec2 <__lo0bits+0x56>
 8008eba:	6003      	str	r3, [r0, #0]
 8008ebc:	e7e5      	b.n	8008e8a <__lo0bits+0x1e>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	e7e3      	b.n	8008e8a <__lo0bits+0x1e>
 8008ec2:	2220      	movs	r2, #32
 8008ec4:	e7e1      	b.n	8008e8a <__lo0bits+0x1e>
	...

08008ec8 <__i2b>:
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	460c      	mov	r4, r1
 8008ecc:	2101      	movs	r1, #1
 8008ece:	f7ff ff05 	bl	8008cdc <_Balloc>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	b928      	cbnz	r0, 8008ee2 <__i2b+0x1a>
 8008ed6:	4b05      	ldr	r3, [pc, #20]	; (8008eec <__i2b+0x24>)
 8008ed8:	4805      	ldr	r0, [pc, #20]	; (8008ef0 <__i2b+0x28>)
 8008eda:	f240 1145 	movw	r1, #325	; 0x145
 8008ede:	f000 fac7 	bl	8009470 <__assert_func>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	6144      	str	r4, [r0, #20]
 8008ee6:	6103      	str	r3, [r0, #16]
 8008ee8:	bd10      	pop	{r4, pc}
 8008eea:	bf00      	nop
 8008eec:	08009b8d 	.word	0x08009b8d
 8008ef0:	08009b9e 	.word	0x08009b9e

08008ef4 <__multiply>:
 8008ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	4691      	mov	r9, r2
 8008efa:	690a      	ldr	r2, [r1, #16]
 8008efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	bfb8      	it	lt
 8008f04:	460b      	movlt	r3, r1
 8008f06:	460c      	mov	r4, r1
 8008f08:	bfbc      	itt	lt
 8008f0a:	464c      	movlt	r4, r9
 8008f0c:	4699      	movlt	r9, r3
 8008f0e:	6927      	ldr	r7, [r4, #16]
 8008f10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f14:	68a3      	ldr	r3, [r4, #8]
 8008f16:	6861      	ldr	r1, [r4, #4]
 8008f18:	eb07 060a 	add.w	r6, r7, sl
 8008f1c:	42b3      	cmp	r3, r6
 8008f1e:	b085      	sub	sp, #20
 8008f20:	bfb8      	it	lt
 8008f22:	3101      	addlt	r1, #1
 8008f24:	f7ff feda 	bl	8008cdc <_Balloc>
 8008f28:	b930      	cbnz	r0, 8008f38 <__multiply+0x44>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	4b44      	ldr	r3, [pc, #272]	; (8009040 <__multiply+0x14c>)
 8008f2e:	4845      	ldr	r0, [pc, #276]	; (8009044 <__multiply+0x150>)
 8008f30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008f34:	f000 fa9c 	bl	8009470 <__assert_func>
 8008f38:	f100 0514 	add.w	r5, r0, #20
 8008f3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f40:	462b      	mov	r3, r5
 8008f42:	2200      	movs	r2, #0
 8008f44:	4543      	cmp	r3, r8
 8008f46:	d321      	bcc.n	8008f8c <__multiply+0x98>
 8008f48:	f104 0314 	add.w	r3, r4, #20
 8008f4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f50:	f109 0314 	add.w	r3, r9, #20
 8008f54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f58:	9202      	str	r2, [sp, #8]
 8008f5a:	1b3a      	subs	r2, r7, r4
 8008f5c:	3a15      	subs	r2, #21
 8008f5e:	f022 0203 	bic.w	r2, r2, #3
 8008f62:	3204      	adds	r2, #4
 8008f64:	f104 0115 	add.w	r1, r4, #21
 8008f68:	428f      	cmp	r7, r1
 8008f6a:	bf38      	it	cc
 8008f6c:	2204      	movcc	r2, #4
 8008f6e:	9201      	str	r2, [sp, #4]
 8008f70:	9a02      	ldr	r2, [sp, #8]
 8008f72:	9303      	str	r3, [sp, #12]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d80c      	bhi.n	8008f92 <__multiply+0x9e>
 8008f78:	2e00      	cmp	r6, #0
 8008f7a:	dd03      	ble.n	8008f84 <__multiply+0x90>
 8008f7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d05b      	beq.n	800903c <__multiply+0x148>
 8008f84:	6106      	str	r6, [r0, #16]
 8008f86:	b005      	add	sp, #20
 8008f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8c:	f843 2b04 	str.w	r2, [r3], #4
 8008f90:	e7d8      	b.n	8008f44 <__multiply+0x50>
 8008f92:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f96:	f1ba 0f00 	cmp.w	sl, #0
 8008f9a:	d024      	beq.n	8008fe6 <__multiply+0xf2>
 8008f9c:	f104 0e14 	add.w	lr, r4, #20
 8008fa0:	46a9      	mov	r9, r5
 8008fa2:	f04f 0c00 	mov.w	ip, #0
 8008fa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008faa:	f8d9 1000 	ldr.w	r1, [r9]
 8008fae:	fa1f fb82 	uxth.w	fp, r2
 8008fb2:	b289      	uxth	r1, r1
 8008fb4:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fb8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008fc0:	4461      	add	r1, ip
 8008fc2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fc6:	fb0a c20b 	mla	r2, sl, fp, ip
 8008fca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fce:	b289      	uxth	r1, r1
 8008fd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fd4:	4577      	cmp	r7, lr
 8008fd6:	f849 1b04 	str.w	r1, [r9], #4
 8008fda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fde:	d8e2      	bhi.n	8008fa6 <__multiply+0xb2>
 8008fe0:	9a01      	ldr	r2, [sp, #4]
 8008fe2:	f845 c002 	str.w	ip, [r5, r2]
 8008fe6:	9a03      	ldr	r2, [sp, #12]
 8008fe8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fec:	3304      	adds	r3, #4
 8008fee:	f1b9 0f00 	cmp.w	r9, #0
 8008ff2:	d021      	beq.n	8009038 <__multiply+0x144>
 8008ff4:	6829      	ldr	r1, [r5, #0]
 8008ff6:	f104 0c14 	add.w	ip, r4, #20
 8008ffa:	46ae      	mov	lr, r5
 8008ffc:	f04f 0a00 	mov.w	sl, #0
 8009000:	f8bc b000 	ldrh.w	fp, [ip]
 8009004:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009008:	fb09 220b 	mla	r2, r9, fp, r2
 800900c:	4452      	add	r2, sl
 800900e:	b289      	uxth	r1, r1
 8009010:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009014:	f84e 1b04 	str.w	r1, [lr], #4
 8009018:	f85c 1b04 	ldr.w	r1, [ip], #4
 800901c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009020:	f8be 1000 	ldrh.w	r1, [lr]
 8009024:	fb09 110a 	mla	r1, r9, sl, r1
 8009028:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800902c:	4567      	cmp	r7, ip
 800902e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009032:	d8e5      	bhi.n	8009000 <__multiply+0x10c>
 8009034:	9a01      	ldr	r2, [sp, #4]
 8009036:	50a9      	str	r1, [r5, r2]
 8009038:	3504      	adds	r5, #4
 800903a:	e799      	b.n	8008f70 <__multiply+0x7c>
 800903c:	3e01      	subs	r6, #1
 800903e:	e79b      	b.n	8008f78 <__multiply+0x84>
 8009040:	08009b8d 	.word	0x08009b8d
 8009044:	08009b9e 	.word	0x08009b9e

08009048 <__pow5mult>:
 8009048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800904c:	4615      	mov	r5, r2
 800904e:	f012 0203 	ands.w	r2, r2, #3
 8009052:	4606      	mov	r6, r0
 8009054:	460f      	mov	r7, r1
 8009056:	d007      	beq.n	8009068 <__pow5mult+0x20>
 8009058:	4c25      	ldr	r4, [pc, #148]	; (80090f0 <__pow5mult+0xa8>)
 800905a:	3a01      	subs	r2, #1
 800905c:	2300      	movs	r3, #0
 800905e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009062:	f7ff fe9d 	bl	8008da0 <__multadd>
 8009066:	4607      	mov	r7, r0
 8009068:	10ad      	asrs	r5, r5, #2
 800906a:	d03d      	beq.n	80090e8 <__pow5mult+0xa0>
 800906c:	69f4      	ldr	r4, [r6, #28]
 800906e:	b97c      	cbnz	r4, 8009090 <__pow5mult+0x48>
 8009070:	2010      	movs	r0, #16
 8009072:	f7fd ffdb 	bl	800702c <malloc>
 8009076:	4602      	mov	r2, r0
 8009078:	61f0      	str	r0, [r6, #28]
 800907a:	b928      	cbnz	r0, 8009088 <__pow5mult+0x40>
 800907c:	4b1d      	ldr	r3, [pc, #116]	; (80090f4 <__pow5mult+0xac>)
 800907e:	481e      	ldr	r0, [pc, #120]	; (80090f8 <__pow5mult+0xb0>)
 8009080:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009084:	f000 f9f4 	bl	8009470 <__assert_func>
 8009088:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800908c:	6004      	str	r4, [r0, #0]
 800908e:	60c4      	str	r4, [r0, #12]
 8009090:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009094:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009098:	b94c      	cbnz	r4, 80090ae <__pow5mult+0x66>
 800909a:	f240 2171 	movw	r1, #625	; 0x271
 800909e:	4630      	mov	r0, r6
 80090a0:	f7ff ff12 	bl	8008ec8 <__i2b>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090aa:	4604      	mov	r4, r0
 80090ac:	6003      	str	r3, [r0, #0]
 80090ae:	f04f 0900 	mov.w	r9, #0
 80090b2:	07eb      	lsls	r3, r5, #31
 80090b4:	d50a      	bpl.n	80090cc <__pow5mult+0x84>
 80090b6:	4639      	mov	r1, r7
 80090b8:	4622      	mov	r2, r4
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff ff1a 	bl	8008ef4 <__multiply>
 80090c0:	4639      	mov	r1, r7
 80090c2:	4680      	mov	r8, r0
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7ff fe49 	bl	8008d5c <_Bfree>
 80090ca:	4647      	mov	r7, r8
 80090cc:	106d      	asrs	r5, r5, #1
 80090ce:	d00b      	beq.n	80090e8 <__pow5mult+0xa0>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	b938      	cbnz	r0, 80090e4 <__pow5mult+0x9c>
 80090d4:	4622      	mov	r2, r4
 80090d6:	4621      	mov	r1, r4
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff ff0b 	bl	8008ef4 <__multiply>
 80090de:	6020      	str	r0, [r4, #0]
 80090e0:	f8c0 9000 	str.w	r9, [r0]
 80090e4:	4604      	mov	r4, r0
 80090e6:	e7e4      	b.n	80090b2 <__pow5mult+0x6a>
 80090e8:	4638      	mov	r0, r7
 80090ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ee:	bf00      	nop
 80090f0:	08009ce8 	.word	0x08009ce8
 80090f4:	08009b1e 	.word	0x08009b1e
 80090f8:	08009b9e 	.word	0x08009b9e

080090fc <__lshift>:
 80090fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009100:	460c      	mov	r4, r1
 8009102:	6849      	ldr	r1, [r1, #4]
 8009104:	6923      	ldr	r3, [r4, #16]
 8009106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	4607      	mov	r7, r0
 800910e:	4691      	mov	r9, r2
 8009110:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009114:	f108 0601 	add.w	r6, r8, #1
 8009118:	42b3      	cmp	r3, r6
 800911a:	db0b      	blt.n	8009134 <__lshift+0x38>
 800911c:	4638      	mov	r0, r7
 800911e:	f7ff fddd 	bl	8008cdc <_Balloc>
 8009122:	4605      	mov	r5, r0
 8009124:	b948      	cbnz	r0, 800913a <__lshift+0x3e>
 8009126:	4602      	mov	r2, r0
 8009128:	4b28      	ldr	r3, [pc, #160]	; (80091cc <__lshift+0xd0>)
 800912a:	4829      	ldr	r0, [pc, #164]	; (80091d0 <__lshift+0xd4>)
 800912c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009130:	f000 f99e 	bl	8009470 <__assert_func>
 8009134:	3101      	adds	r1, #1
 8009136:	005b      	lsls	r3, r3, #1
 8009138:	e7ee      	b.n	8009118 <__lshift+0x1c>
 800913a:	2300      	movs	r3, #0
 800913c:	f100 0114 	add.w	r1, r0, #20
 8009140:	f100 0210 	add.w	r2, r0, #16
 8009144:	4618      	mov	r0, r3
 8009146:	4553      	cmp	r3, sl
 8009148:	db33      	blt.n	80091b2 <__lshift+0xb6>
 800914a:	6920      	ldr	r0, [r4, #16]
 800914c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009150:	f104 0314 	add.w	r3, r4, #20
 8009154:	f019 091f 	ands.w	r9, r9, #31
 8009158:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800915c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009160:	d02b      	beq.n	80091ba <__lshift+0xbe>
 8009162:	f1c9 0e20 	rsb	lr, r9, #32
 8009166:	468a      	mov	sl, r1
 8009168:	2200      	movs	r2, #0
 800916a:	6818      	ldr	r0, [r3, #0]
 800916c:	fa00 f009 	lsl.w	r0, r0, r9
 8009170:	4310      	orrs	r0, r2
 8009172:	f84a 0b04 	str.w	r0, [sl], #4
 8009176:	f853 2b04 	ldr.w	r2, [r3], #4
 800917a:	459c      	cmp	ip, r3
 800917c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009180:	d8f3      	bhi.n	800916a <__lshift+0x6e>
 8009182:	ebac 0304 	sub.w	r3, ip, r4
 8009186:	3b15      	subs	r3, #21
 8009188:	f023 0303 	bic.w	r3, r3, #3
 800918c:	3304      	adds	r3, #4
 800918e:	f104 0015 	add.w	r0, r4, #21
 8009192:	4584      	cmp	ip, r0
 8009194:	bf38      	it	cc
 8009196:	2304      	movcc	r3, #4
 8009198:	50ca      	str	r2, [r1, r3]
 800919a:	b10a      	cbz	r2, 80091a0 <__lshift+0xa4>
 800919c:	f108 0602 	add.w	r6, r8, #2
 80091a0:	3e01      	subs	r6, #1
 80091a2:	4638      	mov	r0, r7
 80091a4:	612e      	str	r6, [r5, #16]
 80091a6:	4621      	mov	r1, r4
 80091a8:	f7ff fdd8 	bl	8008d5c <_Bfree>
 80091ac:	4628      	mov	r0, r5
 80091ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091b6:	3301      	adds	r3, #1
 80091b8:	e7c5      	b.n	8009146 <__lshift+0x4a>
 80091ba:	3904      	subs	r1, #4
 80091bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80091c4:	459c      	cmp	ip, r3
 80091c6:	d8f9      	bhi.n	80091bc <__lshift+0xc0>
 80091c8:	e7ea      	b.n	80091a0 <__lshift+0xa4>
 80091ca:	bf00      	nop
 80091cc:	08009b8d 	.word	0x08009b8d
 80091d0:	08009b9e 	.word	0x08009b9e

080091d4 <__mcmp>:
 80091d4:	b530      	push	{r4, r5, lr}
 80091d6:	6902      	ldr	r2, [r0, #16]
 80091d8:	690c      	ldr	r4, [r1, #16]
 80091da:	1b12      	subs	r2, r2, r4
 80091dc:	d10e      	bne.n	80091fc <__mcmp+0x28>
 80091de:	f100 0314 	add.w	r3, r0, #20
 80091e2:	3114      	adds	r1, #20
 80091e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80091e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80091ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80091f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80091f4:	42a5      	cmp	r5, r4
 80091f6:	d003      	beq.n	8009200 <__mcmp+0x2c>
 80091f8:	d305      	bcc.n	8009206 <__mcmp+0x32>
 80091fa:	2201      	movs	r2, #1
 80091fc:	4610      	mov	r0, r2
 80091fe:	bd30      	pop	{r4, r5, pc}
 8009200:	4283      	cmp	r3, r0
 8009202:	d3f3      	bcc.n	80091ec <__mcmp+0x18>
 8009204:	e7fa      	b.n	80091fc <__mcmp+0x28>
 8009206:	f04f 32ff 	mov.w	r2, #4294967295
 800920a:	e7f7      	b.n	80091fc <__mcmp+0x28>

0800920c <__mdiff>:
 800920c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	460c      	mov	r4, r1
 8009212:	4606      	mov	r6, r0
 8009214:	4611      	mov	r1, r2
 8009216:	4620      	mov	r0, r4
 8009218:	4690      	mov	r8, r2
 800921a:	f7ff ffdb 	bl	80091d4 <__mcmp>
 800921e:	1e05      	subs	r5, r0, #0
 8009220:	d110      	bne.n	8009244 <__mdiff+0x38>
 8009222:	4629      	mov	r1, r5
 8009224:	4630      	mov	r0, r6
 8009226:	f7ff fd59 	bl	8008cdc <_Balloc>
 800922a:	b930      	cbnz	r0, 800923a <__mdiff+0x2e>
 800922c:	4b3a      	ldr	r3, [pc, #232]	; (8009318 <__mdiff+0x10c>)
 800922e:	4602      	mov	r2, r0
 8009230:	f240 2137 	movw	r1, #567	; 0x237
 8009234:	4839      	ldr	r0, [pc, #228]	; (800931c <__mdiff+0x110>)
 8009236:	f000 f91b 	bl	8009470 <__assert_func>
 800923a:	2301      	movs	r3, #1
 800923c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009240:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009244:	bfa4      	itt	ge
 8009246:	4643      	movge	r3, r8
 8009248:	46a0      	movge	r8, r4
 800924a:	4630      	mov	r0, r6
 800924c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009250:	bfa6      	itte	ge
 8009252:	461c      	movge	r4, r3
 8009254:	2500      	movge	r5, #0
 8009256:	2501      	movlt	r5, #1
 8009258:	f7ff fd40 	bl	8008cdc <_Balloc>
 800925c:	b920      	cbnz	r0, 8009268 <__mdiff+0x5c>
 800925e:	4b2e      	ldr	r3, [pc, #184]	; (8009318 <__mdiff+0x10c>)
 8009260:	4602      	mov	r2, r0
 8009262:	f240 2145 	movw	r1, #581	; 0x245
 8009266:	e7e5      	b.n	8009234 <__mdiff+0x28>
 8009268:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800926c:	6926      	ldr	r6, [r4, #16]
 800926e:	60c5      	str	r5, [r0, #12]
 8009270:	f104 0914 	add.w	r9, r4, #20
 8009274:	f108 0514 	add.w	r5, r8, #20
 8009278:	f100 0e14 	add.w	lr, r0, #20
 800927c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009280:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009284:	f108 0210 	add.w	r2, r8, #16
 8009288:	46f2      	mov	sl, lr
 800928a:	2100      	movs	r1, #0
 800928c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009290:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009294:	fa11 f88b 	uxtah	r8, r1, fp
 8009298:	b299      	uxth	r1, r3
 800929a:	0c1b      	lsrs	r3, r3, #16
 800929c:	eba8 0801 	sub.w	r8, r8, r1
 80092a0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092a4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092a8:	fa1f f888 	uxth.w	r8, r8
 80092ac:	1419      	asrs	r1, r3, #16
 80092ae:	454e      	cmp	r6, r9
 80092b0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092b4:	f84a 3b04 	str.w	r3, [sl], #4
 80092b8:	d8e8      	bhi.n	800928c <__mdiff+0x80>
 80092ba:	1b33      	subs	r3, r6, r4
 80092bc:	3b15      	subs	r3, #21
 80092be:	f023 0303 	bic.w	r3, r3, #3
 80092c2:	3304      	adds	r3, #4
 80092c4:	3415      	adds	r4, #21
 80092c6:	42a6      	cmp	r6, r4
 80092c8:	bf38      	it	cc
 80092ca:	2304      	movcc	r3, #4
 80092cc:	441d      	add	r5, r3
 80092ce:	4473      	add	r3, lr
 80092d0:	469e      	mov	lr, r3
 80092d2:	462e      	mov	r6, r5
 80092d4:	4566      	cmp	r6, ip
 80092d6:	d30e      	bcc.n	80092f6 <__mdiff+0xea>
 80092d8:	f10c 0203 	add.w	r2, ip, #3
 80092dc:	1b52      	subs	r2, r2, r5
 80092de:	f022 0203 	bic.w	r2, r2, #3
 80092e2:	3d03      	subs	r5, #3
 80092e4:	45ac      	cmp	ip, r5
 80092e6:	bf38      	it	cc
 80092e8:	2200      	movcc	r2, #0
 80092ea:	4413      	add	r3, r2
 80092ec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80092f0:	b17a      	cbz	r2, 8009312 <__mdiff+0x106>
 80092f2:	6107      	str	r7, [r0, #16]
 80092f4:	e7a4      	b.n	8009240 <__mdiff+0x34>
 80092f6:	f856 8b04 	ldr.w	r8, [r6], #4
 80092fa:	fa11 f288 	uxtah	r2, r1, r8
 80092fe:	1414      	asrs	r4, r2, #16
 8009300:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009304:	b292      	uxth	r2, r2
 8009306:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800930a:	f84e 2b04 	str.w	r2, [lr], #4
 800930e:	1421      	asrs	r1, r4, #16
 8009310:	e7e0      	b.n	80092d4 <__mdiff+0xc8>
 8009312:	3f01      	subs	r7, #1
 8009314:	e7ea      	b.n	80092ec <__mdiff+0xe0>
 8009316:	bf00      	nop
 8009318:	08009b8d 	.word	0x08009b8d
 800931c:	08009b9e 	.word	0x08009b9e

08009320 <__d2b>:
 8009320:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009324:	460f      	mov	r7, r1
 8009326:	2101      	movs	r1, #1
 8009328:	ec59 8b10 	vmov	r8, r9, d0
 800932c:	4616      	mov	r6, r2
 800932e:	f7ff fcd5 	bl	8008cdc <_Balloc>
 8009332:	4604      	mov	r4, r0
 8009334:	b930      	cbnz	r0, 8009344 <__d2b+0x24>
 8009336:	4602      	mov	r2, r0
 8009338:	4b24      	ldr	r3, [pc, #144]	; (80093cc <__d2b+0xac>)
 800933a:	4825      	ldr	r0, [pc, #148]	; (80093d0 <__d2b+0xb0>)
 800933c:	f240 310f 	movw	r1, #783	; 0x30f
 8009340:	f000 f896 	bl	8009470 <__assert_func>
 8009344:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009348:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800934c:	bb2d      	cbnz	r5, 800939a <__d2b+0x7a>
 800934e:	9301      	str	r3, [sp, #4]
 8009350:	f1b8 0300 	subs.w	r3, r8, #0
 8009354:	d026      	beq.n	80093a4 <__d2b+0x84>
 8009356:	4668      	mov	r0, sp
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	f7ff fd87 	bl	8008e6c <__lo0bits>
 800935e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009362:	b1e8      	cbz	r0, 80093a0 <__d2b+0x80>
 8009364:	f1c0 0320 	rsb	r3, r0, #32
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	430b      	orrs	r3, r1
 800936e:	40c2      	lsrs	r2, r0
 8009370:	6163      	str	r3, [r4, #20]
 8009372:	9201      	str	r2, [sp, #4]
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	61a3      	str	r3, [r4, #24]
 8009378:	2b00      	cmp	r3, #0
 800937a:	bf14      	ite	ne
 800937c:	2202      	movne	r2, #2
 800937e:	2201      	moveq	r2, #1
 8009380:	6122      	str	r2, [r4, #16]
 8009382:	b1bd      	cbz	r5, 80093b4 <__d2b+0x94>
 8009384:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009388:	4405      	add	r5, r0
 800938a:	603d      	str	r5, [r7, #0]
 800938c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009390:	6030      	str	r0, [r6, #0]
 8009392:	4620      	mov	r0, r4
 8009394:	b003      	add	sp, #12
 8009396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800939a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800939e:	e7d6      	b.n	800934e <__d2b+0x2e>
 80093a0:	6161      	str	r1, [r4, #20]
 80093a2:	e7e7      	b.n	8009374 <__d2b+0x54>
 80093a4:	a801      	add	r0, sp, #4
 80093a6:	f7ff fd61 	bl	8008e6c <__lo0bits>
 80093aa:	9b01      	ldr	r3, [sp, #4]
 80093ac:	6163      	str	r3, [r4, #20]
 80093ae:	3020      	adds	r0, #32
 80093b0:	2201      	movs	r2, #1
 80093b2:	e7e5      	b.n	8009380 <__d2b+0x60>
 80093b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093bc:	6038      	str	r0, [r7, #0]
 80093be:	6918      	ldr	r0, [r3, #16]
 80093c0:	f7ff fd34 	bl	8008e2c <__hi0bits>
 80093c4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093c8:	e7e2      	b.n	8009390 <__d2b+0x70>
 80093ca:	bf00      	nop
 80093cc:	08009b8d 	.word	0x08009b8d
 80093d0:	08009b9e 	.word	0x08009b9e

080093d4 <_mprec_log10>:
 80093d4:	2817      	cmp	r0, #23
 80093d6:	b5d0      	push	{r4, r6, r7, lr}
 80093d8:	4604      	mov	r4, r0
 80093da:	dc07      	bgt.n	80093ec <_mprec_log10+0x18>
 80093dc:	4b09      	ldr	r3, [pc, #36]	; (8009404 <_mprec_log10+0x30>)
 80093de:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80093e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80093e6:	ec41 0b10 	vmov	d0, r0, r1
 80093ea:	bdd0      	pop	{r4, r6, r7, pc}
 80093ec:	4906      	ldr	r1, [pc, #24]	; (8009408 <_mprec_log10+0x34>)
 80093ee:	4f07      	ldr	r7, [pc, #28]	; (800940c <_mprec_log10+0x38>)
 80093f0:	2000      	movs	r0, #0
 80093f2:	2600      	movs	r6, #0
 80093f4:	4632      	mov	r2, r6
 80093f6:	463b      	mov	r3, r7
 80093f8:	f7f7 f91e 	bl	8000638 <__aeabi_dmul>
 80093fc:	3c01      	subs	r4, #1
 80093fe:	d1f9      	bne.n	80093f4 <_mprec_log10+0x20>
 8009400:	e7f1      	b.n	80093e6 <_mprec_log10+0x12>
 8009402:	bf00      	nop
 8009404:	08009c20 	.word	0x08009c20
 8009408:	3ff00000 	.word	0x3ff00000
 800940c:	40240000 	.word	0x40240000

08009410 <_realloc_r>:
 8009410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009414:	4680      	mov	r8, r0
 8009416:	4614      	mov	r4, r2
 8009418:	460e      	mov	r6, r1
 800941a:	b921      	cbnz	r1, 8009426 <_realloc_r+0x16>
 800941c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009420:	4611      	mov	r1, r2
 8009422:	f7fd be33 	b.w	800708c <_malloc_r>
 8009426:	b92a      	cbnz	r2, 8009434 <_realloc_r+0x24>
 8009428:	f7fe f892 	bl	8007550 <_free_r>
 800942c:	4625      	mov	r5, r4
 800942e:	4628      	mov	r0, r5
 8009430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009434:	f000 f850 	bl	80094d8 <_malloc_usable_size_r>
 8009438:	4284      	cmp	r4, r0
 800943a:	4607      	mov	r7, r0
 800943c:	d802      	bhi.n	8009444 <_realloc_r+0x34>
 800943e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009442:	d812      	bhi.n	800946a <_realloc_r+0x5a>
 8009444:	4621      	mov	r1, r4
 8009446:	4640      	mov	r0, r8
 8009448:	f7fd fe20 	bl	800708c <_malloc_r>
 800944c:	4605      	mov	r5, r0
 800944e:	2800      	cmp	r0, #0
 8009450:	d0ed      	beq.n	800942e <_realloc_r+0x1e>
 8009452:	42bc      	cmp	r4, r7
 8009454:	4622      	mov	r2, r4
 8009456:	4631      	mov	r1, r6
 8009458:	bf28      	it	cs
 800945a:	463a      	movcs	r2, r7
 800945c:	f7fe fdb4 	bl	8007fc8 <memcpy>
 8009460:	4631      	mov	r1, r6
 8009462:	4640      	mov	r0, r8
 8009464:	f7fe f874 	bl	8007550 <_free_r>
 8009468:	e7e1      	b.n	800942e <_realloc_r+0x1e>
 800946a:	4635      	mov	r5, r6
 800946c:	e7df      	b.n	800942e <_realloc_r+0x1e>
	...

08009470 <__assert_func>:
 8009470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009472:	4614      	mov	r4, r2
 8009474:	461a      	mov	r2, r3
 8009476:	4b09      	ldr	r3, [pc, #36]	; (800949c <__assert_func+0x2c>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4605      	mov	r5, r0
 800947c:	68d8      	ldr	r0, [r3, #12]
 800947e:	b14c      	cbz	r4, 8009494 <__assert_func+0x24>
 8009480:	4b07      	ldr	r3, [pc, #28]	; (80094a0 <__assert_func+0x30>)
 8009482:	9100      	str	r1, [sp, #0]
 8009484:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009488:	4906      	ldr	r1, [pc, #24]	; (80094a4 <__assert_func+0x34>)
 800948a:	462b      	mov	r3, r5
 800948c:	f000 f82c 	bl	80094e8 <fiprintf>
 8009490:	f000 f83c 	bl	800950c <abort>
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <__assert_func+0x38>)
 8009496:	461c      	mov	r4, r3
 8009498:	e7f3      	b.n	8009482 <__assert_func+0x12>
 800949a:	bf00      	nop
 800949c:	200000b0 	.word	0x200000b0
 80094a0:	08009cf4 	.word	0x08009cf4
 80094a4:	08009d01 	.word	0x08009d01
 80094a8:	08009d2f 	.word	0x08009d2f

080094ac <_calloc_r>:
 80094ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094ae:	fba1 2402 	umull	r2, r4, r1, r2
 80094b2:	b94c      	cbnz	r4, 80094c8 <_calloc_r+0x1c>
 80094b4:	4611      	mov	r1, r2
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	f7fd fde8 	bl	800708c <_malloc_r>
 80094bc:	9a01      	ldr	r2, [sp, #4]
 80094be:	4605      	mov	r5, r0
 80094c0:	b930      	cbnz	r0, 80094d0 <_calloc_r+0x24>
 80094c2:	4628      	mov	r0, r5
 80094c4:	b003      	add	sp, #12
 80094c6:	bd30      	pop	{r4, r5, pc}
 80094c8:	220c      	movs	r2, #12
 80094ca:	6002      	str	r2, [r0, #0]
 80094cc:	2500      	movs	r5, #0
 80094ce:	e7f8      	b.n	80094c2 <_calloc_r+0x16>
 80094d0:	4621      	mov	r1, r4
 80094d2:	f7fd ffb0 	bl	8007436 <memset>
 80094d6:	e7f4      	b.n	80094c2 <_calloc_r+0x16>

080094d8 <_malloc_usable_size_r>:
 80094d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094dc:	1f18      	subs	r0, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	bfbc      	itt	lt
 80094e2:	580b      	ldrlt	r3, [r1, r0]
 80094e4:	18c0      	addlt	r0, r0, r3
 80094e6:	4770      	bx	lr

080094e8 <fiprintf>:
 80094e8:	b40e      	push	{r1, r2, r3}
 80094ea:	b503      	push	{r0, r1, lr}
 80094ec:	4601      	mov	r1, r0
 80094ee:	ab03      	add	r3, sp, #12
 80094f0:	4805      	ldr	r0, [pc, #20]	; (8009508 <fiprintf+0x20>)
 80094f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f6:	6800      	ldr	r0, [r0, #0]
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	f000 f837 	bl	800956c <_vfiprintf_r>
 80094fe:	b002      	add	sp, #8
 8009500:	f85d eb04 	ldr.w	lr, [sp], #4
 8009504:	b003      	add	sp, #12
 8009506:	4770      	bx	lr
 8009508:	200000b0 	.word	0x200000b0

0800950c <abort>:
 800950c:	b508      	push	{r3, lr}
 800950e:	2006      	movs	r0, #6
 8009510:	f000 fa04 	bl	800991c <raise>
 8009514:	2001      	movs	r0, #1
 8009516:	f7f8 fce7 	bl	8001ee8 <_exit>

0800951a <__sfputc_r>:
 800951a:	6893      	ldr	r3, [r2, #8]
 800951c:	3b01      	subs	r3, #1
 800951e:	2b00      	cmp	r3, #0
 8009520:	b410      	push	{r4}
 8009522:	6093      	str	r3, [r2, #8]
 8009524:	da08      	bge.n	8009538 <__sfputc_r+0x1e>
 8009526:	6994      	ldr	r4, [r2, #24]
 8009528:	42a3      	cmp	r3, r4
 800952a:	db01      	blt.n	8009530 <__sfputc_r+0x16>
 800952c:	290a      	cmp	r1, #10
 800952e:	d103      	bne.n	8009538 <__sfputc_r+0x1e>
 8009530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009534:	f000 b934 	b.w	80097a0 <__swbuf_r>
 8009538:	6813      	ldr	r3, [r2, #0]
 800953a:	1c58      	adds	r0, r3, #1
 800953c:	6010      	str	r0, [r2, #0]
 800953e:	7019      	strb	r1, [r3, #0]
 8009540:	4608      	mov	r0, r1
 8009542:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009546:	4770      	bx	lr

08009548 <__sfputs_r>:
 8009548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954a:	4606      	mov	r6, r0
 800954c:	460f      	mov	r7, r1
 800954e:	4614      	mov	r4, r2
 8009550:	18d5      	adds	r5, r2, r3
 8009552:	42ac      	cmp	r4, r5
 8009554:	d101      	bne.n	800955a <__sfputs_r+0x12>
 8009556:	2000      	movs	r0, #0
 8009558:	e007      	b.n	800956a <__sfputs_r+0x22>
 800955a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955e:	463a      	mov	r2, r7
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ffda 	bl	800951a <__sfputc_r>
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	d1f3      	bne.n	8009552 <__sfputs_r+0xa>
 800956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800956c <_vfiprintf_r>:
 800956c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009570:	460d      	mov	r5, r1
 8009572:	b09d      	sub	sp, #116	; 0x74
 8009574:	4614      	mov	r4, r2
 8009576:	4698      	mov	r8, r3
 8009578:	4606      	mov	r6, r0
 800957a:	b118      	cbz	r0, 8009584 <_vfiprintf_r+0x18>
 800957c:	6a03      	ldr	r3, [r0, #32]
 800957e:	b90b      	cbnz	r3, 8009584 <_vfiprintf_r+0x18>
 8009580:	f7fd fec0 	bl	8007304 <__sinit>
 8009584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009586:	07d9      	lsls	r1, r3, #31
 8009588:	d405      	bmi.n	8009596 <_vfiprintf_r+0x2a>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	059a      	lsls	r2, r3, #22
 800958e:	d402      	bmi.n	8009596 <_vfiprintf_r+0x2a>
 8009590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009592:	f7fd ffda 	bl	800754a <__retarget_lock_acquire_recursive>
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	071b      	lsls	r3, r3, #28
 800959a:	d501      	bpl.n	80095a0 <_vfiprintf_r+0x34>
 800959c:	692b      	ldr	r3, [r5, #16]
 800959e:	b99b      	cbnz	r3, 80095c8 <_vfiprintf_r+0x5c>
 80095a0:	4629      	mov	r1, r5
 80095a2:	4630      	mov	r0, r6
 80095a4:	f000 f93a 	bl	800981c <__swsetup_r>
 80095a8:	b170      	cbz	r0, 80095c8 <_vfiprintf_r+0x5c>
 80095aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ac:	07dc      	lsls	r4, r3, #31
 80095ae:	d504      	bpl.n	80095ba <_vfiprintf_r+0x4e>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	b01d      	add	sp, #116	; 0x74
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	89ab      	ldrh	r3, [r5, #12]
 80095bc:	0598      	lsls	r0, r3, #22
 80095be:	d4f7      	bmi.n	80095b0 <_vfiprintf_r+0x44>
 80095c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095c2:	f7fd ffc3 	bl	800754c <__retarget_lock_release_recursive>
 80095c6:	e7f3      	b.n	80095b0 <_vfiprintf_r+0x44>
 80095c8:	2300      	movs	r3, #0
 80095ca:	9309      	str	r3, [sp, #36]	; 0x24
 80095cc:	2320      	movs	r3, #32
 80095ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095d6:	2330      	movs	r3, #48	; 0x30
 80095d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800978c <_vfiprintf_r+0x220>
 80095dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095e0:	f04f 0901 	mov.w	r9, #1
 80095e4:	4623      	mov	r3, r4
 80095e6:	469a      	mov	sl, r3
 80095e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095ec:	b10a      	cbz	r2, 80095f2 <_vfiprintf_r+0x86>
 80095ee:	2a25      	cmp	r2, #37	; 0x25
 80095f0:	d1f9      	bne.n	80095e6 <_vfiprintf_r+0x7a>
 80095f2:	ebba 0b04 	subs.w	fp, sl, r4
 80095f6:	d00b      	beq.n	8009610 <_vfiprintf_r+0xa4>
 80095f8:	465b      	mov	r3, fp
 80095fa:	4622      	mov	r2, r4
 80095fc:	4629      	mov	r1, r5
 80095fe:	4630      	mov	r0, r6
 8009600:	f7ff ffa2 	bl	8009548 <__sfputs_r>
 8009604:	3001      	adds	r0, #1
 8009606:	f000 80a9 	beq.w	800975c <_vfiprintf_r+0x1f0>
 800960a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800960c:	445a      	add	r2, fp
 800960e:	9209      	str	r2, [sp, #36]	; 0x24
 8009610:	f89a 3000 	ldrb.w	r3, [sl]
 8009614:	2b00      	cmp	r3, #0
 8009616:	f000 80a1 	beq.w	800975c <_vfiprintf_r+0x1f0>
 800961a:	2300      	movs	r3, #0
 800961c:	f04f 32ff 	mov.w	r2, #4294967295
 8009620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009624:	f10a 0a01 	add.w	sl, sl, #1
 8009628:	9304      	str	r3, [sp, #16]
 800962a:	9307      	str	r3, [sp, #28]
 800962c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009630:	931a      	str	r3, [sp, #104]	; 0x68
 8009632:	4654      	mov	r4, sl
 8009634:	2205      	movs	r2, #5
 8009636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963a:	4854      	ldr	r0, [pc, #336]	; (800978c <_vfiprintf_r+0x220>)
 800963c:	f7f6 fdf0 	bl	8000220 <memchr>
 8009640:	9a04      	ldr	r2, [sp, #16]
 8009642:	b9d8      	cbnz	r0, 800967c <_vfiprintf_r+0x110>
 8009644:	06d1      	lsls	r1, r2, #27
 8009646:	bf44      	itt	mi
 8009648:	2320      	movmi	r3, #32
 800964a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800964e:	0713      	lsls	r3, r2, #28
 8009650:	bf44      	itt	mi
 8009652:	232b      	movmi	r3, #43	; 0x2b
 8009654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009658:	f89a 3000 	ldrb.w	r3, [sl]
 800965c:	2b2a      	cmp	r3, #42	; 0x2a
 800965e:	d015      	beq.n	800968c <_vfiprintf_r+0x120>
 8009660:	9a07      	ldr	r2, [sp, #28]
 8009662:	4654      	mov	r4, sl
 8009664:	2000      	movs	r0, #0
 8009666:	f04f 0c0a 	mov.w	ip, #10
 800966a:	4621      	mov	r1, r4
 800966c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009670:	3b30      	subs	r3, #48	; 0x30
 8009672:	2b09      	cmp	r3, #9
 8009674:	d94d      	bls.n	8009712 <_vfiprintf_r+0x1a6>
 8009676:	b1b0      	cbz	r0, 80096a6 <_vfiprintf_r+0x13a>
 8009678:	9207      	str	r2, [sp, #28]
 800967a:	e014      	b.n	80096a6 <_vfiprintf_r+0x13a>
 800967c:	eba0 0308 	sub.w	r3, r0, r8
 8009680:	fa09 f303 	lsl.w	r3, r9, r3
 8009684:	4313      	orrs	r3, r2
 8009686:	9304      	str	r3, [sp, #16]
 8009688:	46a2      	mov	sl, r4
 800968a:	e7d2      	b.n	8009632 <_vfiprintf_r+0xc6>
 800968c:	9b03      	ldr	r3, [sp, #12]
 800968e:	1d19      	adds	r1, r3, #4
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	9103      	str	r1, [sp, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	bfbb      	ittet	lt
 8009698:	425b      	neglt	r3, r3
 800969a:	f042 0202 	orrlt.w	r2, r2, #2
 800969e:	9307      	strge	r3, [sp, #28]
 80096a0:	9307      	strlt	r3, [sp, #28]
 80096a2:	bfb8      	it	lt
 80096a4:	9204      	strlt	r2, [sp, #16]
 80096a6:	7823      	ldrb	r3, [r4, #0]
 80096a8:	2b2e      	cmp	r3, #46	; 0x2e
 80096aa:	d10c      	bne.n	80096c6 <_vfiprintf_r+0x15a>
 80096ac:	7863      	ldrb	r3, [r4, #1]
 80096ae:	2b2a      	cmp	r3, #42	; 0x2a
 80096b0:	d134      	bne.n	800971c <_vfiprintf_r+0x1b0>
 80096b2:	9b03      	ldr	r3, [sp, #12]
 80096b4:	1d1a      	adds	r2, r3, #4
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	9203      	str	r2, [sp, #12]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	bfb8      	it	lt
 80096be:	f04f 33ff 	movlt.w	r3, #4294967295
 80096c2:	3402      	adds	r4, #2
 80096c4:	9305      	str	r3, [sp, #20]
 80096c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800979c <_vfiprintf_r+0x230>
 80096ca:	7821      	ldrb	r1, [r4, #0]
 80096cc:	2203      	movs	r2, #3
 80096ce:	4650      	mov	r0, sl
 80096d0:	f7f6 fda6 	bl	8000220 <memchr>
 80096d4:	b138      	cbz	r0, 80096e6 <_vfiprintf_r+0x17a>
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	eba0 000a 	sub.w	r0, r0, sl
 80096dc:	2240      	movs	r2, #64	; 0x40
 80096de:	4082      	lsls	r2, r0
 80096e0:	4313      	orrs	r3, r2
 80096e2:	3401      	adds	r4, #1
 80096e4:	9304      	str	r3, [sp, #16]
 80096e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ea:	4829      	ldr	r0, [pc, #164]	; (8009790 <_vfiprintf_r+0x224>)
 80096ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096f0:	2206      	movs	r2, #6
 80096f2:	f7f6 fd95 	bl	8000220 <memchr>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d03f      	beq.n	800977a <_vfiprintf_r+0x20e>
 80096fa:	4b26      	ldr	r3, [pc, #152]	; (8009794 <_vfiprintf_r+0x228>)
 80096fc:	bb1b      	cbnz	r3, 8009746 <_vfiprintf_r+0x1da>
 80096fe:	9b03      	ldr	r3, [sp, #12]
 8009700:	3307      	adds	r3, #7
 8009702:	f023 0307 	bic.w	r3, r3, #7
 8009706:	3308      	adds	r3, #8
 8009708:	9303      	str	r3, [sp, #12]
 800970a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800970c:	443b      	add	r3, r7
 800970e:	9309      	str	r3, [sp, #36]	; 0x24
 8009710:	e768      	b.n	80095e4 <_vfiprintf_r+0x78>
 8009712:	fb0c 3202 	mla	r2, ip, r2, r3
 8009716:	460c      	mov	r4, r1
 8009718:	2001      	movs	r0, #1
 800971a:	e7a6      	b.n	800966a <_vfiprintf_r+0xfe>
 800971c:	2300      	movs	r3, #0
 800971e:	3401      	adds	r4, #1
 8009720:	9305      	str	r3, [sp, #20]
 8009722:	4619      	mov	r1, r3
 8009724:	f04f 0c0a 	mov.w	ip, #10
 8009728:	4620      	mov	r0, r4
 800972a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800972e:	3a30      	subs	r2, #48	; 0x30
 8009730:	2a09      	cmp	r2, #9
 8009732:	d903      	bls.n	800973c <_vfiprintf_r+0x1d0>
 8009734:	2b00      	cmp	r3, #0
 8009736:	d0c6      	beq.n	80096c6 <_vfiprintf_r+0x15a>
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	e7c4      	b.n	80096c6 <_vfiprintf_r+0x15a>
 800973c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009740:	4604      	mov	r4, r0
 8009742:	2301      	movs	r3, #1
 8009744:	e7f0      	b.n	8009728 <_vfiprintf_r+0x1bc>
 8009746:	ab03      	add	r3, sp, #12
 8009748:	9300      	str	r3, [sp, #0]
 800974a:	462a      	mov	r2, r5
 800974c:	4b12      	ldr	r3, [pc, #72]	; (8009798 <_vfiprintf_r+0x22c>)
 800974e:	a904      	add	r1, sp, #16
 8009750:	4630      	mov	r0, r6
 8009752:	f3af 8000 	nop.w
 8009756:	4607      	mov	r7, r0
 8009758:	1c78      	adds	r0, r7, #1
 800975a:	d1d6      	bne.n	800970a <_vfiprintf_r+0x19e>
 800975c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800975e:	07d9      	lsls	r1, r3, #31
 8009760:	d405      	bmi.n	800976e <_vfiprintf_r+0x202>
 8009762:	89ab      	ldrh	r3, [r5, #12]
 8009764:	059a      	lsls	r2, r3, #22
 8009766:	d402      	bmi.n	800976e <_vfiprintf_r+0x202>
 8009768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800976a:	f7fd feef 	bl	800754c <__retarget_lock_release_recursive>
 800976e:	89ab      	ldrh	r3, [r5, #12]
 8009770:	065b      	lsls	r3, r3, #25
 8009772:	f53f af1d 	bmi.w	80095b0 <_vfiprintf_r+0x44>
 8009776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009778:	e71c      	b.n	80095b4 <_vfiprintf_r+0x48>
 800977a:	ab03      	add	r3, sp, #12
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	462a      	mov	r2, r5
 8009780:	4b05      	ldr	r3, [pc, #20]	; (8009798 <_vfiprintf_r+0x22c>)
 8009782:	a904      	add	r1, sp, #16
 8009784:	4630      	mov	r0, r6
 8009786:	f7fe fa2d 	bl	8007be4 <_printf_i>
 800978a:	e7e4      	b.n	8009756 <_vfiprintf_r+0x1ea>
 800978c:	08009adc 	.word	0x08009adc
 8009790:	08009ae6 	.word	0x08009ae6
 8009794:	00000000 	.word	0x00000000
 8009798:	08009549 	.word	0x08009549
 800979c:	08009ae2 	.word	0x08009ae2

080097a0 <__swbuf_r>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	460e      	mov	r6, r1
 80097a4:	4614      	mov	r4, r2
 80097a6:	4605      	mov	r5, r0
 80097a8:	b118      	cbz	r0, 80097b2 <__swbuf_r+0x12>
 80097aa:	6a03      	ldr	r3, [r0, #32]
 80097ac:	b90b      	cbnz	r3, 80097b2 <__swbuf_r+0x12>
 80097ae:	f7fd fda9 	bl	8007304 <__sinit>
 80097b2:	69a3      	ldr	r3, [r4, #24]
 80097b4:	60a3      	str	r3, [r4, #8]
 80097b6:	89a3      	ldrh	r3, [r4, #12]
 80097b8:	071a      	lsls	r2, r3, #28
 80097ba:	d525      	bpl.n	8009808 <__swbuf_r+0x68>
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	b31b      	cbz	r3, 8009808 <__swbuf_r+0x68>
 80097c0:	6823      	ldr	r3, [r4, #0]
 80097c2:	6922      	ldr	r2, [r4, #16]
 80097c4:	1a98      	subs	r0, r3, r2
 80097c6:	6963      	ldr	r3, [r4, #20]
 80097c8:	b2f6      	uxtb	r6, r6
 80097ca:	4283      	cmp	r3, r0
 80097cc:	4637      	mov	r7, r6
 80097ce:	dc04      	bgt.n	80097da <__swbuf_r+0x3a>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4628      	mov	r0, r5
 80097d4:	f7fe fbae 	bl	8007f34 <_fflush_r>
 80097d8:	b9e0      	cbnz	r0, 8009814 <__swbuf_r+0x74>
 80097da:	68a3      	ldr	r3, [r4, #8]
 80097dc:	3b01      	subs	r3, #1
 80097de:	60a3      	str	r3, [r4, #8]
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	6022      	str	r2, [r4, #0]
 80097e6:	701e      	strb	r6, [r3, #0]
 80097e8:	6962      	ldr	r2, [r4, #20]
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d004      	beq.n	80097fa <__swbuf_r+0x5a>
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	07db      	lsls	r3, r3, #31
 80097f4:	d506      	bpl.n	8009804 <__swbuf_r+0x64>
 80097f6:	2e0a      	cmp	r6, #10
 80097f8:	d104      	bne.n	8009804 <__swbuf_r+0x64>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4628      	mov	r0, r5
 80097fe:	f7fe fb99 	bl	8007f34 <_fflush_r>
 8009802:	b938      	cbnz	r0, 8009814 <__swbuf_r+0x74>
 8009804:	4638      	mov	r0, r7
 8009806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 f806 	bl	800981c <__swsetup_r>
 8009810:	2800      	cmp	r0, #0
 8009812:	d0d5      	beq.n	80097c0 <__swbuf_r+0x20>
 8009814:	f04f 37ff 	mov.w	r7, #4294967295
 8009818:	e7f4      	b.n	8009804 <__swbuf_r+0x64>
	...

0800981c <__swsetup_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4b2a      	ldr	r3, [pc, #168]	; (80098c8 <__swsetup_r+0xac>)
 8009820:	4605      	mov	r5, r0
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	460c      	mov	r4, r1
 8009826:	b118      	cbz	r0, 8009830 <__swsetup_r+0x14>
 8009828:	6a03      	ldr	r3, [r0, #32]
 800982a:	b90b      	cbnz	r3, 8009830 <__swsetup_r+0x14>
 800982c:	f7fd fd6a 	bl	8007304 <__sinit>
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009836:	0718      	lsls	r0, r3, #28
 8009838:	d422      	bmi.n	8009880 <__swsetup_r+0x64>
 800983a:	06d9      	lsls	r1, r3, #27
 800983c:	d407      	bmi.n	800984e <__swsetup_r+0x32>
 800983e:	2309      	movs	r3, #9
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009846:	81a3      	strh	r3, [r4, #12]
 8009848:	f04f 30ff 	mov.w	r0, #4294967295
 800984c:	e034      	b.n	80098b8 <__swsetup_r+0x9c>
 800984e:	0758      	lsls	r0, r3, #29
 8009850:	d512      	bpl.n	8009878 <__swsetup_r+0x5c>
 8009852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009854:	b141      	cbz	r1, 8009868 <__swsetup_r+0x4c>
 8009856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800985a:	4299      	cmp	r1, r3
 800985c:	d002      	beq.n	8009864 <__swsetup_r+0x48>
 800985e:	4628      	mov	r0, r5
 8009860:	f7fd fe76 	bl	8007550 <_free_r>
 8009864:	2300      	movs	r3, #0
 8009866:	6363      	str	r3, [r4, #52]	; 0x34
 8009868:	89a3      	ldrh	r3, [r4, #12]
 800986a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800986e:	81a3      	strh	r3, [r4, #12]
 8009870:	2300      	movs	r3, #0
 8009872:	6063      	str	r3, [r4, #4]
 8009874:	6923      	ldr	r3, [r4, #16]
 8009876:	6023      	str	r3, [r4, #0]
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f043 0308 	orr.w	r3, r3, #8
 800987e:	81a3      	strh	r3, [r4, #12]
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	b94b      	cbnz	r3, 8009898 <__swsetup_r+0x7c>
 8009884:	89a3      	ldrh	r3, [r4, #12]
 8009886:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800988a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988e:	d003      	beq.n	8009898 <__swsetup_r+0x7c>
 8009890:	4621      	mov	r1, r4
 8009892:	4628      	mov	r0, r5
 8009894:	f000 f884 	bl	80099a0 <__smakebuf_r>
 8009898:	89a0      	ldrh	r0, [r4, #12]
 800989a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800989e:	f010 0301 	ands.w	r3, r0, #1
 80098a2:	d00a      	beq.n	80098ba <__swsetup_r+0x9e>
 80098a4:	2300      	movs	r3, #0
 80098a6:	60a3      	str	r3, [r4, #8]
 80098a8:	6963      	ldr	r3, [r4, #20]
 80098aa:	425b      	negs	r3, r3
 80098ac:	61a3      	str	r3, [r4, #24]
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	b943      	cbnz	r3, 80098c4 <__swsetup_r+0xa8>
 80098b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098b6:	d1c4      	bne.n	8009842 <__swsetup_r+0x26>
 80098b8:	bd38      	pop	{r3, r4, r5, pc}
 80098ba:	0781      	lsls	r1, r0, #30
 80098bc:	bf58      	it	pl
 80098be:	6963      	ldrpl	r3, [r4, #20]
 80098c0:	60a3      	str	r3, [r4, #8]
 80098c2:	e7f4      	b.n	80098ae <__swsetup_r+0x92>
 80098c4:	2000      	movs	r0, #0
 80098c6:	e7f7      	b.n	80098b8 <__swsetup_r+0x9c>
 80098c8:	200000b0 	.word	0x200000b0

080098cc <_raise_r>:
 80098cc:	291f      	cmp	r1, #31
 80098ce:	b538      	push	{r3, r4, r5, lr}
 80098d0:	4604      	mov	r4, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	d904      	bls.n	80098e0 <_raise_r+0x14>
 80098d6:	2316      	movs	r3, #22
 80098d8:	6003      	str	r3, [r0, #0]
 80098da:	f04f 30ff 	mov.w	r0, #4294967295
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80098e2:	b112      	cbz	r2, 80098ea <_raise_r+0x1e>
 80098e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e8:	b94b      	cbnz	r3, 80098fe <_raise_r+0x32>
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 f830 	bl	8009950 <_getpid_r>
 80098f0:	462a      	mov	r2, r5
 80098f2:	4601      	mov	r1, r0
 80098f4:	4620      	mov	r0, r4
 80098f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098fa:	f000 b817 	b.w	800992c <_kill_r>
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d00a      	beq.n	8009918 <_raise_r+0x4c>
 8009902:	1c59      	adds	r1, r3, #1
 8009904:	d103      	bne.n	800990e <_raise_r+0x42>
 8009906:	2316      	movs	r3, #22
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	2001      	movs	r0, #1
 800990c:	e7e7      	b.n	80098de <_raise_r+0x12>
 800990e:	2400      	movs	r4, #0
 8009910:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009914:	4628      	mov	r0, r5
 8009916:	4798      	blx	r3
 8009918:	2000      	movs	r0, #0
 800991a:	e7e0      	b.n	80098de <_raise_r+0x12>

0800991c <raise>:
 800991c:	4b02      	ldr	r3, [pc, #8]	; (8009928 <raise+0xc>)
 800991e:	4601      	mov	r1, r0
 8009920:	6818      	ldr	r0, [r3, #0]
 8009922:	f7ff bfd3 	b.w	80098cc <_raise_r>
 8009926:	bf00      	nop
 8009928:	200000b0 	.word	0x200000b0

0800992c <_kill_r>:
 800992c:	b538      	push	{r3, r4, r5, lr}
 800992e:	4d07      	ldr	r5, [pc, #28]	; (800994c <_kill_r+0x20>)
 8009930:	2300      	movs	r3, #0
 8009932:	4604      	mov	r4, r0
 8009934:	4608      	mov	r0, r1
 8009936:	4611      	mov	r1, r2
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	f7f8 fac5 	bl	8001ec8 <_kill>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	d102      	bne.n	8009948 <_kill_r+0x1c>
 8009942:	682b      	ldr	r3, [r5, #0]
 8009944:	b103      	cbz	r3, 8009948 <_kill_r+0x1c>
 8009946:	6023      	str	r3, [r4, #0]
 8009948:	bd38      	pop	{r3, r4, r5, pc}
 800994a:	bf00      	nop
 800994c:	20000460 	.word	0x20000460

08009950 <_getpid_r>:
 8009950:	f7f8 bab2 	b.w	8001eb8 <_getpid>

08009954 <__swhatbuf_r>:
 8009954:	b570      	push	{r4, r5, r6, lr}
 8009956:	460c      	mov	r4, r1
 8009958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995c:	2900      	cmp	r1, #0
 800995e:	b096      	sub	sp, #88	; 0x58
 8009960:	4615      	mov	r5, r2
 8009962:	461e      	mov	r6, r3
 8009964:	da0d      	bge.n	8009982 <__swhatbuf_r+0x2e>
 8009966:	89a3      	ldrh	r3, [r4, #12]
 8009968:	f013 0f80 	tst.w	r3, #128	; 0x80
 800996c:	f04f 0100 	mov.w	r1, #0
 8009970:	bf0c      	ite	eq
 8009972:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009976:	2340      	movne	r3, #64	; 0x40
 8009978:	2000      	movs	r0, #0
 800997a:	6031      	str	r1, [r6, #0]
 800997c:	602b      	str	r3, [r5, #0]
 800997e:	b016      	add	sp, #88	; 0x58
 8009980:	bd70      	pop	{r4, r5, r6, pc}
 8009982:	466a      	mov	r2, sp
 8009984:	f000 f848 	bl	8009a18 <_fstat_r>
 8009988:	2800      	cmp	r0, #0
 800998a:	dbec      	blt.n	8009966 <__swhatbuf_r+0x12>
 800998c:	9901      	ldr	r1, [sp, #4]
 800998e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009992:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009996:	4259      	negs	r1, r3
 8009998:	4159      	adcs	r1, r3
 800999a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800999e:	e7eb      	b.n	8009978 <__swhatbuf_r+0x24>

080099a0 <__smakebuf_r>:
 80099a0:	898b      	ldrh	r3, [r1, #12]
 80099a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099a4:	079d      	lsls	r5, r3, #30
 80099a6:	4606      	mov	r6, r0
 80099a8:	460c      	mov	r4, r1
 80099aa:	d507      	bpl.n	80099bc <__smakebuf_r+0x1c>
 80099ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80099b0:	6023      	str	r3, [r4, #0]
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	2301      	movs	r3, #1
 80099b6:	6163      	str	r3, [r4, #20]
 80099b8:	b002      	add	sp, #8
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	ab01      	add	r3, sp, #4
 80099be:	466a      	mov	r2, sp
 80099c0:	f7ff ffc8 	bl	8009954 <__swhatbuf_r>
 80099c4:	9900      	ldr	r1, [sp, #0]
 80099c6:	4605      	mov	r5, r0
 80099c8:	4630      	mov	r0, r6
 80099ca:	f7fd fb5f 	bl	800708c <_malloc_r>
 80099ce:	b948      	cbnz	r0, 80099e4 <__smakebuf_r+0x44>
 80099d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d4:	059a      	lsls	r2, r3, #22
 80099d6:	d4ef      	bmi.n	80099b8 <__smakebuf_r+0x18>
 80099d8:	f023 0303 	bic.w	r3, r3, #3
 80099dc:	f043 0302 	orr.w	r3, r3, #2
 80099e0:	81a3      	strh	r3, [r4, #12]
 80099e2:	e7e3      	b.n	80099ac <__smakebuf_r+0xc>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	6020      	str	r0, [r4, #0]
 80099e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ec:	81a3      	strh	r3, [r4, #12]
 80099ee:	9b00      	ldr	r3, [sp, #0]
 80099f0:	6163      	str	r3, [r4, #20]
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	6120      	str	r0, [r4, #16]
 80099f6:	b15b      	cbz	r3, 8009a10 <__smakebuf_r+0x70>
 80099f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099fc:	4630      	mov	r0, r6
 80099fe:	f000 f81d 	bl	8009a3c <_isatty_r>
 8009a02:	b128      	cbz	r0, 8009a10 <__smakebuf_r+0x70>
 8009a04:	89a3      	ldrh	r3, [r4, #12]
 8009a06:	f023 0303 	bic.w	r3, r3, #3
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	89a3      	ldrh	r3, [r4, #12]
 8009a12:	431d      	orrs	r5, r3
 8009a14:	81a5      	strh	r5, [r4, #12]
 8009a16:	e7cf      	b.n	80099b8 <__smakebuf_r+0x18>

08009a18 <_fstat_r>:
 8009a18:	b538      	push	{r3, r4, r5, lr}
 8009a1a:	4d07      	ldr	r5, [pc, #28]	; (8009a38 <_fstat_r+0x20>)
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	602b      	str	r3, [r5, #0]
 8009a26:	f7f8 faae 	bl	8001f86 <_fstat>
 8009a2a:	1c43      	adds	r3, r0, #1
 8009a2c:	d102      	bne.n	8009a34 <_fstat_r+0x1c>
 8009a2e:	682b      	ldr	r3, [r5, #0]
 8009a30:	b103      	cbz	r3, 8009a34 <_fstat_r+0x1c>
 8009a32:	6023      	str	r3, [r4, #0]
 8009a34:	bd38      	pop	{r3, r4, r5, pc}
 8009a36:	bf00      	nop
 8009a38:	20000460 	.word	0x20000460

08009a3c <_isatty_r>:
 8009a3c:	b538      	push	{r3, r4, r5, lr}
 8009a3e:	4d06      	ldr	r5, [pc, #24]	; (8009a58 <_isatty_r+0x1c>)
 8009a40:	2300      	movs	r3, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	4608      	mov	r0, r1
 8009a46:	602b      	str	r3, [r5, #0]
 8009a48:	f7f8 faad 	bl	8001fa6 <_isatty>
 8009a4c:	1c43      	adds	r3, r0, #1
 8009a4e:	d102      	bne.n	8009a56 <_isatty_r+0x1a>
 8009a50:	682b      	ldr	r3, [r5, #0]
 8009a52:	b103      	cbz	r3, 8009a56 <_isatty_r+0x1a>
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	bd38      	pop	{r3, r4, r5, pc}
 8009a58:	20000460 	.word	0x20000460

08009a5c <_init>:
 8009a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a5e:	bf00      	nop
 8009a60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a62:	bc08      	pop	{r3}
 8009a64:	469e      	mov	lr, r3
 8009a66:	4770      	bx	lr

08009a68 <_fini>:
 8009a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a6a:	bf00      	nop
 8009a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a6e:	bc08      	pop	{r3}
 8009a70:	469e      	mov	lr, r3
 8009a72:	4770      	bx	lr
